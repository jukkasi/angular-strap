{"version":3,"sources":["angular-strap.js","alert/alert.js","helpers/compiler.js","helpers/date-formatter.js","button/button.js","affix/affix.js","aside/aside.js","collapse/collapse.js","datepicker/datepicker.js","helpers/date-parser.js","helpers/debounce.js","helpers/dimensions.js","helpers/parse-options.js","helpers/raf.js","helpers/utils.js","modal/modal.js","dropdown/dropdown.js","navbar/navbar.js","popover/popover.js","select/select.js","tab/tab.js","scrollspy/scrollspy.js","tooltip/tooltip.js","typeahead/typeahead.js","timepicker/timepicker.js"],"names":["prefixEvent","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","bsCompilerService","$inject","$http","get","angular","module","getDefaultLocale","$locale","this","compile","controller","console","controllerAs","resolve","copy","locals","bindToController","forEach","value","isString","$injector","key","invoke","transformTemplate","identity","extend","$template","when","$q","contentEl","findElement","outerHTML","contentTemplate","all","templateEl","removeAttr","html","templates","replace","next","remove","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","data","apply","container","provider","defaults","backdrop","keyboard","show","duration","type","dismissable","$get","AlertFactory","$alert","$scope","config","$timeout","hide","restrict","directive","isDefined","falseValueRegExp","hasOwnProperty","title","attr","newValue","oldValue","trustAsHtml","bsAlert","$observe","content","alert","trigger","on","toggle","$on","destroy","activeClass","require","querySelectorAll","childEl","ngModel","child","$button","constantValueRegExp","isInput","trueValue","falseValue","test","hasExoticValues","viewValue","$formatters","push","$render","modelValue","isActive","equals","checked","activeElement","bind","toggleEvent","$modelValue","$$rAF","$setViewValue","toggleClass","$apply","hasClass","nodeName","windowEl","$window","AffixFactory","offsetTop","$affix","inlineStyles","reset","setWidth","initialAffixTop","offsetParent","match","getRequiredAffixClass","unpin","position","top","scrollTop","getScrollTop","scrollHeight","getScrollHeight","targetEl","pageYOffset","document","parent","target","initialOffsetTop","offsetBottom","affixed","init","i","$parseOffsets","checkPosition","checkPositionWithEventLoop","dimensions","offset","style","width","off","affix","setTimeout","height","elementHeight","css","offsetUnpin","bodyEl","offsetHeight","removeClass","addClass","offsetWidth","$onResize","$debouncedOnResize","initialPosition","affixTarget","$element","option","animation","prefixClass","AsideFactory","$aside","requestAnimationFrame","$modal","bsAside","$watch","aside","self","startCollapsed","allowMultiple","$attrs","activeIndexes","$targets","$active","length","index","indexOf","activeItems","splice","activateItem","$options","$collapse","$viewChangeListeners","$registerToggle","$toggles","$unregisterToggle","$unregisterTarget","deactivateItem","fn","fixActiveItemIndexes","$setActive","disallowToggle","$activeIndexes","bsCollapseCtrl","controllers","$animate","ngModelCtrl","attrs","isArray","bsCollapseToggle","$registerTarget","render","active","action","delay","useNative","dateType","dateFormat","timezone","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","autoclose","minDate","Infinity","maxDate","startView","minView","startWeek","daysOfWeekDisabled","iconLeft","iconRight","isNative","DatepickerFactory","parentScope","$datepicker","pickerViews","views","el","selected","date","focus","viewDate","$iconLeft","$iconRight","$picker","$views","$mode","datepickerViews","$selectPane","$toggleMode","setMode","select","isDate","$build","updateDisabledDates","disabledDateRanges","dateRanges","$date","$dateValue","keep","Date","year","getFullYear","month","getDate","mode","pristine","call","$updateSelected","rows","built","$isSelected","$setDisabledEl","disabled","isDisabled","steps","targetDate","getUTCFullYear","getUTCMonth","UTC","$onMouseDown","evt","preventDefault","stopPropagation","isTouch","getUTCDate","$onKeyDown","keyCode","shiftKey","altKey","updateSelected","onKeyDown","$digest","prop","focusElement","_init","_destroy","_show","_hide","blur","navigator","userAgent","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","isMaxValid","isValid","isMinValid","isNaN","parsedDate","getTime","$parsers","unshift","$setValidity","getDateFormattedString","formatDate","bsShow","lang","format","$dateFormatter","dateParser","$dateParser","strict","validateAgainstMinMaxDate","getDateForAttribute","disabledDates","parse","timezoneOffsetAdjust","isUndefined","NaN","daySplit","arr","mod","n","m","arrays","size","$sce","weekDaysMin","weekdaysShort","weekDaysLabelsHtml","startDate","picker","weekDaysLabels","slice","concat","split","getMonth","update","firstDayOfMonth","firstDate","getDay","today","firstDateOffset","build","day","days","isToday","toDateString","label","muted","showLabels","labels","time","isSelected","newDate","name","firstMonth","months","lastDate","actualMonth","parseInt","firstYear","years","actualYear","setYear","$compile","$controller","service","splitTimeFormat","timeFormat","exec","DATETIME_FORMATS","id","getDatetimeFormat","SHORTDAY","hoursFormat","minutesFormat","secondsFormat","timeSeparator","showSeconds","dateFilter","ParseDate","seconds","$localeProvider","milliseconds","prototype","hours","array","isNumeric","parseFloat","isFinite","indexOfCaseInsensitive","len","str","toString","toLowerCase","DateParserFactory","minutes","getHours","getMilliseconds","getMinutes","proto","noop","toDate","regExpMap","sss","mm","keys","setFnMap","map","clonedFormat","search","v","sortedMap","regExpForFormat","re","join","text","Object","escapeReservedSymbols","RegExp","regex","HH","H","hh","h","a","EEEE","EEE","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","ss","setSeconds","s","setMinutes","setHours","setDate","setMonth","setFullYear","setMap","$format","setMapForFormat","baseDate","formatRegex","formatSetMap","matches","fromDate","substr","getTimeForAttribute","daylightSavingAdjust","undo","func","timeout","context","factory","immediate","args","cancel","callNow","leading","trailing","wait","currentStyle","window","getComputedStyle","extra","boxRect","getBoundingClientRect","left","docElement","ownerDocument","curPosition","curLeft","curCSSTop","documentElement","clientTop","pageXOffset","scrollLeft","clientLeft","curCSSLeft","calculatePosition","curTop","curOffset","curElem","props","isFunction","using","offsetParentRect","offsetParentElement","outer","$parseOptions","$values","regexp","$match","displayFn","valueName","valueFn","ParseOptionsFactory","groupByFn","valuesFn","$parse","keyName","cancelAnimationFrame","values","displayValue","raf","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","timer","supported","$document","e","isIE","stopImmediatePropagation","ua","selectScrollFix","tagName","bodyElement","ModalFactory","enterAnimateCallback","version","minor","$isShown","modalElement","unbindBackdropEvents","hideOnBackdropClick","backdropElement","preventEventDefault","bindKeyboardEvents","$onKeyUp","destroyModalElement","modalScope","$destroy","promise","$new","$rootScope","$hide","$$postDigest","$id","$show","bottom","right","z-index","compileData","after","isElement","$emit","display","placement","clonedElement","defaultPrevented","enter","backdropAnimation","safeDigest","bindBackdropEvents","leave","leaveAnimateCallback","unbindKeyboardEvents","which","$root","$$phase","query","body","bsModal","modal","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","parentEl","transclusion","bsDropdown","dropdown","routeAttr","$navbar","liElements","li","liElement","pattern","path","autoClose","$popover","PopoverFactory","$tooltip","dataTarget","popover","bsPopover","$applyPlacement","setViewport","viewport","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$select","$activeIndex","$isMultiple","$showAllNoneButtons","$allText","$iconCheckmark","activate","$isActive","$isVisible","$selectNone","$matches","$updateActiveIndex","b","$getIndex","minLength","$viewValue","l","addEventListener","$utils","dataMultiple","inputEl","watchedOptions","$watchCollection","parsedOptions","bsOptions","$isEmpty","navClass","$activeClass","$panes","$activePaneChangeListeners","$push","pane","$navClass","$remove","activeIndex","$pane","$tab","transclude","postLink","bsTabsCtrl","bsActivePane","parsedBsActivePane","assign","spies","debounce","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","$trackedElements","sortedElements","activeTarget","debouncedCheckPosition","viewportHeight","throttledCheckPosition","debouncedCheckOffsets","checkOffsets","docEl","$activateElement","source","$getTrackedElement","filter","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","bsEnabled","selector","padding","String","htmlReplaceRegExp","$body","_tipToHide","tipElement","triggers","unbindTriggerEvents","$onFocusElementMouseDown","_autoCloseEventsBinded","bindAutoCloseEvents","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","rect","elRect","p","scroll","isBody","getCalculatedOffset","actualWidth","actualHeight","outerDims","clientWidth","innerHeight","tip","marginTop","marginLeft","setOffset","delta","getViewportAdjustedDelta","isVertical","replaceArrow","arrowDelta","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","clearTimeout","tipScope","$promise","$bsCompiler","$setEnabled","setEnabled","isEnabled","tipContainer","bindTriggerEvents","destroyTipElement","hoverState","lastChild","visibility","customClass","_blur","elementPosition","autoPlace","autoToken","viewportPosition","originalPlacement","tipHeight","tipPosition","applyPlacement","tipWidth","$location","tooltip","bsTooltip","limit","autoSelect","comparator","trimValue","$typeahead","$resetMatches","TypeaheadFactory","$filter","expression","results","typeahead","watchOptions","selectMode","isVisible","val","timeType","modelTimeFormat","minTime","maxTime","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","$timepicker","timepickerFactory","hour","meridian","coeff","selRange","end","start","setSelectionRange","collapse","selectionStart","moveStart","selectionEnd","moveEnd","floorMinutes","floor","selectedIndex","defaultDate","second","getSeconds","millisecond","$iconUp","$iconDown","$moveIndex","$switchMeridian","switchMeridian","minute","midIndex","$isDisabled","showAM","isAM","selectedTime","$arrowAction","$setTimeByStep","triggerHandler","sepLength","lateralMove","count","minutesLength","selectRange","hoursLength","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","parsedTime","getTimeFormattedString","timepicker","validateAgainstMinMaxTime"],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\r\n'use strict';\r\n\r\n// Source: module.js\r\nangular.module('mgcrea.ngStrap', [\r\n  'mgcrea.ngStrap.modal',\r\n  'mgcrea.ngStrap.aside',\r\n  'mgcrea.ngStrap.alert',\r\n  'mgcrea.ngStrap.button',\r\n  'mgcrea.ngStrap.select',\r\n  'mgcrea.ngStrap.datepicker',\r\n  'mgcrea.ngStrap.timepicker',\r\n  'mgcrea.ngStrap.navbar',\r\n  'mgcrea.ngStrap.tooltip',\r\n  'mgcrea.ngStrap.popover',\r\n  'mgcrea.ngStrap.dropdown',\r\n  'mgcrea.ngStrap.typeahead',\r\n  'mgcrea.ngStrap.scrollspy',\r\n  'mgcrea.ngStrap.affix',\r\n  'mgcrea.ngStrap.tab',\r\n  'mgcrea.ngStrap.collapse'\r\n]);\r\n\r\n// Source: alert\\alert.js\r\n// @BUG: following snippet won't compile correctly\r\n// @TODO: submit issue to core\r\n// '<span ng-if=\"title\"><strong ng-bind=\"title\"></strong>&nbsp;</span><span ng-bind-html=\"content\"></span>' +\r\n\r\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$alert', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'alert',\r\n      prefixEvent: 'alert',\r\n      placement: null,\r\n      templateUrl: 'alert/alert.tpl.html',\r\n      container: false,\r\n      element: null,\r\n      backdrop: false,\r\n      keyboard: true,\r\n      show: true,\r\n      // Specific options\r\n      duration: false,\r\n      type: false,\r\n      dismissable: true\r\n    };\r\n\r\n    this.$get = function($modal, $timeout) {\r\n\r\n      function AlertFactory(config) {\r\n\r\n        var $alert = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $alert = $modal(options);\r\n\r\n        // Support scope as string options [/*title, content, */ type, dismissable]\r\n        $alert.$scope.dismissable = !!options.dismissable;\r\n        if(options.type) {\r\n          $alert.$scope.type = options.type;\r\n        }\r\n\r\n        // Support auto-close duration\r\n        var show = $alert.show;\r\n        if(options.duration) {\r\n          $alert.show = function() {\r\n            show();\r\n            $timeout(function() {\r\n              $alert.hide();\r\n            }, options.duration * 1000);\r\n          };\r\n        }\r\n\r\n        return $alert;\r\n\r\n      }\r\n\r\n      return AlertFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAlert', function($window, $sce, $alert) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')){\r\n          scope.title = '';\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content', 'type'], function(key) {\r\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\r\n            scope[key] = $sce.trustAsHtml(newValue);\r\n          });\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsAlert && scope.$watch(attr.bsAlert, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.content = newValue;\r\n          }\r\n        }, true);\r\n\r\n        // Initialize alert\r\n        var alert = $alert(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', alert.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (alert) alert.destroy();\r\n          options = null;\r\n          alert = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: button\\button.js\r\nangular.module('mgcrea.ngStrap.button', [])\r\n\r\n  .provider('$button', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass:'active',\r\n      toggleEvent:'click'\r\n    };\r\n\r\n    this.$get = function() {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckboxGroup', function() {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink(element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\r\n        angular.forEach(children, function(child) {\r\n          var childEl = angular.element(child);\r\n          childEl.attr('bs-checkbox', '');\r\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckbox', function($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support label > input[type=\"checkbox\"]\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\r\n        if(constantValueRegExp.test(attr.trueValue)) {\r\n          trueValue = scope.$eval(attr.trueValue);\r\n        }\r\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\r\n        if(constantValueRegExp.test(attr.falseValue)) {\r\n          falseValue = scope.$eval(attr.falseValue);\r\n        }\r\n\r\n        // Parse exotic values\r\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\r\n        if(hasExoticValues) {\r\n          controller.$parsers.push(function(viewValue) {\r\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\r\n            return viewValue ? trueValue : falseValue;\r\n          });\r\n          // modelValue -> $formatters -> viewValue\r\n          controller.$formatters.push(function(modelValue) {\r\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n             return angular.equals(modelValue, trueValue);\r\n          });\r\n          // Fix rendering for exotic values\r\n          scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n            controller.$render();\r\n          });\r\n        }\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = angular.equals(controller.$modelValue, trueValue);\r\n          $$rAF(function() {\r\n            if(isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function() {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            if(!isInput) {\r\n              controller.$setViewValue(!activeElement.hasClass('active'));\r\n            }\r\n            if(!hasExoticValues) {\r\n              controller.$render();\r\n            }\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadioGroup', function() {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink(element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\r\n        angular.forEach(children, function(child) {\r\n          angular.element(child).attr('bs-radio', '');\r\n          angular.element(child).attr('ng-model', attr.ngModel);\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadio', function($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support `label > input[type=\"radio\"]` markup\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var value;\r\n        attr.$observe('value', function(v) {\r\n          value = constantValueRegExp.test(v) ? scope.$eval(v) : v;\r\n          controller.$render();\r\n        });\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = angular.equals(controller.$modelValue, value);\r\n          $$rAF(function() {\r\n            if(isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function() {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            controller.$setViewValue(value);\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: affix\\affix.js\r\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\r\n\r\n  .provider('$affix', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      offsetTop: 'auto',\r\n      inlineStyles: true\r\n    };\r\n\r\n    this.$get = function($window, debounce, dimensions) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var windowEl = angular.element($window);\r\n\r\n      function AffixFactory(element, config) {\r\n\r\n        var $affix = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        var targetEl = options.target;\r\n\r\n        // Initial private vars\r\n        var reset = 'affix affix-top affix-bottom',\r\n            setWidth = false,\r\n            initialAffixTop = 0,\r\n            initialOffsetTop = 0,\r\n            offsetTop = 0,\r\n            offsetBottom = 0,\r\n            affixed = null,\r\n            unpin = null;\r\n\r\n        var parent = element.parent();\r\n        // Options: custom parent\r\n        if (options.offsetParent) {\r\n          if (options.offsetParent.match(/^\\d+$/)) {\r\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\r\n              parent = parent.parent();\r\n            }\r\n          }\r\n          else {\r\n            parent = angular.element(options.offsetParent);\r\n          }\r\n        }\r\n\r\n        $affix.init = function() {\r\n\r\n          this.$parseOffsets();\r\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\r\n          setWidth = !element[0].style.width;\r\n\r\n          // Bind events\r\n          targetEl.on('scroll', this.checkPosition);\r\n          targetEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', this.$debouncedOnResize);\r\n\r\n          // Both of these checkPosition() calls are necessary for the case where\r\n          // the user hits refresh after scrolling to the bottom of the page.\r\n          this.checkPosition();\r\n          this.checkPositionWithEventLoop();\r\n\r\n        };\r\n\r\n        $affix.destroy = function() {\r\n\r\n          // Unbind events\r\n          targetEl.off('scroll', this.checkPosition);\r\n          targetEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', this.$debouncedOnResize);\r\n\r\n        };\r\n\r\n        $affix.checkPositionWithEventLoop = function() {\r\n\r\n          // IE 9 throws an error if we use 'this' instead of '$affix'\r\n          // in this setTimeout call\r\n          setTimeout($affix.checkPosition, 1);\r\n\r\n        };\r\n\r\n        $affix.checkPosition = function() {\r\n          // if (!this.$element.is(':visible')) return\r\n\r\n          var scrollTop = getScrollTop();\r\n          var position = dimensions.offset(element[0]);\r\n          var elementHeight = dimensions.height(element[0]);\r\n\r\n          // Get required affix class according to position\r\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\r\n\r\n          // Did affix status changed this last check?\r\n          if(affixed === affix) return;\r\n          affixed = affix;\r\n\r\n          if(affix === 'top') {\r\n            unpin = null;\r\n            if(setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', '');\r\n            }\r\n          } else if(affix === 'bottom') {\r\n            if (options.offsetUnpin) {\r\n              unpin = -(options.offsetUnpin * 1);\r\n            }\r\n            else {\r\n              // Calculate unpin threshold when affixed to bottom.\r\n              // Hopefully the browser scrolls pixel by pixel.\r\n              unpin = position.top - scrollTop;\r\n            }\r\n            if(setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\r\n            }\r\n          } else { // affix === 'middle'\r\n            unpin = null;\r\n            if(setWidth) {\r\n              element.css('width', element[0].offsetWidth + 'px');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', 'fixed');\r\n              element.css('top', initialAffixTop + 'px');\r\n            }\r\n          }\r\n\r\n          // Add proper affix class\r\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\r\n\r\n        };\r\n\r\n        $affix.$onResize = function() {\r\n          $affix.$parseOffsets();\r\n          $affix.checkPosition();\r\n        };\r\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\r\n\r\n        $affix.$parseOffsets = function() {\r\n          var initialPosition = element.css('position');\r\n          // Reset position to calculate correct offsetTop\r\n          if (options.inlineStyles){\r\n            element.css('position', (options.offsetParent) ? '' : 'relative');\r\n          }\r\n\r\n          if(options.offsetTop) {\r\n            if(options.offsetTop === 'auto') {\r\n              options.offsetTop = '+0';\r\n            }\r\n            if(options.offsetTop.match(/^[-+]\\d+$/)) {\r\n              initialAffixTop = - options.offsetTop * 1;\r\n              if(options.offsetParent) {\r\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\r\n              }\r\n              else {\r\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\r\n              }\r\n            }\r\n            else {\r\n              offsetTop = options.offsetTop * 1;\r\n            }\r\n          }\r\n\r\n          if(options.offsetBottom) {\r\n            if(options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\r\n              // add 1 pixel due to rounding problems...\r\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\r\n            }\r\n            else {\r\n              offsetBottom = options.offsetBottom * 1;\r\n            }\r\n          }\r\n\r\n          // Bring back the element's position after calculations\r\n          if (options.inlineStyles){\r\n            element.css('position', initialPosition);\r\n          }\r\n        };\r\n\r\n        // Private methods\r\n\r\n        function getRequiredAffixClass(unpin, position, elementHeight) {\r\n\r\n          var scrollTop = getScrollTop();\r\n          var scrollHeight = getScrollHeight();\r\n\r\n          if(scrollTop <= offsetTop) {\r\n            return 'top';\r\n          } else if(unpin !== null && (scrollTop + unpin <= position.top)) {\r\n            return 'middle';\r\n          } else if(offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\r\n            return 'bottom';\r\n          } else {\r\n            return 'middle';\r\n          }\r\n\r\n        }\r\n\r\n        function getScrollTop() {\r\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\r\n        }\r\n\r\n        function getScrollHeight() {\r\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\r\n        }\r\n\r\n        $affix.init();\r\n        return $affix;\r\n\r\n      }\r\n\r\n      return AffixFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffix', function($affix, $window) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: '^?bsAffixTarget',\r\n      link: function postLink(scope, element, attr, affixTarget) {\r\n\r\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\r\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles'], function(key) {\r\n          if(angular.isDefined(attr[key])) {\r\n            var option = attr[key];\r\n            if (/true/i.test(option)) option = true;\r\n            if (/false/i.test(option)) option = false;\r\n            options[key] = option;\r\n          }\r\n        });\r\n\r\n        var affix = $affix(element, options);\r\n        scope.$on('$destroy', function() {\r\n          affix && affix.destroy();\r\n          options = null;\r\n          affix = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffixTarget', function() {\r\n    return {\r\n      controller: function($element) {\r\n        this.$element = $element;\r\n      }\r\n    };\r\n  });\r\n\r\n// Source: aside\\aside.js\r\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$aside', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade-and-slide-right',\r\n      prefixClass: 'aside',\r\n      prefixEvent: 'aside',\r\n      placement: 'right',\r\n      templateUrl: 'aside/aside.tpl.html',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true\r\n    };\r\n\r\n    this.$get = function($modal) {\r\n\r\n      function AsideFactory(config) {\r\n\r\n        var $aside = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $aside = $modal(options);\r\n\r\n        return $aside;\r\n\r\n      }\r\n\r\n      return AsideFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAside', function($window, $sce, $aside) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr, transclusion) {\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function(key) {\r\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\r\n            scope[key] = $sce.trustAsHtml(newValue);\r\n          });\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsAside && scope.$watch(attr.bsAside, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.content = newValue;\r\n          }\r\n        }, true);\r\n\r\n        // Initialize aside\r\n        var aside = $aside(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', aside.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (aside) aside.destroy();\r\n          options = null;\r\n          aside = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: collapse\\collapse.js\r\nangular.module('mgcrea.ngStrap.collapse', [])\r\n\r\n  .provider('$collapse', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-collapse',\r\n      disallowToggle: false,\r\n      activeClass: 'in',\r\n      startCollapsed: false,\r\n      allowMultiple: false\r\n    };\r\n\r\n    var controller = this.controller = function($scope, $element, $attrs) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\r\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // use string regex match boolean attr falsy values, leave truthy values be\r\n      var falseValueRegExp = /^(false|0|)$/i;\r\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function(key) {\r\n        if(angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\r\n          self.$options[key] = false;\r\n        }\r\n      });\r\n\r\n      self.$toggles = [];\r\n      self.$targets = [];\r\n\r\n      self.$viewChangeListeners = [];\r\n\r\n      self.$registerToggle = function(element) {\r\n        self.$toggles.push(element);\r\n      };\r\n      self.$registerTarget = function(element) {\r\n        self.$targets.push(element);\r\n      };\r\n\r\n      self.$unregisterToggle = function(element) {\r\n        var index = self.$toggles.indexOf(element);\r\n        // remove toggle from $toggles array\r\n        self.$toggles.splice(index, 1);\r\n      };\r\n      self.$unregisterTarget = function(element) {\r\n        var index = self.$targets.indexOf(element);\r\n\r\n        // remove element from $targets array\r\n        self.$targets.splice(index, 1);\r\n\r\n        if (self.$options.allowMultiple) {\r\n          // remove target index from $active array values\r\n          deactivateItem(element);\r\n        }\r\n\r\n        // fix active item indexes\r\n        fixActiveItemIndexes(index);\r\n\r\n        self.$viewChangeListeners.forEach(function(fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      // use array to store all the currently open panels\r\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\r\n      self.$setActive = $scope.$setActive = function(value) {\r\n        if(angular.isArray(value)) {\r\n          self.$targets.$active = value;\r\n        }\r\n        else if(!self.$options.disallowToggle) {\r\n          // toogle element active status\r\n          isActive(value) ? deactivateItem(value) : activateItem(value);\r\n        } else {\r\n          activateItem(value);\r\n        }\r\n\r\n        self.$viewChangeListeners.forEach(function(fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$activeIndexes = function() {\r\n        return self.$options.allowMultiple ? self.$targets.$active :\r\n          self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\r\n      };\r\n\r\n      function fixActiveItemIndexes(index) {\r\n        // item with index was removed, so we\r\n        // need to adjust other items index values\r\n        var activeIndexes = self.$targets.$active;\r\n        for(var i = 0; i < activeIndexes.length; i++) {\r\n          if (index < activeIndexes[i]) {\r\n            activeIndexes[i] = activeIndexes[i] - 1;\r\n          }\r\n\r\n          // the last item is active, so we need to\r\n          // adjust its index\r\n          if (activeIndexes[i] === self.$targets.length) {\r\n            activeIndexes[i] = self.$targets.length - 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      function isActive(value) {\r\n        var activeItems = self.$targets.$active;\r\n        return activeItems.indexOf(value) === -1 ? false : true;\r\n      }\r\n\r\n      function deactivateItem(value) {\r\n        var index = self.$targets.$active.indexOf(value);\r\n        if (index !== -1) {\r\n          self.$targets.$active.splice(index, 1);\r\n        }\r\n      }\r\n\r\n      function activateItem(value) {\r\n        if (!self.$options.allowMultiple) {\r\n          // remove current selected item\r\n          self.$targets.$active.splice(0, 1);\r\n        }\r\n\r\n        if (self.$targets.$active.indexOf(value) === -1) {\r\n          self.$targets.$active.push(value);\r\n        }\r\n      }\r\n\r\n    };\r\n\r\n    this.$get = function() {\r\n      var $collapse = {};\r\n      $collapse.defaults = defaults;\r\n      $collapse.controller = controller;\r\n      return $collapse;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapse', function($window, $animate, $collapse) {\r\n\r\n    var defaults = $collapse.defaults;\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsCollapse'],\r\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        if(ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsCollapseCtrl.$viewChangeListeners.push(function() {\r\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function(modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            if (angular.isArray(modelValue)) {\r\n              // model value is an array, so just replace\r\n              // the active items directly\r\n              bsCollapseCtrl.$setActive(modelValue);\r\n            }\r\n            else {\r\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\r\n\r\n              if (angular.isArray(activeIndexes)) {\r\n                // we have an array of selected indexes\r\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\r\n                  // item with modelValue index is not active\r\n                  bsCollapseCtrl.$setActive(modelValue * 1);\r\n                }\r\n              }\r\n              else if (activeIndexes !== modelValue * 1) {\r\n                bsCollapseCtrl.$setActive(modelValue * 1);\r\n              }\r\n            }\r\n            return modelValue;\r\n          });\r\n\r\n        }\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseToggle', function() {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base attr\r\n        element.attr('data-toggle', 'collapse');\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerToggle(element);\r\n\r\n        // remove toggle from collapse controller when toggle is destroyed\r\n        scope.$on('$destroy', function() {\r\n          bsCollapseCtrl.$unregisterToggle(element);\r\n        });\r\n\r\n        element.on('click', function() {\r\n          var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\r\n          bsCollapseCtrl.$setActive(index * 1);\r\n          scope.$apply();\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseTarget', function($animate) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      // scope: true,\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('collapse');\r\n\r\n        // Add animation class\r\n        if(bsCollapseCtrl.$options.animation) {\r\n          element.addClass(bsCollapseCtrl.$options.animation);\r\n        }\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerTarget(element);\r\n\r\n        // remove pane target from collapse controller when target is destroyed\r\n        scope.$on('$destroy', function() {\r\n          bsCollapseCtrl.$unregisterTarget(element);\r\n        });\r\n\r\n        function render() {\r\n          var index = bsCollapseCtrl.$targets.indexOf(element);\r\n          var active = bsCollapseCtrl.$activeIndexes();\r\n          var action = 'removeClass';\r\n          if (angular.isArray(active)) {\r\n            if (active.indexOf(index) !== -1) {\r\n              action = 'addClass';\r\n            }\r\n          }\r\n          else if (index === active) {\r\n            action = 'addClass';\r\n          }\r\n\r\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsCollapseCtrl.$viewChangeListeners.push(function() {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: datepicker\\datepicker.js\r\nangular.module('mgcrea.ngStrap.datepicker', [\r\n  'mgcrea.ngStrap.helpers.dateParser',\r\n  'mgcrea.ngStrap.helpers.dateFormatter',\r\n  'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$datepicker', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      //uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'datepicker',\r\n      prefixClass: 'datepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'datepicker/datepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: false,\r\n      dateType: 'date',\r\n      dateFormat: 'shortDate',\r\n      timezone: null,\r\n      modelDateFormat: null,\r\n      dayFormat: 'dd',\r\n      monthFormat: 'MMM',\r\n      yearFormat: 'yyyy',\r\n      monthTitleFormat: 'MMMM yyyy',\r\n      yearTitleFormat: 'yyyy',\r\n      strictFormat: false,\r\n      autoclose: false,\r\n      minDate: -Infinity,\r\n      maxDate: +Infinity,\r\n      startView: 0,\r\n      minView: 0,\r\n      startWeek: 0,\r\n      daysOfWeekDisabled: '',\r\n      iconLeft: 'glyphicon glyphicon-chevron-left',\r\n      iconRight: 'glyphicon glyphicon-chevron-right'\r\n    };\r\n\r\n    this.$get = function($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if(!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\r\n\r\n      function DatepickerFactory(element, controller, config) {\r\n\r\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $datepicker.$options;\r\n        var scope = $datepicker.$scope;\r\n        if(options.startView) options.startView -= options.minView;\r\n\r\n        // View vars\r\n\r\n        var pickerViews = datepickerViews($datepicker);\r\n        $datepicker.$views = pickerViews.views;\r\n        var viewDate = pickerViews.viewDate;\r\n        scope.$mode = options.startView;\r\n        scope.$iconLeft = options.iconLeft;\r\n        scope.$iconRight = options.iconRight;\r\n        var $picker = $datepicker.$views[scope.$mode];\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function(date) {\r\n          $datepicker.select(date);\r\n        };\r\n        scope.$selectPane = function(value) {\r\n          $datepicker.$selectPane(value);\r\n        };\r\n        scope.$toggleMode = function() {\r\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $datepicker.update = function(date) {\r\n          // console.warn('$datepicker.update() newValue=%o', date);\r\n          if(angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $datepicker.$date = date;\r\n            $picker.update.call($picker, date);\r\n          }\r\n          // Build only if pristine\r\n          $datepicker.$build(true);\r\n        };\r\n\r\n        $datepicker.updateDisabledDates = function(dateRanges) {\r\n          options.disabledDateRanges = dateRanges;\r\n          for(var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\r\n          }\r\n        };\r\n\r\n        $datepicker.select = function(date, keep) {\r\n          // console.warn('$datepicker.select', date, scope.$mode);\r\n          if(!angular.isDate(controller.$dateValue)) controller.$dateValue = new Date(date);\r\n          if(!scope.$mode || keep) {\r\n            controller.$setViewValue(angular.copy(date));\r\n            controller.$render();\r\n            if(options.autoclose && !keep) {\r\n              $timeout(function() { $datepicker.hide(true); });\r\n            }\r\n          } else {\r\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\r\n            $datepicker.setMode(scope.$mode - 1);\r\n            $datepicker.$build();\r\n          }\r\n        };\r\n\r\n        $datepicker.setMode = function(mode) {\r\n          // console.warn('$datepicker.setMode', mode);\r\n          scope.$mode = mode;\r\n          $picker = $datepicker.$views[scope.$mode];\r\n          $datepicker.$build();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $datepicker.$build = function(pristine) {\r\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\r\n          if(pristine === true && $picker.built) return;\r\n          if(pristine === false && !$picker.built) return;\r\n          $picker.build.call($picker);\r\n        };\r\n\r\n        $datepicker.$updateSelected = function() {\r\n          for(var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], updateSelected);\r\n          }\r\n        };\r\n\r\n        $datepicker.$isSelected = function(date) {\r\n          return $picker.isSelected(date);\r\n        };\r\n\r\n        $datepicker.$setDisabledEl = function(el) {\r\n          el.disabled = $picker.isDisabled(el.date);\r\n        };\r\n\r\n        $datepicker.$selectPane = function(value) {\r\n          var steps = $picker.steps;\r\n          // set targetDate to first day of month to avoid problems with\r\n          // date values rollover. This assumes the viewDate does not\r\n          // depend on the day of the month\r\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\r\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\r\n          $datepicker.$build();\r\n        };\r\n\r\n        $datepicker.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if(isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if(targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $datepicker.$onKeyDown = function(evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          if(evt.keyCode === 13) {\r\n            if(!scope.$mode) {\r\n              return $datepicker.hide(true);\r\n            } else {\r\n              return scope.$apply(function() { $datepicker.setMode(scope.$mode - 1); });\r\n            }\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          $picker.onKeyDown(evt);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function updateSelected(el) {\r\n          el.selected = $datepicker.$isSelected(el.date);\r\n        }\r\n\r\n        function focusElement() {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $datepicker.init;\r\n        $datepicker.init = function() {\r\n          if(isNative && options.useNative) {\r\n            element.prop('type', 'date');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if(isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $datepicker.destroy;\r\n        $datepicker.destroy = function() {\r\n          if(isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $datepicker.show;\r\n        $datepicker.show = function() {\r\n          if((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n          _show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function() {\r\n            // if $datepicker is no longer showing, don't setup events\r\n            if(!$datepicker.$isShown) return;\r\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n            if(options.keyboard) {\r\n              element.on('keydown', $datepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $datepicker.hide;\r\n        $datepicker.hide = function(blur) {\r\n          if(!$datepicker.$isShown) return;\r\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n          if(options.keyboard) {\r\n            element.off('keydown', $datepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $datepicker;\r\n\r\n      }\r\n\r\n      DatepickerFactory.defaults = defaults;\r\n      return DatepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDatepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\r\n\r\n    var defaults = $datepicker.defaults;\r\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if(!datepicker || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\r\n          newValue === true ? datepicker.show() : datepicker.hide();\r\n        });\r\n\r\n        // Initialize datepicker\r\n        var datepicker = $datepicker(element, controller, options);\r\n        options = datepicker.$options;\r\n        // Set expected iOS format\r\n        if(isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\r\n\r\n        var lang = options.lang;\r\n\r\n        var formatDate = function(date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n\r\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minDate', 'maxDate'], function(key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\r\n            // console.warn('attr.$observe(%s)=%o', key, newValue);\r\n            datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\r\n            // Build only if dirty\r\n            !isNaN(datepicker.$options[key]) && datepicker.$build(false);\r\n            validateAgainstMinMaxDate(controller.$dateValue);\r\n          });\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          datepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        // Normalize undefined/null/empty array,\r\n        // so that we don't treat changing from undefined->null as a change.\r\n        function normalizeDateRanges(ranges) {\r\n          if (!ranges || !ranges.length) return null;\r\n          return ranges;\r\n        }\r\n\r\n        if (angular.isDefined(attr.disabledDates)) {\r\n          scope.$watch(attr.disabledDates, function(disabledRanges, previousValue) {\r\n            disabledRanges = normalizeDateRanges(disabledRanges);\r\n            previousValue = normalizeDateRanges(previousValue);\r\n\r\n            if (disabledRanges) {\r\n              datepicker.updateDisabledDates(disabledRanges);\r\n            }\r\n          });\r\n        }\r\n\r\n        function validateAgainstMinMaxDate(parsedDate) {\r\n          if (!angular.isDate(parsedDate)) return;\r\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\r\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if(isValid) controller.$dateValue = parsedDate;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function(viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if(!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            return null;\r\n          }\r\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\r\n          if(!parsedDate || isNaN(parsedDate.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return;\r\n          } else {\r\n            validateAgainstMinMaxDate(parsedDate);\r\n          }\r\n\r\n          if(options.dateType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\r\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if(options.dateType === 'number') {\r\n            return date.getTime();\r\n          } else if(options.dateType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if(options.dateType === 'iso') {\r\n            return date.toISOString();\r\n          } else {\r\n            return new Date(date);\r\n          }\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function(modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if(angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if(angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if(options.dateType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\r\n          } else if(options.dateType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) {\r\n          //   var today = new Date();\r\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\r\n          // }\r\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          return getDateFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function() {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getDateFormattedString());\r\n        };\r\n\r\n        function getDateFormattedString() {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if(datepicker) datepicker.destroy();\r\n          options = null;\r\n          datepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .provider('datepickerViews', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      dayFormat: 'dd',\r\n      daySplit: 7\r\n    };\r\n\r\n    // Split array into smaller arrays\r\n    function split(arr, size) {\r\n      var arrays = [];\r\n      while(arr.length > 0) {\r\n        arrays.push(arr.splice(0, size));\r\n      }\r\n      return arrays;\r\n    }\r\n\r\n    // Modulus operator\r\n    function mod(n, m) {\r\n      return ((n % m) + m) % m;\r\n    }\r\n\r\n    this.$get = function($dateFormatter, $dateParser, $sce) {\r\n\r\n      return function(picker) {\r\n\r\n        var scope = picker.$scope;\r\n        var options = picker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function(date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\r\n\r\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\r\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\r\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\r\n\r\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\r\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\r\n\r\n        var views = [{\r\n            format: options.dayFormat,\r\n            split: 7,\r\n            steps: { month: 1 },\r\n            update: function(date, force) {\r\n              if(!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$build();\r\n              } else if(date.getDate() !== viewDate.date || date.getDate() === 1) {\r\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\r\n                // in $datepicker.$selectPane, so picker would not update selected day display if\r\n                // user picks first day of the new month.\r\n                // As a workaround, we are always forcing update when picked date is first day of month.\r\n                viewDate.date = picker.$date.getDate();\r\n                picker.$updateSelected();\r\n              }\r\n            },\r\n            build: function() {\r\n              var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1), firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\r\n              var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5), firstDateOffset = firstDate.getTimezoneOffset();\r\n              var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\r\n              // Handle daylight time switch\r\n              if(firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\r\n              var days = [], day;\r\n              for(var i = 0; i < 42; i++) { // < 7 * 6\r\n                day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\r\n                days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\r\n              }\r\n              scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\r\n              scope.showLabels = true;\r\n              scope.labels = weekDaysLabelsHtml;\r\n              scope.rows = split(days, this.split);\r\n              this.built = true;\r\n            },\r\n            isSelected: function(date) {\r\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\r\n            },\r\n            isDisabled: function(date) {\r\n              var time = date.getTime();\r\n\r\n              // Disabled because of min/max date.\r\n              if (time < options.minDate || time > options.maxDate) return true;\r\n\r\n              // Disabled due to being a disabled day of the week\r\n              if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\r\n\r\n              // Disabled because of disabled date range.\r\n              if (options.disabledDateRanges) {\r\n                for (var i = 0; i < options.disabledDateRanges.length; i++) {\r\n                  if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\r\n                    return true;\r\n                  }\r\n                }\r\n              }\r\n\r\n              return false;\r\n            },\r\n            onKeyDown: function(evt) {\r\n              if (!picker.$date) {\r\n                return;\r\n              }\r\n              var actualTime = picker.$date.getTime();\r\n              var newDate;\r\n\r\n              if(evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\r\n              else if(evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\r\n              else if(evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\r\n              else if(evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\r\n\r\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n            }\r\n          }, {\r\n            name: 'month',\r\n            format: options.monthFormat,\r\n            split: 4,\r\n            steps: { year: 1 },\r\n            update: function(date, force) {\r\n              if(!this.built || date.getFullYear() !== viewDate.year) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$build();\r\n              } else if(date.getMonth() !== viewDate.month) {\r\n                angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$updateSelected();\r\n              }\r\n            },\r\n            build: function() {\r\n              var firstMonth = new Date(viewDate.year, 0, 1);\r\n              var months = [], month;\r\n              for (var i = 0; i < 12; i++) {\r\n                month = new Date(viewDate.year, i, 1);\r\n                months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\r\n              }\r\n              scope.title = formatDate(month, options.yearTitleFormat);\r\n              scope.showLabels = false;\r\n              scope.rows = split(months, this.split);\r\n              this.built = true;\r\n            },\r\n            isSelected: function(date) {\r\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\r\n            },\r\n            isDisabled: function(date) {\r\n              var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\r\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n            },\r\n            onKeyDown: function(evt) {\r\n              if (!picker.$date) {\r\n                return;\r\n              }\r\n              var actualMonth = picker.$date.getMonth();\r\n              var newDate = new Date(picker.$date);\r\n\r\n              if(evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\r\n              else if(evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\r\n              else if(evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\r\n              else if(evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\r\n\r\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n            }\r\n          }, {\r\n            name: 'year',\r\n            format: options.yearFormat,\r\n            split: 4,\r\n            steps: { year: 12 },\r\n            update: function(date, force) {\r\n              if(!this.built || force || parseInt(date.getFullYear()/20, 10) !== parseInt(viewDate.year/20, 10)) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$build();\r\n              } else if(date.getFullYear() !== viewDate.year) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$updateSelected();\r\n              }\r\n            },\r\n            build: function() {\r\n              var firstYear = viewDate.year - viewDate.year % (this.split * 3);\r\n              var years = [], year;\r\n              for (var i = 0; i < 12; i++) {\r\n                year = new Date(firstYear + i, 0, 1);\r\n                years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\r\n              }\r\n              scope.title = years[0].label + '-' + years[years.length - 1].label;\r\n              scope.showLabels = false;\r\n              scope.rows = split(years, this.split);\r\n              this.built = true;\r\n            },\r\n            isSelected: function(date) {\r\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear();\r\n            },\r\n            isDisabled: function(date) {\r\n              var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\r\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n            },\r\n            onKeyDown: function(evt) {\r\n              if (!picker.$date) {\r\n                return;\r\n              }\r\n              var actualYear = picker.$date.getFullYear(),\r\n                  newDate = new Date(picker.$date);\r\n\r\n              if(evt.keyCode === 37) newDate.setYear(actualYear - 1);\r\n              else if(evt.keyCode === 38) newDate.setYear(actualYear - 4);\r\n              else if(evt.keyCode === 39) newDate.setYear(actualYear + 1);\r\n              else if(evt.keyCode === 40) newDate.setYear(actualYear + 4);\r\n\r\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n            }\r\n          }];\r\n\r\n        return {\r\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\r\n          viewDate: viewDate\r\n        };\r\n\r\n      };\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: helpers\\compiler.js\r\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\r\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\r\n\r\nangular.module('mgcrea.ngStrap.core', [])\r\n  .service('$bsCompiler', bsCompilerService);\r\n\r\nfunction bsCompilerService($q, $http, $injector, $compile, $controller, $templateCache) {\r\n  /* jshint validthis: true */\r\n\r\n  /*\r\n   * @ngdoc service\r\n   * @name $bsCompiler\r\n   * @module material.core\r\n   * @description\r\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\r\n   * to easily compile an element with a templateUrl, controller, and locals.\r\n   *\r\n   * @usage\r\n   * <hljs lang=\"js\">\r\n   * $bsCompiler.compile({\r\n   *   templateUrl: 'modal.html',\r\n   *   controller: 'ModalCtrl',\r\n   *   locals: {\r\n   *     modal: myModalInstance;\r\n   *   }\r\n   * }).then(function(compileData) {\r\n   *   compileData.element; // modal.html's template in an element\r\n   *   compileData.link(myScope); //attach controller & scope to element\r\n   * });\r\n   * </hljs>\r\n   */\r\n\r\n   /*\r\n    * @ngdoc method\r\n    * @name $bsCompiler#compile\r\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\r\n    * locals, and scope.\r\n    * @param {object} options An options object, with the following properties:\r\n    *\r\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\r\n    *      newly created scope or the name of a registered controller if passed as a string.\r\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *    - `template` - `{string=}` An html template as a string.\r\n    *    - `templateUrl` - `{string=}` A path to an html template.\r\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\r\n    *      it is loaded. It will be given the template string as a parameter, and should\r\n    *      return a a new string representing the transformed template.\r\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\r\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\r\n    *      instantiated `compile()` will fail..\r\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\r\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is injected and the return value is treated as the\r\n    *        dependency. If the result is a promise, it is resolved before its value is\r\n    *        injected into the controller.\r\n    *\r\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\r\n    * `compileData` has the following properties:\r\n    *\r\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\r\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\r\n    *     the element and instantiate the provided controller (if given).\r\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\r\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\r\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\r\n    */\r\n  this.compile = function(options) {\r\n\r\n    if(options.template && /\\.html$/.test(options.template)) {\r\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\r\n      options.templateUrl = options.template;\r\n      options.template = '';\r\n    }\r\n\r\n    var templateUrl = options.templateUrl;\r\n    var template = options.template || '';\r\n    var controller = options.controller;\r\n    var controllerAs = options.controllerAs;\r\n    var resolve = angular.copy(options.resolve || {});\r\n    var locals = angular.copy(options.locals || {});\r\n    var transformTemplate = options.transformTemplate || angular.identity;\r\n    var bindToController = options.bindToController;\r\n\r\n    // Take resolve values and invoke them.\r\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\r\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\r\n    angular.forEach(resolve, function(value, key) {\r\n      if (angular.isString(value)) {\r\n        resolve[key] = $injector.get(value);\r\n      } else {\r\n        resolve[key] = $injector.invoke(value);\r\n      }\r\n    });\r\n    // Add the locals, which are just straight values to inject\r\n    // eg locals: { three: 3 }, will inject three into the controller\r\n    angular.extend(resolve, locals);\r\n\r\n    if (templateUrl) {\r\n      resolve.$template = fetchTemplate(templateUrl);\r\n    } else {\r\n      resolve.$template = $q.when(template);\r\n    }\r\n\r\n    if (options.contentTemplate) {\r\n      // TODO(mgcrea): deprecate?\r\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\r\n        .then(function(templates) {\r\n          var templateEl = angular.element(templates[0]);\r\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0]).removeAttr('ng-bind').html(templates[1]);\r\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\r\n          if(!options.templateUrl) contentEl.next().remove();\r\n          return templateEl[0].outerHTML;\r\n        });\r\n    }\r\n\r\n    // Wait for all the resolves to finish if they are promises\r\n    return $q.all(resolve).then(function(locals) {\r\n\r\n      var template = transformTemplate(locals.$template);\r\n      if (options.html) {\r\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\r\n      }\r\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\r\n      var element = angular.element('<div>').html(template.trim()).contents();\r\n      var linkFn = $compile(element);\r\n\r\n      // Return a linking function that can be used later when the element is ready\r\n      return {\r\n        locals: locals,\r\n        element: element,\r\n        link: function link(scope) {\r\n          locals.$scope = scope;\r\n\r\n          // Instantiate controller if it exists, because we have scope\r\n          if (controller) {\r\n            var invokeCtrl = $controller(controller, locals, true);\r\n            if (bindToController) {\r\n              angular.extend(invokeCtrl.instance, locals);\r\n            }\r\n            // Support angular@~1.2 invokeCtrl\r\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\r\n            // See angular-route source for this logic\r\n            element.data('$ngControllerController', ctrl);\r\n            element.children().data('$ngControllerController', ctrl);\r\n\r\n            if (controllerAs) {\r\n              scope[controllerAs] = ctrl;\r\n            }\r\n          }\r\n\r\n          return linkFn.apply(null, arguments);\r\n        }\r\n      };\r\n    });\r\n\r\n  };\r\n\r\n  function findElement(query, element) {\r\n    return angular.element((element || document).querySelectorAll(query));\r\n  }\r\n\r\n  var fetchPromises = {};\r\n  function fetchTemplate(template) {\r\n    if(fetchPromises[template]) return fetchPromises[template];\r\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\r\n      .then(function(res) {\r\n        return res.data;\r\n      }));\r\n  }\r\n\r\n}\r\n\r\n// Source: helpers\\date-formatter.js\r\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\r\n\r\n  .service('$dateFormatter', function($locale, dateFilter) {\r\n\r\n    // The unused `lang` arguments are on purpose. The default implementation does not\r\n    // use them and it always uses the locale loaded into the `$locale` service.\r\n    // Custom implementations might use it, thus allowing different directives to\r\n    // have different languages.\r\n\r\n    this.getDefaultLocale = function() {\r\n      return $locale.id;\r\n    };\r\n\r\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\r\n    // Return either the corresponding date format or the given date format.\r\n    this.getDatetimeFormat = function(format, lang) {\r\n      return $locale.DATETIME_FORMATS[format] || format;\r\n    };\r\n\r\n    this.weekdaysShort = function(lang) {\r\n      return $locale.DATETIME_FORMATS.SHORTDAY;\r\n    };\r\n\r\n    function splitTimeFormat(format) {\r\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\r\n    }\r\n\r\n    // h:mm a => h\r\n    this.hoursFormat = function(timeFormat) {\r\n      return splitTimeFormat(timeFormat)[0];\r\n    };\r\n\r\n    // h:mm a => mm\r\n    this.minutesFormat = function(timeFormat) {\r\n      return splitTimeFormat(timeFormat)[2];\r\n    };\r\n\r\n    // h:mm:ss a => ss\r\n    this.secondsFormat = function(timeFormat) {\r\n      return splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => :\r\n    this.timeSeparator = function(timeFormat) {\r\n      return splitTimeFormat(timeFormat)[1];\r\n    };\r\n\r\n    // h:mm:ss a => true, h:mm a => false\r\n    this.showSeconds = function(timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => true, H.mm => false\r\n    this.showAM = function(timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[5];\r\n    };\r\n\r\n    this.formatDate = function(date, format, lang, timezone){\r\n      return dateFilter(date, format, timezone);\r\n    };\r\n\r\n  });\r\n\r\n// Source: helpers\\date-parser.js\r\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\r\n\r\n.provider('$dateParser', function($localeProvider) {\r\n\r\n  // define a custom ParseDate object to use instead of native Date\r\n  // to avoid date values wrapping when setting date component values\r\n  function ParseDate() {\r\n    this.year = 1970;\r\n    this.month = 0;\r\n    this.day = 1;\r\n    this.hours = 0;\r\n    this.minutes = 0;\r\n    this.seconds = 0;\r\n    this.milliseconds = 0;\r\n  }\r\n\r\n  ParseDate.prototype.setMilliseconds = function(value) { this.milliseconds = value; };\r\n  ParseDate.prototype.setSeconds = function(value) { this.seconds = value; };\r\n  ParseDate.prototype.setMinutes = function(value) { this.minutes = value; };\r\n  ParseDate.prototype.setHours = function(value) { this.hours = value; };\r\n  ParseDate.prototype.getHours = function() { return this.hours; };\r\n  ParseDate.prototype.setDate = function(value) { this.day = value; };\r\n  ParseDate.prototype.setMonth = function(value) { this.month = value; };\r\n  ParseDate.prototype.setFullYear = function(value) { this.year = value; };\r\n  ParseDate.prototype.fromDate = function(value) {\r\n    this.year = value.getFullYear();\r\n    this.month = value.getMonth();\r\n    this.day = value.getDate();\r\n    this.hours = value.getHours();\r\n    this.minutes = value.getMinutes();\r\n    this.seconds = value.getSeconds();\r\n    this.milliseconds = value.getMilliseconds();\r\n    return this;\r\n  };\r\n\r\n  ParseDate.prototype.toDate = function() {\r\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\r\n  };\r\n\r\n  var proto = ParseDate.prototype;\r\n\r\n  function noop() {\r\n  }\r\n\r\n  function isNumeric(n) {\r\n    return !isNaN(parseFloat(n)) && isFinite(n);\r\n  }\r\n\r\n  function indexOfCaseInsensitive(array, value) {\r\n    var len = array.length, str=value.toString().toLowerCase();\r\n    for (var i=0; i<len; i++) {\r\n      if (array[i].toLowerCase() === str) { return i; }\r\n    }\r\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\r\n  }\r\n\r\n  var defaults = this.defaults = {\r\n    format: 'shortDate',\r\n    strict: false\r\n  };\r\n\r\n  this.$get = function($locale, dateFilter) {\r\n\r\n    var DateParserFactory = function(config) {\r\n\r\n      var options = angular.extend({}, defaults, config);\r\n\r\n      var $dateParser = {};\r\n\r\n      var regExpMap = {\r\n        'sss'   : '[0-9]{3}',\r\n        'ss'    : '[0-5][0-9]',\r\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'mm'    : '[0-5][0-9]',\r\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'HH'    : '[01][0-9]|2[0-3]',\r\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\r\n        'hh'    : '[0][1-9]|[1][012]',\r\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'a'     : 'AM|PM',\r\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\r\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\r\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\r\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\r\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\r\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\r\n        'MM'    : '0[1-9]|1[012]',\r\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\r\n        'yy'    : '[0-9]{2}',\r\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}',\r\n      };\r\n\r\n      var setFnMap = {\r\n        'sss'   : proto.setMilliseconds,\r\n        'ss'    : proto.setSeconds,\r\n        's'     : proto.setSeconds,\r\n        'mm'    : proto.setMinutes,\r\n        'm'     : proto.setMinutes,\r\n        'HH'    : proto.setHours,\r\n        'H'     : proto.setHours,\r\n        'hh'    : proto.setHours,\r\n        'h'     : proto.setHours,\r\n        'EEEE'  : noop,\r\n        'EEE'   : noop,\r\n        'dd'    : proto.setDate,\r\n        'd'     : proto.setDate,\r\n        'a'     : function(value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\r\n        'MMMM'  : function(value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\r\n        'MMM'   : function(value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\r\n        'MM'    : function(value) { return this.setMonth(1 * value - 1); },\r\n        'M'     : function(value) { return this.setMonth(1 * value - 1); },\r\n        'yyyy'  : proto.setFullYear,\r\n        'yy'    : function(value) { return this.setFullYear(2000 + 1 * value); },\r\n        'y'     : function(value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\r\n      };\r\n\r\n      var regex, setMap;\r\n\r\n      $dateParser.init = function() {\r\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\r\n        regex = regExpForFormat($dateParser.$format);\r\n        setMap = setMapForFormat($dateParser.$format);\r\n      };\r\n\r\n      $dateParser.isValid = function(date) {\r\n        if(angular.isDate(date)) return !isNaN(date.getTime());\r\n        return regex.test(date);\r\n      };\r\n\r\n      $dateParser.parse = function(value, baseDate, format, timezone) {\r\n        // check for date format special names\r\n        if(format) format = $locale.DATETIME_FORMATS[format] || format;\r\n        if(angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\r\n        var formatRegex = format ? regExpForFormat(format) : regex;\r\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\r\n        var matches = formatRegex.exec(value);\r\n        if(!matches) return false;\r\n        // use custom ParseDate object to set parsed values\r\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\r\n        for(var i = 0; i < matches.length - 1; i++) {\r\n          formatSetMap[i] && formatSetMap[i].call(date, matches[i+1]);\r\n        }\r\n        // convert back to native Date object\r\n        var newDate = date.toDate();\r\n\r\n        // check new native Date object for day values overflow\r\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\r\n          return false;\r\n        }\r\n\r\n        return newDate;\r\n      };\r\n\r\n      $dateParser.getDateForAttribute = function(key, value) {\r\n        var date;\r\n\r\n        if(value === 'today') {\r\n          var today = new Date();\r\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\r\n        } else if(angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\r\n          date = new Date(value.substr(1, value.length - 2));\r\n        } else if(isNumeric(value)) {\r\n          date = new Date(parseInt(value, 10));\r\n        } else if (angular.isString(value) && 0 === value.length) { // Reset date\r\n          date = key === 'minDate' ? -Infinity : +Infinity;\r\n        } else {\r\n          date = new Date(value);\r\n        }\r\n\r\n        return date;\r\n      };\r\n\r\n      $dateParser.getTimeForAttribute = function(key, value) {\r\n        var time;\r\n\r\n        if(value === 'now') {\r\n          time = new Date().setFullYear(1970, 0, 1);\r\n        } else if(angular.isString(value) && value.match(/^\".+\"$/)) {\r\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\r\n        } else if(isNumeric(value)) {\r\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\r\n        } else if (angular.isString(value) && 0 === value.length) { // Reset time\r\n          time = key === 'minTime' ? -Infinity : +Infinity;\r\n        } else {\r\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\r\n        }\r\n\r\n        return time;\r\n      };\r\n\r\n      /* Handle switch to/from daylight saving.\r\n      * Hours may be non-zero on daylight saving cut-over:\r\n      * > 12 when midnight changeover, but then cannot generate\r\n      * midnight datetime, so jump to 1AM, otherwise reset.\r\n      * @param  date  (Date) the date to check\r\n      * @return  (Date) the corrected date\r\n      *\r\n      * __ copied from jquery ui datepicker __\r\n      */\r\n      $dateParser.daylightSavingAdjust = function(date) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\r\n        return date;\r\n      };\r\n\r\n      /* Correct the date for timezone offset.\r\n      * @param  date  (Date) the date to adjust\r\n      * @param  timezone  (string) the timezone to adjust for\r\n      * @param  undo  (boolean) to add or subtract timezone offset\r\n      * @return  (Date) the corrected date\r\n      */\r\n      $dateParser.timezoneOffsetAdjust = function(date, timezone, undo) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        // Right now, only 'UTC' is supported.\r\n        if (timezone && timezone === 'UTC') {\r\n          date = new Date(date.getTime());\r\n          date.setMinutes(date.getMinutes() + (undo?-1:1)*date.getTimezoneOffset());\r\n        }\r\n        return date;\r\n      };\r\n\r\n      // Private functions\r\n\r\n      function setMapForFormat(format) {\r\n        var keys = Object.keys(setFnMap), i;\r\n        var map = [], sortedMap = [];\r\n        // Map to setFn\r\n        var clonedFormat = format;\r\n        for(i = 0; i < keys.length; i++) {\r\n          if(format.split(keys[i]).length > 1) {\r\n            var index = clonedFormat.search(keys[i]);\r\n            format = format.split(keys[i]).join('');\r\n            if(setFnMap[keys[i]]) {\r\n              map[index] = setFnMap[keys[i]];\r\n            }\r\n          }\r\n        }\r\n        // Sort result map\r\n        angular.forEach(map, function(v) {\r\n          // conditional required since angular.forEach broke around v1.2.21\r\n          // related pr: https://github.com/angular/angular.js/pull/8525\r\n          if(v) sortedMap.push(v);\r\n        });\r\n        return sortedMap;\r\n      }\r\n\r\n      function escapeReservedSymbols(text) {\r\n        return text.replace(/\\//g, '[\\\\/]').replace('/-/g', '[-]').replace(/\\./g, '[.]').replace(/\\\\s/g, '[\\\\s]');\r\n      }\r\n\r\n      function regExpForFormat(format) {\r\n        var keys = Object.keys(regExpMap), i;\r\n\r\n        var re = format;\r\n        // Abstract replaces to avoid collisions\r\n        for(i = 0; i < keys.length; i++) {\r\n          re = re.split(keys[i]).join('${' + i + '}');\r\n        }\r\n        // Replace abstracted values\r\n        for(i = 0; i < keys.length; i++) {\r\n          re = re.split('${' + i + '}').join('(' + regExpMap[keys[i]] + ')');\r\n        }\r\n        format = escapeReservedSymbols(format);\r\n\r\n        return new RegExp('^' + re + '$', ['i']);\r\n      }\r\n\r\n      $dateParser.init();\r\n      return $dateParser;\r\n\r\n    };\r\n\r\n    return DateParserFactory;\r\n\r\n  };\r\n\r\n});\r\n\r\n// Source: helpers\\debounce.js\r\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\r\n.factory('debounce', function($timeout) {\r\n  return function(func, wait, immediate) {\r\n    var timeout = null;\r\n    return function() {\r\n      var context = this,\r\n        args = arguments,\r\n        callNow = immediate && !timeout;\r\n      if(timeout) {\r\n        $timeout.cancel(timeout);\r\n      }\r\n      timeout = $timeout(function later() {\r\n        timeout = null;\r\n        if(!immediate) {\r\n          func.apply(context, args);\r\n        }\r\n      }, wait, false);\r\n      if(callNow) {\r\n        func.apply(context, args);\r\n      }\r\n      return timeout;\r\n    };\r\n  };\r\n})\r\n\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\r\n.factory('throttle', function($timeout) {\r\n  return function(func, wait, options) {\r\n    var timeout = null;\r\n    options || (options = {});\r\n    return function() {\r\n      var context = this,\r\n        args = arguments;\r\n      if(!timeout) {\r\n        if(options.leading !== false) {\r\n          func.apply(context, args);\r\n        }\r\n        timeout = $timeout(function later() {\r\n          timeout = null;\r\n          if(options.trailing !== false) {\r\n            func.apply(context, args);\r\n          }\r\n        }, wait, false);\r\n      }\r\n    };\r\n  };\r\n});\r\n\r\n// Source: helpers\\dimensions.js\r\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\r\n\r\n  .factory('dimensions', function($document, $window) {\r\n\r\n    var jqLite = angular.element;\r\n    var fn = {};\r\n\r\n    /**\r\n     * Test the element nodeName\r\n     * @param element\r\n     * @param name\r\n     */\r\n    var nodeName = fn.nodeName = function(element, name) {\r\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\r\n    };\r\n\r\n    /**\r\n     * Returns the element computed style\r\n     * @param element\r\n     * @param prop\r\n     * @param extra\r\n     */\r\n    fn.css = function(element, prop, extra) {\r\n      var value;\r\n      if (element.currentStyle) { //IE\r\n        value = element.currentStyle[prop];\r\n      } else if (window.getComputedStyle) {\r\n        value = window.getComputedStyle(element)[prop];\r\n      } else {\r\n        value = element.style[prop];\r\n      }\r\n      return extra === true ? parseFloat(value) || 0 : value;\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.offset = function(element) {\r\n      var boxRect = element.getBoundingClientRect();\r\n      var docElement = element.ownerDocument;\r\n      return {\r\n        width: boxRect.width || element.offsetWidth,\r\n        height: boxRect.height || element.offsetHeight,\r\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\r\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\r\n      };\r\n    };\r\n  \r\n    /**\r\n     * Provides set equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     * @param options\r\n     * @param i\r\n     */\r\n    fn.setOffset = function (element, options, i) {\r\n      var curPosition,\r\n          curLeft,\r\n          curCSSTop,\r\n          curTop,\r\n          curOffset,\r\n          curCSSLeft,\r\n          calculatePosition,\r\n          position = fn.css(element, 'position'),\r\n          curElem = angular.element(element),\r\n          props = {};\r\n      \r\n      // Set position first, in-case top/left are set even on static elem\r\n      if (position === 'static') {\r\n        element.style.position = 'relative';\r\n      }\r\n      \r\n      curOffset = fn.offset(element);\r\n      curCSSTop = fn.css(element, 'top');\r\n      curCSSLeft = fn.css(element, 'left');\r\n      calculatePosition = (position === 'absolute' || position === 'fixed') && \r\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\r\n      \r\n      // Need to be able to calculate position if either\r\n      // top or left is auto and position is either absolute or fixed\r\n      if (calculatePosition) {\r\n        curPosition = fn.position(element);\r\n        curTop = curPosition.top;\r\n        curLeft = curPosition.left;\r\n      } else {\r\n        curTop = parseFloat(curCSSTop) || 0;\r\n        curLeft = parseFloat(curCSSLeft) || 0;\r\n      }\r\n      \r\n      if (angular.isFunction(options)) {\r\n        options = options.call(element, i, curOffset);\r\n      }\r\n      \r\n      if (options.top !== null ) {\r\n        props.top = (options.top - curOffset.top) + curTop;\r\n      }\r\n      if ( options.left !== null ) {\r\n        props.left = (options.left - curOffset.left) + curLeft;\r\n      }\r\n\r\n      if ('using' in options) {\r\n        options.using.call(curElem, props);\r\n      } else {\r\n        curElem.css({\r\n          top: props.top + 'px',\r\n          left: props.left + 'px'\r\n        });\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's position function\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.position = function(element) {\r\n\r\n      var offsetParentRect = {top: 0, left: 0},\r\n          offsetParentElement,\r\n          offset;\r\n\r\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\r\n      if (fn.css(element, 'position') === 'fixed') {\r\n\r\n        // We assume that getBoundingClientRect is available when computed position is fixed\r\n        offset = element.getBoundingClientRect();\r\n\r\n      } else {\r\n\r\n        // Get *real* offsetParentElement\r\n        offsetParentElement = offsetParent(element);\r\n\r\n        // Get correct offsets\r\n        offset = fn.offset(element);\r\n        if (!nodeName(offsetParentElement, 'html')) {\r\n          offsetParentRect = fn.offset(offsetParentElement);\r\n        }\r\n\r\n        // Add offsetParent borders\r\n        offsetParentRect.top += fn.css(offsetParentElement, 'borderTopWidth', true);\r\n        offsetParentRect.left += fn.css(offsetParentElement, 'borderLeftWidth', true);\r\n      }\r\n\r\n      // Subtract parent offsets and element margins\r\n      return {\r\n        width: element.offsetWidth,\r\n        height: element.offsetHeight,\r\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\r\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\r\n      };\r\n\r\n    };\r\n\r\n    /**\r\n     * Returns the closest, non-statically positioned offsetParent of a given element\r\n     * @required-by fn.position\r\n     * @param element\r\n     */\r\n    var offsetParent = function offsetParentElement(element) {\r\n      var docElement = element.ownerDocument;\r\n      var offsetParent = element.offsetParent || docElement;\r\n      if(nodeName(offsetParent, '#document')) return docElement.documentElement;\r\n      while(offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\r\n        offsetParent = offsetParent.offsetParent;\r\n      }\r\n      return offsetParent || docElement.documentElement;\r\n    };\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's height function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/height/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.height = function(element, outer) {\r\n      var value = element.offsetHeight;\r\n      if(outer) {\r\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's width function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/width/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.width = function(element, outer) {\r\n      var value = element.offsetWidth;\r\n      if(outer) {\r\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    return fn;\r\n\r\n  });\r\n\r\n// Source: helpers\\parse-options.js\r\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\r\n\r\n  .provider('$parseOptions', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\r\n    };\r\n\r\n    this.$get = function($parse, $q) {\r\n\r\n      function ParseOptionsFactory(attr, config) {\r\n\r\n        var $parseOptions = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        $parseOptions.$values = [];\r\n\r\n        // Private vars\r\n        var match, displayFn, valueName, keyName, groupByFn, valueFn, valuesFn;\r\n\r\n        $parseOptions.init = function() {\r\n          $parseOptions.$match = match = attr.match(options.regexp);\r\n          displayFn = $parse(match[2] || match[1]),\r\n          valueName = match[4] || match[6],\r\n          keyName = match[5],\r\n          groupByFn = $parse(match[3] || ''),\r\n          valueFn = $parse(match[2] ? match[1] : valueName),\r\n          valuesFn = $parse(match[7]);\r\n        };\r\n\r\n        $parseOptions.valuesFn = function(scope, controller) {\r\n          return $q.when(valuesFn(scope, controller))\r\n          .then(function(values) {\r\n            if(!angular.isArray(values)) {\r\n              values = [];\r\n            }\r\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\r\n            return $parseOptions.$values;\r\n          });\r\n        };\r\n\r\n        $parseOptions.displayValue = function(modelValue) {\r\n          var scope = {};\r\n          scope[valueName] = modelValue;\r\n          return displayFn(scope);\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function parseValues(values, scope) {\r\n          return values.map(function(match, index) {\r\n            var locals = {}, label, value;\r\n            locals[valueName] = match;\r\n            label = displayFn(scope, locals);\r\n            value = valueFn(scope, locals);\r\n            return {label: label, value: value, index: index};\r\n          });\r\n        }\r\n\r\n        $parseOptions.init();\r\n        return $parseOptions;\r\n\r\n      }\r\n\r\n      return ParseOptionsFactory;\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: helpers\\raf.js\r\n(angular.version.minor < 3 && angular.version.dot < 14) && angular.module('ng')\r\n\r\n.factory('$$rAF', function($window, $timeout) {\r\n\r\n  var requestAnimationFrame = $window.requestAnimationFrame ||\r\n                              $window.webkitRequestAnimationFrame ||\r\n                              $window.mozRequestAnimationFrame;\r\n\r\n  var cancelAnimationFrame = $window.cancelAnimationFrame ||\r\n                             $window.webkitCancelAnimationFrame ||\r\n                             $window.mozCancelAnimationFrame ||\r\n                             $window.webkitCancelRequestAnimationFrame;\r\n\r\n  var rafSupported = !!requestAnimationFrame;\r\n  var raf = rafSupported ?\r\n    function(fn) {\r\n      var id = requestAnimationFrame(fn);\r\n      return function() {\r\n        cancelAnimationFrame(id);\r\n      };\r\n    } :\r\n    function(fn) {\r\n      var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\r\n      return function() {\r\n        $timeout.cancel(timer);\r\n      };\r\n    };\r\n\r\n  raf.supported = rafSupported;\r\n\r\n  return raf;\r\n\r\n});\r\n\r\n// .factory('$$animateReflow', function($$rAF, $document) {\r\n\r\n//   var bodyEl = $document[0].body;\r\n\r\n//   return function(fn) {\r\n//     //the returned function acts as the cancellation function\r\n//     return $$rAF(function() {\r\n//       //the line below will force the browser to perform a repaint\r\n//       //so that all the animated elements within the animation frame\r\n//       //will be properly updated and drawn on screen. This is\r\n//       //required to perform multi-class CSS based animations with\r\n//       //Firefox. DO NOT REMOVE THIS LINE.\r\n//       var a = bodyEl.offsetWidth + 1;\r\n//       fn();\r\n//     });\r\n//   };\r\n\r\n// });\r\n\r\n// Source: helpers\\utils.js\r\nangular.module('mgcrea.ngStrap.helpers.utils', [])\r\n\r\n  .factory('$utils', function($document, $window) {\r\n\r\n    var fn = {};\r\n\r\n    fn.isIE = function() {\r\n      var ua = $window.navigator.userAgent;\r\n      return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\r\n    };\r\n\r\n    fn.selectScrollFix = function(e) {\r\n      if ($document[0].activeElement.tagName === 'UL') {\r\n        e.preventDefault();\r\n        e.stopImmediatePropagation();\r\n        e.target.focus();\r\n      }\r\n    };\r\n    \r\n    return fn;\r\n\r\n  });\r\n\r\n// Source: modal\\modal.js\r\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$modal', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      backdropAnimation: 'am-fade',\r\n      prefixClass: 'modal',\r\n      prefixEvent: 'modal',\r\n      placement: 'top',\r\n      templateUrl: 'modal/modal.tpl.html',\r\n      template: '',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true\r\n    };\r\n\r\n    this.$get = function($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\r\n\r\n      var forEach = angular.forEach;\r\n      var trim = String.prototype.trim;\r\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n      var bodyElement = angular.element($window.document.body);\r\n\r\n      function ModalFactory(config) {\r\n\r\n        var $modal = {};\r\n\r\n        // Common vars\r\n        var options = $modal.$options = angular.extend({}, defaults, config);\r\n        var promise = $modal.$promise = $bsCompiler.compile(options);\r\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        if(!options.element && !options.container) {\r\n          options.container = 'body';\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\r\n\r\n        // Support scope as string options\r\n        forEach(['title', 'content'], function(key) {\r\n          if(options[key]) scope[key] = $sce.trustAsHtml(options[key]);\r\n        });\r\n\r\n        // Provide scope helpers\r\n        scope.$hide = function() {\r\n          scope.$$postDigest(function() {\r\n            $modal.hide();\r\n          });\r\n        };\r\n        scope.$show = function() {\r\n          scope.$$postDigest(function() {\r\n            $modal.show();\r\n          });\r\n        };\r\n        scope.$toggle = function() {\r\n          scope.$$postDigest(function() {\r\n            $modal.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $modal.$isShown = scope.$isShown = false;\r\n\r\n        // Fetch, compile then initialize modal\r\n        var compileData, modalElement, modalScope;\r\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\r\n        backdropElement.css({position:'fixed', top:'0px', left:'0px', bottom:'0px', right:'0px', 'z-index': 1038});\r\n        promise.then(function(data) {\r\n          compileData = data;\r\n          $modal.init();\r\n        });\r\n\r\n        $modal.init = function() {\r\n\r\n          // Options: show\r\n          if(options.show) {\r\n            scope.$$postDigest(function() {\r\n              $modal.show();\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $modal.destroy = function() {\r\n\r\n          // Remove element\r\n          destroyModalElement();\r\n\r\n          // remove backdrop element\r\n          if(backdropElement) {\r\n            backdropElement.remove();\r\n            backdropElement = null;\r\n          }\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n        };\r\n\r\n        $modal.show = function() {\r\n          if($modal.$isShown) return;\r\n\r\n          var parent, after;\r\n          if(angular.isElement(options.container)) {\r\n            parent = options.container;\r\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\r\n          } else {\r\n            if (options.container) {\r\n              parent = findElement(options.container);\r\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\r\n            } else {\r\n              parent = null;\r\n              after = options.element;\r\n            }\r\n          }\r\n\r\n          // destroy any existing modal elements\r\n          if(modalElement) destroyModalElement();\r\n\r\n          // create a new scope, so we can destroy it and all child scopes\r\n          // when destroying the modal element\r\n          modalScope = $modal.$scope.$new();\r\n          // Fetch a cloned element linked from template (noop callback is required)\r\n          modalElement = $modal.$element = compileData.link(modalScope, function(clonedElement, scope) {});\r\n\r\n          if(scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n\r\n          // Set the initial positioning.\r\n          modalElement.css({display: 'block'}).addClass(options.placement);\r\n\r\n          // Options: animation\r\n          if(options.animation) {\r\n            if(options.backdrop) {\r\n              backdropElement.addClass(options.backdropAnimation);\r\n            }\r\n            modalElement.addClass(options.animation);\r\n          }\r\n\r\n          if(options.backdrop) {\r\n            $animate.enter(backdropElement, bodyElement, null);\r\n          }\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if(angular.version.minor <= 2) {\r\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\r\n          } else {\r\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\r\n          }\r\n\r\n          $modal.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n          // Focus once the enter-animation has started\r\n          // Weird PhantomJS bug hack\r\n          var el = modalElement[0];\r\n          requestAnimationFrame(function() {\r\n            el.focus();\r\n          });\r\n\r\n          bodyElement.addClass(options.prefixClass + '-open');\r\n          if(options.animation) {\r\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n\r\n          // Bind events\r\n          bindBackdropEvents();\r\n          bindKeyboardEvents();\r\n        };\r\n\r\n        function enterAnimateCallback() {\r\n          scope.$emit(options.prefixEvent + '.show', $modal);\r\n        }\r\n\r\n        $modal.hide = function() {\r\n          if(!$modal.$isShown) return;\r\n\r\n          if(scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if(angular.version.minor <= 2) {\r\n            $animate.leave(modalElement, leaveAnimateCallback);\r\n          } else {\r\n            $animate.leave(modalElement).then(leaveAnimateCallback);\r\n          }\r\n\r\n          if(options.backdrop) {\r\n            $animate.leave(backdropElement);\r\n          }\r\n          $modal.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          unbindBackdropEvents();\r\n          unbindKeyboardEvents();\r\n        };\r\n\r\n        function leaveAnimateCallback() {\r\n          scope.$emit(options.prefixEvent + '.hide', $modal);\r\n          bodyElement.removeClass(options.prefixClass + '-open');\r\n          if(options.animation) {\r\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n        }\r\n\r\n        $modal.toggle = function() {\r\n\r\n          $modal.$isShown ? $modal.hide() : $modal.show();\r\n\r\n        };\r\n\r\n        $modal.focus = function() {\r\n          modalElement[0].focus();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $modal.$onKeyUp = function(evt) {\r\n\r\n          if (evt.which === 27 && $modal.$isShown) {\r\n            $modal.hide();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n        };\r\n\r\n        function bindBackdropEvents() {\r\n          if(options.backdrop) {\r\n            modalElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('wheel', preventEventDefault);\r\n          }\r\n        }\r\n\r\n        function unbindBackdropEvents() {\r\n          if(options.backdrop) {\r\n            modalElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('wheel', preventEventDefault);\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents() {\r\n          if(options.keyboard) {\r\n            modalElement.on('keyup', $modal.$onKeyUp);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents() {\r\n          if(options.keyboard) {\r\n            modalElement.off('keyup', $modal.$onKeyUp);\r\n          }\r\n        }\r\n\r\n        // Private methods\r\n\r\n        function hideOnBackdropClick(evt) {\r\n          if(evt.target !== evt.currentTarget) return;\r\n          options.backdrop === 'static' ? $modal.focus() : $modal.hide();\r\n        }\r\n\r\n        function preventEventDefault(evt) {\r\n          evt.preventDefault();\r\n        }\r\n\r\n        function destroyModalElement() {\r\n          if($modal.$isShown && modalElement !== null) {\r\n            // un-bind events\r\n            unbindBackdropEvents();\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if(modalScope) {\r\n            modalScope.$destroy();\r\n            modalScope = null;\r\n          }\r\n\r\n          if(modalElement) {\r\n            modalElement.remove();\r\n            modalElement = $modal.$element = null;\r\n          }\r\n        }\r\n\r\n        return $modal;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest(scope) {\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n      }\r\n\r\n      function findElement(query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      return ModalFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsModal', function($window, $sce, $modal) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'id', 'prefixEvent', 'prefixClass'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function(key) {\r\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\r\n            scope[key] = $sce.trustAsHtml(newValue);\r\n          });\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsModal && scope.$watch(attr.bsModal, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.content = newValue;\r\n          }\r\n        }, true);\r\n\r\n        // Initialize modal\r\n        var modal = $modal(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', modal.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (modal) modal.destroy();\r\n          options = null;\r\n          modal = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: dropdown\\dropdown.js\r\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$dropdown', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'dropdown',\r\n      prefixEvent: 'dropdown',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'dropdown/dropdown.tpl.html',\r\n      trigger: 'click',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0\r\n    };\r\n\r\n    this.$get = function($window, $rootScope, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\r\n\r\n      function DropdownFactory(element, config) {\r\n\r\n        var $dropdown = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        var scope = $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        $dropdown = $tooltip(element, options);\r\n        var parentEl = element.parent();\r\n\r\n        // Protected methods\r\n\r\n        $dropdown.$onKeyDown = function(evt) {\r\n          if (!/(38|40)/.test(evt.keyCode)) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Retrieve focused index\r\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\r\n          if(!items.length) return;\r\n          var index;\r\n          angular.forEach(items, function(el, i) {\r\n            if(matchesSelector && matchesSelector.call(el, ':focus')) index = i;\r\n          });\r\n\r\n          // Navigate with keyboard\r\n          if(evt.keyCode === 38 && index > 0) index--;\r\n          else if(evt.keyCode === 40 && index < items.length - 1) index++;\r\n          else if(angular.isUndefined(index)) index = 0;\r\n          items.eq(index)[0].focus();\r\n\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $dropdown.show;\r\n        $dropdown.show = function() {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function() {\r\n            options.keyboard && $dropdown.$element && $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\r\n            bodyEl.on('click', onBodyClick);\r\n          }, 0, false);\r\n          parentEl.hasClass('dropdown') && parentEl.addClass('open');\r\n        };\r\n\r\n        var hide = $dropdown.hide;\r\n        $dropdown.hide = function() {\r\n          if(!$dropdown.$isShown) return;\r\n          options.keyboard && $dropdown.$element && $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\r\n          bodyEl.off('click', onBodyClick);\r\n          parentEl.hasClass('dropdown') && parentEl.removeClass('open');\r\n          hide();\r\n        };\r\n\r\n        var destroy = $dropdown.destroy;\r\n        $dropdown.destroy = function() {\r\n          bodyEl.off('click', onBodyClick);\r\n          destroy();\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function onBodyClick(evt) {\r\n          if(evt.target === element[0]) return;\r\n          return evt.target !== element[0] && $dropdown.hide();\r\n        }\r\n\r\n        return $dropdown;\r\n\r\n      }\r\n\r\n      return DropdownFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDropdown', function($window, $sce, $dropdown) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsDropdown && scope.$watch(attr.bsDropdown, function(newValue, oldValue) {\r\n          scope.content = newValue;\r\n        }, true);\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if(!dropdown || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\r\n          newValue === true ? dropdown.show() : dropdown.hide();\r\n        });\r\n\r\n        // Initialize dropdown\r\n        var dropdown = $dropdown(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (dropdown) dropdown.destroy();\r\n          options = null;\r\n          dropdown = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: navbar\\navbar.js\r\nangular.module('mgcrea.ngStrap.navbar', [])\r\n\r\n  .provider('$navbar', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass: 'active',\r\n      routeAttr: 'data-match-route',\r\n      strict: false\r\n    };\r\n\r\n    this.$get = function() {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsNavbar', function($window, $location, $navbar) {\r\n\r\n    var defaults = $navbar.defaults;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = angular.copy(defaults);\r\n        angular.forEach(Object.keys(defaults), function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Watch for the $location\r\n        scope.$watch(function() {\r\n\r\n          return $location.path();\r\n\r\n        }, function(newValue, oldValue) {\r\n\r\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\r\n\r\n          angular.forEach(liElements, function(li) {\r\n\r\n            var liElement = angular.element(li);\r\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\r\n            if(options.strict) {\r\n              pattern = '^' + pattern + '$';\r\n            }\r\n            var regexp = new RegExp(pattern, 'i');\r\n\r\n            if(regexp.test(newValue)) {\r\n              liElement.addClass(options.activeClass);\r\n            } else {\r\n              liElement.removeClass(options.activeClass);\r\n            }\r\n\r\n          });\r\n\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: popover\\popover.js\r\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$popover', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      // uncommenting the next two lines will break backwards compatability\r\n      // prefixClass: 'popover',\r\n      // prefixEvent: 'popover',\r\n      container: false,\r\n      target: false,\r\n      placement: 'right',\r\n      templateUrl: 'popover/popover.tpl.html',\r\n      contentTemplate: false,\r\n      trigger: 'click',\r\n      keyboard: true,\r\n      html: false,\r\n      title: '',\r\n      content: '',\r\n      delay: 0,\r\n      autoClose: false\r\n    };\r\n\r\n    this.$get = function($tooltip) {\r\n\r\n      function PopoverFactory(element, config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        var $popover = $tooltip(element, options);\r\n\r\n        // Support scope as string options [/*title, */content]\r\n        if(options.content) {\r\n          $popover.$scope.content = options.content;\r\n        }\r\n\r\n        return $popover;\r\n\r\n      }\r\n\r\n      return PopoverFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPopover', function($window, $sce, $popover) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoClose'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if(angular.isDefined(dataTarget)) {\r\n          if(falseValueRegExp.test(dataTarget))\r\n            options.target = false;\r\n          else\r\n            options.target = dataTarget;\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function(key) {\r\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\r\n            scope[key] = $sce.trustAsHtml(newValue);\r\n            angular.isDefined(oldValue) && requestAnimationFrame(function() {\r\n              popover && popover.$applyPlacement();\r\n            });\r\n          });\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsPopover && scope.$watch(attr.bsPopover, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.content = newValue;\r\n          }\r\n          angular.isDefined(oldValue) && requestAnimationFrame(function() {\r\n            popover && popover.$applyPlacement();\r\n          });\r\n        }, true);\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if(!popover || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\r\n          newValue === true ? popover.show() : popover.hide();\r\n        });\r\n\r\n        // Viewport support\r\n        attr.viewport && scope.$watch(attr.viewport, function (newValue) {\r\n          if(!popover || !angular.isDefined(newValue)) return;\r\n          popover.setViewport(newValue);\r\n        });\r\n\r\n        // Initialize popover\r\n        var popover = $popover(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (popover) popover.destroy();\r\n          options = null;\r\n          popover = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: select\\select.js\r\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions', 'mgcrea.ngStrap.helpers.utils'])\r\n\r\n  .provider('$select', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'select',\r\n      prefixEvent: '$select',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'select/select.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      multiple: false,\r\n      allNoneButtons: false,\r\n      sort: true,\r\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\r\n      placeholder: 'Choose among the following...',\r\n      allText: 'All',\r\n      noneText: 'None',\r\n      maxLength: 3,\r\n      maxLengthHtml: 'selected',\r\n      iconCheckmark: 'glyphicon glyphicon-ok'\r\n    };\r\n\r\n    this.$get = function($window, $document, $rootScope, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n\r\n      function SelectFactory(element, controller, config) {\r\n\r\n        var $select = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $select = $tooltip(element, options);\r\n        var scope = $select.$scope;\r\n\r\n        scope.$matches = [];\r\n        if (options.multiple) {\r\n          scope.$activeIndex = [];\r\n        }\r\n        else {\r\n          scope.$activeIndex = -1;\r\n        }\r\n        scope.$isMultiple = options.multiple;\r\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\r\n        scope.$iconCheckmark = options.iconCheckmark;\r\n        scope.$allText = options.allText;\r\n        scope.$noneText = options.noneText;\r\n\r\n        scope.$activate = function(index) {\r\n          scope.$$postDigest(function() {\r\n            $select.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function(index, evt) {\r\n          scope.$$postDigest(function() {\r\n            $select.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function() {\r\n          return $select.$isVisible();\r\n        };\r\n\r\n        scope.$isActive = function(index) {\r\n          return $select.$isActive(index);\r\n        };\r\n\r\n        scope.$selectAll = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (!scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        scope.$selectNone = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $select.update = function(matches) {\r\n          scope.$matches = matches;\r\n          $select.$updateActiveIndex();\r\n        };\r\n\r\n        $select.activate = function(index) {\r\n          if(options.multiple) {\r\n            $select.$isActive(index) ? scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1) : scope.$activeIndex.push(index);\r\n            if(options.sort) scope.$activeIndex.sort(function(a, b) { return a - b; }); // use numeric sort instead of default sort\r\n          } else {\r\n            scope.$activeIndex = index;\r\n          }\r\n          return scope.$activeIndex;\r\n        };\r\n\r\n        $select.select = function(index) {\r\n          var value = scope.$matches[index].value;\r\n          scope.$apply(function() {\r\n            $select.activate(index);\r\n            if(options.multiple) {\r\n              controller.$setViewValue(scope.$activeIndex.map(function(index) {\r\n                if (angular.isUndefined(scope.$matches[index])) {\r\n                  return null;\r\n                }\r\n                return scope.$matches[index].value;\r\n              }));\r\n            } else {\r\n              controller.$setViewValue(value);\r\n              // Hide if single select\r\n              $select.hide();\r\n            }\r\n          });\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $select.$updateActiveIndex = function() {\r\n          if(controller.$modelValue && scope.$matches.length) {\r\n            if(options.multiple && angular.isArray(controller.$modelValue)) {\r\n              scope.$activeIndex = controller.$modelValue.map(function(value) {\r\n                return $select.$getIndex(value);\r\n              });\r\n            } else {\r\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\r\n            }\r\n          } else if(scope.$activeIndex >= scope.$matches.length) {\r\n            scope.$activeIndex = options.multiple ? [] : 0;\r\n          } else if(!controller.$modelValue && !options.multiple) {\r\n            scope.$activeIndex = -1;\r\n          }\r\n        };\r\n\r\n        $select.$isVisible = function() {\r\n          if(!options.minLength || !controller) {\r\n            return scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $select.$isActive = function(index) {\r\n          if(options.multiple) {\r\n            return scope.$activeIndex.indexOf(index) !== -1;\r\n          } else {\r\n            return scope.$activeIndex === index;\r\n          }\r\n        };\r\n\r\n        $select.$getIndex = function(value) {\r\n          var l = scope.$matches.length, i = l;\r\n          if(!l) return;\r\n          for(i = l; i--;) {\r\n            if(scope.$matches[i].value === value) break;\r\n          }\r\n          if(i < 0) return;\r\n          return i;\r\n        };\r\n\r\n        $select.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if(isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $select.$onKeyDown = function(evt) {\r\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // release focus on tab\r\n          if (options.multiple && evt.keyCode === 9) {\r\n            return $select.hide();\r\n          }\r\n\r\n          // Select with enter\r\n          if(!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\r\n            return $select.select(scope.$activeIndex);\r\n          }\r\n\r\n          if (!options.multiple) {\r\n            // Navigate with keyboard\r\n            if(evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\r\n            else if(evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\r\n            else if(evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\r\n            else if(angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\r\n            scope.$digest();\r\n          }\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var _show = $select.show;\r\n        $select.show = function() {\r\n          _show();\r\n          if(options.multiple) {\r\n            $select.$element.addClass('select-multiple');\r\n          }\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function() {\r\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n            if(options.keyboard) {\r\n              element.on('keydown', $select.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $select.hide;\r\n        $select.hide = function() {\r\n          if(!options.multiple && !controller.$modelValue) {\r\n            scope.$activeIndex = -1;\r\n          }\r\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n          if(options.keyboard) {\r\n            element.off('keydown', $select.$onKeyDown);\r\n          }\r\n          _hide(true);\r\n        };\r\n\r\n        return $select;\r\n\r\n      }\r\n\r\n      SelectFactory.defaults = defaults;\r\n      return SelectFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsSelect', function($window, $parse, $q, $select, $parseOptions, $utils) {\r\n\r\n    var defaults = $select.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\t\t\r\n        if ($utils.isIE()) {\r\n          element[0].addEventListener('blur', $utils.selectScrollFix);\r\n        }\r\n\t\t\r\n        // Directive options\r\n        var options = {scope: scope, placeholder: defaults.placeholder};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\r\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\r\n        var dataMultiple = element.attr('data-multiple');\r\n        if(angular.isDefined(dataMultiple)) {\r\n          if(falseValueRegExp.test(dataMultiple))\r\n            options.multiple = false;\r\n          else\r\n            options.multiple = dataMultiple;\r\n        }\r\n\r\n        // Add support for select markup\r\n        if(element[0].nodeName.toLowerCase() === 'select') {\r\n          var inputEl = element;\r\n          inputEl.css('display', 'none');\r\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\r\n          inputEl.after(element);\r\n        }\r\n\r\n        // Build proper bsOptions\r\n        var parsedOptions = $parseOptions(attr.bsOptions);\r\n\r\n        // Initialize select\r\n        var select = $select(element, controller, options);\r\n\r\n        // Watch bsOptions values before filtering for changes\r\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\r\n        scope.$watchCollection(watchedOptions, function(newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n          parsedOptions.valuesFn(scope, controller)\r\n          .then(function(values) {\r\n            select.update(values);\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\r\n          select.$updateActiveIndex();\r\n          controller.$render();\r\n        }, true);\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var selected, index;\r\n          if(options.multiple && angular.isArray(controller.$modelValue)) {\r\n            selected = controller.$modelValue.map(function(value) {\r\n              index = select.$getIndex(value);\r\n              return angular.isDefined(index) ? select.$scope.$matches[index].label : false;\r\n            }).filter(angular.isDefined);\r\n            if(selected.length > (options.maxLength || defaults.maxLength)) {\r\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\r\n            } else {\r\n              selected = selected.join(', ');\r\n            }\r\n          } else {\r\n            index = select.$getIndex(controller.$modelValue);\r\n            selected = angular.isDefined(index) ? select.$scope.$matches[index].label : false;\r\n          }\r\n          element.html((selected ? selected : options.placeholder) + (options.caretHtml ? options.caretHtml : defaults.caretHtml));\r\n        };\r\n\r\n        if(options.multiple){\r\n          controller.$isEmpty = function(value){\r\n            return !value || value.length === 0;\r\n          };\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (select) select.destroy();\r\n          options = null;\r\n          select = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: tab\\tab.js\r\nangular.module('mgcrea.ngStrap.tab', [])\r\n\r\n  .provider('$tab', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      template: 'tab/tab.tpl.html',\r\n      navClass: 'nav-tabs',\r\n      activeClass: 'active'\r\n    };\r\n\r\n    var controller = this.controller = function($scope, $element, $attrs) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'navClass', 'activeClass'], function(key) {\r\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // Publish options on scope\r\n      $scope.$navClass = self.$options.navClass;\r\n      $scope.$activeClass = self.$options.activeClass;\r\n\r\n      self.$panes = $scope.$panes = [];\r\n\r\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\r\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\r\n      // activePaneChangeListeners to make more sense.\r\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\r\n\r\n      self.$push = function(pane) {\r\n        if(angular.isUndefined(self.$panes.$active)) {\r\n          $scope.$setActive(pane.name || 0);\r\n        }\r\n        self.$panes.push(pane);\r\n      };\r\n\r\n      self.$remove = function(pane) {\r\n        var index = self.$panes.indexOf(pane);\r\n        var active = self.$panes.$active;\r\n        var activeIndex;\r\n        if(angular.isString(active)) {\r\n          activeIndex = self.$panes.map(function(pane) {\r\n            return pane.name;\r\n          }).indexOf(active);\r\n        } else {\r\n          activeIndex = self.$panes.$active;\r\n        }\r\n\r\n        // remove pane from $panes array\r\n        self.$panes.splice(index, 1);\r\n\r\n        if (index < activeIndex) {\r\n          // we removed a pane before the active pane, so we need to\r\n          // decrement the active pane index\r\n          activeIndex--;\r\n        }\r\n        else if (index === activeIndex && activeIndex === self.$panes.length) {\r\n          // we remove the active pane and it was the one at the end,\r\n          // so select the previous one\r\n          activeIndex--;\r\n        }\r\n        if(activeIndex >= 0 && activeIndex < self.$panes.length) {\r\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\r\n        } else {\r\n          self.$setActive();\r\n        }\r\n      };\r\n\r\n      self.$setActive = $scope.$setActive = function(value) {\r\n        self.$panes.$active = value;\r\n        self.$activePaneChangeListeners.forEach(function(fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$isActive = $scope.$isActive = function($pane, $index) {\r\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\r\n      };\r\n\r\n    };\r\n\r\n    this.$get = function() {\r\n      var $tab = {};\r\n      $tab.defaults = defaults;\r\n      $tab.controller = controller;\r\n      return $tab;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTabs', function($window, $animate, $tab, $parse) {\r\n\r\n    var defaults = $tab.defaults;\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsTabs'],\r\n      transclude: true,\r\n      scope: true,\r\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\r\n      templateUrl: function(element, attr) {\r\n        return attr.template || defaults.template;\r\n      },\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // 'ngModel' does interfere with form validation\r\n        // and status, use `bsActivePane` instead to avoid it\r\n        if(ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function() {\r\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function(modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            bsTabsCtrl.$setActive(modelValue);\r\n            return modelValue;\r\n          });\r\n\r\n        }\r\n\r\n        if (attrs.bsActivePane) {\r\n          // adapted from angularjs ngModelController bindings\r\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\r\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\r\n\r\n          // Update bsActivePane value with change\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function() {\r\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // watch bsActivePane for value changes\r\n          scope.$watch(attrs.bsActivePane, function(newValue, oldValue) {\r\n            bsTabsCtrl.$setActive(newValue);\r\n          }, true);\r\n        }\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPane', function($window, $animate, $sce) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsTabs'],\r\n      scope: true,\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('tab-pane');\r\n\r\n        // Observe title attribute for change\r\n        attrs.$observe('title', function(newValue, oldValue) {\r\n          scope.title = $sce.trustAsHtml(newValue);\r\n        });\r\n\r\n        // Save tab name into scope\r\n        scope.name = attrs.name;\r\n\r\n        // Add animation class\r\n        if(bsTabsCtrl.$options.animation) {\r\n          element.addClass(bsTabsCtrl.$options.animation);\r\n        }\r\n\r\n        attrs.$observe('disabled', function(newValue, oldValue) {\r\n          scope.disabled = scope.$eval(newValue);\r\n        });\r\n\r\n        // Push pane to parent bsTabs controller\r\n        bsTabsCtrl.$push(scope);\r\n\r\n        // remove pane from tab controller when pane is destroyed\r\n        scope.$on('$destroy', function() {\r\n          bsTabsCtrl.$remove(scope);\r\n        });\r\n\r\n        function render() {\r\n          var index = bsTabsCtrl.$panes.indexOf(scope);\r\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsTabsCtrl.$activePaneChangeListeners.push(function() {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: scrollspy\\scrollspy.js\r\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$scrollspy', function() {\r\n\r\n    // Pool of registered spies\r\n    var spies = this.$$spies = {};\r\n\r\n    var defaults = this.defaults = {\r\n      debounce: 150,\r\n      throttle: 100,\r\n      offset: 100\r\n    };\r\n\r\n    this.$get = function($window, $document, $rootScope, dimensions, debounce, throttle) {\r\n\r\n      var windowEl = angular.element($window);\r\n      var docEl = angular.element($document.prop('documentElement'));\r\n      var bodyEl = angular.element($window.document.body);\r\n\r\n      // Helper functions\r\n\r\n      function nodeName(element, name) {\r\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\r\n      }\r\n\r\n      function ScrollSpyFactory(config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        if(!options.element) options.element = bodyEl;\r\n        var isWindowSpy = nodeName(options.element, 'body');\r\n        var scrollEl = isWindowSpy ? windowEl : options.element;\r\n        var scrollId = isWindowSpy ? 'window' : options.id;\r\n\r\n        // Use existing spy\r\n        if(spies[scrollId]) {\r\n          spies[scrollId].$$count++;\r\n          return spies[scrollId];\r\n        }\r\n\r\n        var $scrollspy = {};\r\n\r\n        // Private vars\r\n        var unbindViewContentLoaded, unbindIncludeContentLoaded;\r\n        var trackedElements = $scrollspy.$trackedElements = [];\r\n        var sortedElements = [];\r\n        var activeTarget;\r\n        var debouncedCheckPosition;\r\n        var throttledCheckPosition;\r\n        var debouncedCheckOffsets;\r\n        var viewportHeight;\r\n        var scrollTop;\r\n\r\n        $scrollspy.init = function() {\r\n\r\n          // Setup internal ref counter\r\n          this.$$count = 1;\r\n\r\n          // Bind events\r\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\r\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\r\n          scrollEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', debouncedCheckPosition);\r\n          scrollEl.on('scroll', throttledCheckPosition);\r\n\r\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\r\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\r\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\r\n          debouncedCheckOffsets();\r\n\r\n          // Register spy for reuse\r\n          if(scrollId) {\r\n            spies[scrollId] = $scrollspy;\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.destroy = function() {\r\n\r\n          // Check internal ref counter\r\n          this.$$count--;\r\n          if(this.$$count > 0) {\r\n            return;\r\n          }\r\n\r\n          // Unbind events\r\n          scrollEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', debouncedCheckPosition);\r\n          scrollEl.off('scroll', throttledCheckPosition);\r\n          unbindViewContentLoaded();\r\n          unbindIncludeContentLoaded();\r\n          if (scrollId) {\r\n            delete spies[scrollId];\r\n          }\r\n        };\r\n\r\n        $scrollspy.checkPosition = function() {\r\n\r\n          // Not ready yet\r\n          if(!sortedElements.length) return;\r\n\r\n          // Calculate the scroll position\r\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\r\n\r\n          // Calculate the viewport height for use by the components\r\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\r\n\r\n          // Activate first element if scroll is smaller\r\n          if(scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\r\n            return $scrollspy.$activateElement(sortedElements[0]);\r\n          }\r\n\r\n          // Activate proper element\r\n          for (var i = sortedElements.length; i--;) {\r\n            if(angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\r\n            if(activeTarget === sortedElements[i].target) continue;\r\n            if(scrollTop < sortedElements[i].offsetTop) continue;\r\n            if(sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\r\n            return $scrollspy.$activateElement(sortedElements[i]);\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.checkPositionWithEventLoop = function() {\r\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\r\n          // in this setTimeout call\r\n          setTimeout($scrollspy.checkPosition, 1);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $scrollspy.$activateElement = function(element) {\r\n          if(activeTarget) {\r\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\r\n            if(activeElement) {\r\n              activeElement.source.removeClass('active');\r\n              if(nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\r\n                activeElement.source.parent().parent().removeClass('active');\r\n              }\r\n            }\r\n          }\r\n          activeTarget = element.target;\r\n          element.source.addClass('active');\r\n          if(nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\r\n            element.source.parent().parent().addClass('active');\r\n          }\r\n        };\r\n\r\n        $scrollspy.$getTrackedElement = function(target) {\r\n          return trackedElements.filter(function(obj) {\r\n            return obj.target === target;\r\n          })[0];\r\n        };\r\n\r\n        // Track offsets behavior\r\n\r\n        $scrollspy.checkOffsets = function() {\r\n\r\n          angular.forEach(trackedElements, function(trackedElement) {\r\n            var targetElement = document.querySelector(trackedElement.target);\r\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\r\n            if(options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\r\n          });\r\n\r\n          sortedElements = trackedElements\r\n          .filter(function(el) {\r\n            return el.offsetTop !== null;\r\n          })\r\n          .sort(function(a, b) {\r\n            return a.offsetTop - b.offsetTop;\r\n          });\r\n\r\n          debouncedCheckPosition();\r\n\r\n        };\r\n\r\n        $scrollspy.trackElement = function(target, source) {\r\n          trackedElements.push({target: target, source: source});\r\n        };\r\n\r\n        $scrollspy.untrackElement = function(target, source) {\r\n          var toDelete;\r\n          for (var i = trackedElements.length; i--;) {\r\n            if(trackedElements[i].target === target && trackedElements[i].source === source) {\r\n              toDelete = i;\r\n              break;\r\n            }\r\n          }\r\n          trackedElements = trackedElements.splice(toDelete, 1);\r\n        };\r\n\r\n        $scrollspy.activate = function(i) {\r\n          trackedElements[i].addClass('active');\r\n        };\r\n\r\n        // Initialize plugin\r\n\r\n        $scrollspy.init();\r\n        return $scrollspy;\r\n\r\n      }\r\n\r\n      return ScrollSpyFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsScrollspy', function($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      link: function postLink(scope, element, attr) {\r\n\r\n        var options = {scope: scope};\r\n        angular.forEach(['offset', 'target'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        var scrollspy = $scrollspy(options);\r\n        scrollspy.trackElement(options.target, element);\r\n\r\n        scope.$on('$destroy', function() {\r\n          if (scrollspy) {\r\n            scrollspy.untrackElement(options.target, element);\r\n            scrollspy.destroy();\r\n          }\r\n          options = null;\r\n          scrollspy = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsScrollspyList', function($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      compile: function postLink(element, attr) {\r\n        var children = element[0].querySelectorAll('li > a[href]');\r\n        angular.forEach(children, function(child) {\r\n          var childEl = angular.element(child);\r\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: tooltip\\tooltip.js\r\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$tooltip', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'tooltip',\r\n      prefixEvent: 'tooltip',\r\n      container: false,\r\n      target: false,\r\n      placement: 'top',\r\n      templateUrl: 'tooltip/tooltip.tpl.html',\r\n      template: '',\r\n      contentTemplate: false,\r\n      trigger: 'hover focus',\r\n      keyboard: false,\r\n      html: false,\r\n      show: false,\r\n      title: '',\r\n      type: '',\r\n      delay: 0,\r\n      autoClose: false,\r\n      bsEnabled: true,\r\n      viewport: {\r\n       selector: 'body',\r\n       padding: 0\r\n      }\r\n    };\r\n\r\n    this.$get = function($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\r\n\r\n      var trim = String.prototype.trim;\r\n      var isTouch = 'createTouch' in $window.document;\r\n      var htmlReplaceRegExp = /ng-bind=\"/ig;\r\n      var $body = angular.element($window.document);\r\n\r\n      function TooltipFactory(element, config) {\r\n\r\n        var $tooltip = {};\r\n\r\n        // Common vars\r\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\r\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\r\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        var nodeName = element[0].nodeName.toLowerCase();\r\n        if(options.delay && angular.isString(options.delay)) {\r\n          var split = options.delay.split(',').map(parseFloat);\r\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $tooltip.$id = options.id || element.attr('id') || '';\r\n\r\n        // Support scope as string options\r\n        if(options.title) {\r\n          scope.title = $sce.trustAsHtml(options.title);\r\n        }\r\n\r\n        // Provide scope helpers\r\n        scope.$setEnabled = function(isEnabled) {\r\n          scope.$$postDigest(function() {\r\n            $tooltip.setEnabled(isEnabled);\r\n          });\r\n        };\r\n        scope.$hide = function() {\r\n          scope.$$postDigest(function() {\r\n            $tooltip.hide();\r\n          });\r\n        };\r\n        scope.$show = function() {\r\n          scope.$$postDigest(function() {\r\n            $tooltip.show();\r\n          });\r\n        };\r\n        scope.$toggle = function() {\r\n          scope.$$postDigest(function() {\r\n            $tooltip.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $tooltip.$isShown = scope.$isShown = false;\r\n\r\n        // Private vars\r\n        var timeout, hoverState;\r\n\r\n        // Fetch, compile then initialize tooltip\r\n        var compileData, tipElement, tipContainer, tipScope;\r\n        promise.then(function(data) {\r\n          compileData = data;\r\n          $tooltip.init();\r\n        });\r\n\r\n        $tooltip.init = function() {\r\n\r\n          // Options: delay\r\n          if (options.delay && angular.isNumber(options.delay)) {\r\n            options.delay = {\r\n              show: options.delay,\r\n              hide: options.delay\r\n            };\r\n          }\r\n\r\n          // Replace trigger on touch devices ?\r\n          // if(isTouch && options.trigger === defaults.trigger) {\r\n          //   options.trigger.replace(/hover/g, 'click');\r\n          // }\r\n\r\n          // Options : container\r\n          if(options.container === 'self') {\r\n            tipContainer = element;\r\n          } else if(angular.isElement(options.container)) {\r\n            tipContainer = options.container;\r\n          } else if(options.container) {\r\n            tipContainer = findElement(options.container);\r\n          }\r\n\r\n          // Options: trigger\r\n          bindTriggerEvents();\r\n\r\n          // Options: target\r\n          if(options.target) {\r\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\r\n          }\r\n\r\n          // Options: show\r\n          if(options.show) {\r\n            scope.$$postDigest(function() {\r\n              options.trigger === 'focus' ? element[0].focus() : $tooltip.show();\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $tooltip.destroy = function() {\r\n\r\n          // Unbind events\r\n          unbindTriggerEvents();\r\n\r\n          // Remove element\r\n          destroyTipElement();\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n\r\n        };\r\n\r\n        $tooltip.enter = function() {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'in';\r\n          if (!options.delay || !options.delay.show) {\r\n            return $tooltip.show();\r\n          }\r\n\r\n          timeout = setTimeout(function() {\r\n            if (hoverState ==='in') $tooltip.show();\r\n          }, options.delay.show);\r\n\r\n        };\r\n\r\n        $tooltip.show = function() {\r\n          if (!options.bsEnabled || $tooltip.$isShown) return;\r\n\r\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\r\n          var parent, after;\r\n          if (options.container) {\r\n            parent = tipContainer;\r\n            if (tipContainer[0].lastChild) {\r\n              after = angular.element(tipContainer[0].lastChild);\r\n            } else {\r\n              after = null;\r\n            }\r\n          } else {\r\n            parent = null;\r\n            after = element;\r\n          }\r\n\r\n\r\n          // Hide any existing tipElement\r\n          if(tipElement) destroyTipElement();\r\n          // Fetch a cloned element linked from template\r\n          tipScope = $tooltip.$scope.$new();\r\n          tipElement = $tooltip.$element = compileData.link(tipScope, function(clonedElement, scope) {});\r\n\r\n          // Set the initial positioning.  Make the tooltip invisible\r\n          // so IE doesn't try to focus on it off screen.\r\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\r\n\r\n          // Options: animation\r\n          if(options.animation) tipElement.addClass(options.animation);\r\n          // Options: type\r\n          if(options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\r\n          // Options: custom classes\r\n          if(options.customClass) tipElement.addClass(options.customClass);\r\n\r\n          // Append the element, without any animations.  If we append\r\n          // using $animate.enter, some of the animations cause the placement\r\n          // to be off due to the transforms.\r\n          after ? after.after(tipElement) : parent.prepend(tipElement);\r\n\r\n          $tooltip.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n\r\n          // Now, apply placement\r\n          $tooltip.$applyPlacement();\r\n\r\n          // Once placed, animate it.\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if(angular.version.minor <= 2) {\r\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\r\n          } else {\r\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\r\n          }\r\n          safeDigest(scope);\r\n\r\n          $$rAF(function () {\r\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\r\n            if(tipElement) tipElement.css({visibility: 'visible'});\r\n          });\r\n\r\n          // Bind events\r\n          if(options.keyboard) {\r\n            if(options.trigger !== 'focus') {\r\n              $tooltip.focus();\r\n            }\r\n            bindKeyboardEvents();\r\n          }\r\n\r\n          if(options.autoClose) {\r\n            bindAutoCloseEvents();\r\n          }\r\n\r\n        };\r\n\r\n        function enterAnimateCallback() {\r\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\r\n        }\r\n\r\n        $tooltip.leave = function() {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'out';\r\n          if (!options.delay || !options.delay.hide) {\r\n            return $tooltip.hide();\r\n          }\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'out') {\r\n              $tooltip.hide();\r\n            }\r\n          }, options.delay.hide);\r\n\r\n        };\r\n\r\n        var _blur;\r\n        var _tipToHide;\r\n        $tooltip.hide = function(blur) {\r\n\r\n          if(!$tooltip.$isShown) return;\r\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\r\n\r\n          // store blur value for leaveAnimateCallback to use\r\n          _blur = blur;\r\n\r\n          // store current tipElement reference to use\r\n          // in leaveAnimateCallback\r\n          _tipToHide = tipElement;\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if(angular.version.minor <= 2) {\r\n            $animate.leave(tipElement, leaveAnimateCallback);\r\n          } else {\r\n            $animate.leave(tipElement).then(leaveAnimateCallback);\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          if(options.keyboard && tipElement !== null) {\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if(options.autoClose && tipElement !== null) {\r\n            unbindAutoCloseEvents();\r\n          }\r\n        };\r\n\r\n        function leaveAnimateCallback() {\r\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\r\n\r\n          // check if current tipElement still references\r\n          // the same element when hide was called\r\n          if (tipElement === _tipToHide) {\r\n            // Allow to blur the input when hidden, like when pressing enter key\r\n            if(_blur && options.trigger === 'focus') {\r\n              return element[0].blur();\r\n            }\r\n\r\n            // clean up child scopes\r\n            destroyTipElement();\r\n          }\r\n        }\r\n\r\n        $tooltip.toggle = function() {\r\n          $tooltip.$isShown ? $tooltip.leave() : $tooltip.enter();\r\n        };\r\n\r\n        $tooltip.focus = function() {\r\n          tipElement[0].focus();\r\n        };\r\n\r\n        $tooltip.setEnabled = function(isEnabled) {\r\n          options.bsEnabled = isEnabled;\r\n        };\r\n\r\n        $tooltip.setViewport = function(viewport) {\r\n          options.viewport = viewport;\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $tooltip.$applyPlacement = function() {\r\n          if(!tipElement) return;\r\n\r\n          // Determine if we're doing an auto or normal placement\r\n          var placement = options.placement,\r\n              autoToken = /\\s?auto?\\s?/i,\r\n              autoPlace  = autoToken.test(placement);\r\n\r\n          if (autoPlace) {\r\n            placement = placement.replace(autoToken, '') || defaults.placement;\r\n          }\r\n\r\n          // Need to add the position class before we get\r\n          // the offsets\r\n          tipElement.addClass(options.placement);\r\n\r\n          // Get the position of the target element\r\n          // and the height and width of the tooltip so we can center it.\r\n          var elementPosition = getPosition(),\r\n              tipWidth = tipElement.prop('offsetWidth'),\r\n              tipHeight = tipElement.prop('offsetHeight');\r\n\r\n          // Refresh viewport position\r\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\r\n\r\n          // If we're auto placing, we need to check the positioning\r\n          if (autoPlace) {\r\n            var originalPlacement = placement;\r\n            var viewportPosition = getPosition($tooltip.$viewport);\r\n\r\n            // Determine if the vertical placement\r\n            if (originalPlacement.indexOf('bottom') >= 0 && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\r\n              placement = originalPlacement.replace('bottom', 'top');\r\n            } else if (originalPlacement.indexOf('top') >= 0 && elementPosition.top - tipHeight < viewportPosition.top) {\r\n              placement = originalPlacement.replace('top', 'bottom');\r\n            }\r\n\r\n            // Determine the horizontal placement\r\n            // The exotic placements of left and right are opposite of the standard placements.  Their arrows are put on the left/right\r\n            // and flow in the opposite direction of their placement.\r\n            if ((originalPlacement === 'right' || originalPlacement === 'bottom-left' || originalPlacement === 'top-left') &&\r\n                elementPosition.right + tipWidth > viewportPosition.width) {\r\n\r\n              placement = originalPlacement === 'right' ? 'left' : placement.replace('left', 'right');\r\n            } else if ((originalPlacement === 'left' || originalPlacement === 'bottom-right' || originalPlacement === 'top-right') &&\r\n                elementPosition.left - tipWidth < viewportPosition.left) {\r\n\r\n              placement = originalPlacement === 'left' ? 'right' : placement.replace('right', 'left');\r\n            }\r\n\r\n            tipElement.removeClass(originalPlacement).addClass(placement);\r\n          }\r\n\r\n          // Get the tooltip's top and left coordinates to center it with this directive.\r\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\r\n          applyPlacement(tipPosition, placement);\r\n        };\r\n\r\n        $tooltip.$onKeyUp = function(evt) {\r\n          if (evt.which === 27 && $tooltip.$isShown) {\r\n            $tooltip.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusKeyUp = function(evt) {\r\n          if (evt.which === 27) {\r\n            element[0].blur();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusElementMouseDown = function(evt) {\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Some browsers do not auto-focus buttons (eg. Safari)\r\n          $tooltip.$isShown ? element[0].blur() : element[0].focus();\r\n        };\r\n\r\n        // bind/unbind events\r\n        function bindTriggerEvents() {\r\n          var triggers = options.trigger.split(' ');\r\n          angular.forEach(triggers, function(trigger) {\r\n            if(trigger === 'click') {\r\n              element.on('click', $tooltip.toggle);\r\n            } else if(trigger !== 'manual') {\r\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              nodeName === 'button' && trigger !== 'hover' && element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n            }\r\n          });\r\n        }\r\n\r\n        function unbindTriggerEvents() {\r\n          var triggers = options.trigger.split(' ');\r\n          for (var i = triggers.length; i--;) {\r\n            var trigger = triggers[i];\r\n            if(trigger === 'click') {\r\n              element.off('click', $tooltip.toggle);\r\n            } else if(trigger !== 'manual') {\r\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              nodeName === 'button' && trigger !== 'hover' && element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n            }\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents() {\r\n          if(options.trigger !== 'focus') {\r\n            tipElement.on('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.on('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents() {\r\n          if(options.trigger !== 'focus') {\r\n            tipElement.off('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.off('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        var _autoCloseEventsBinded = false;\r\n        function bindAutoCloseEvents() {\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function() {\r\n            // Stop propagation when clicking inside tooltip\r\n            tipElement.on('click', stopEventPropagation);\r\n\r\n            // Hide when clicking outside tooltip\r\n            $body.on('click', $tooltip.hide);\r\n\r\n            _autoCloseEventsBinded = true;\r\n          }, 0, false);\r\n        }\r\n\r\n        function unbindAutoCloseEvents() {\r\n          if (_autoCloseEventsBinded) {\r\n            tipElement.off('click', stopEventPropagation);\r\n            $body.off('click', $tooltip.hide);\r\n            _autoCloseEventsBinded = false;\r\n          }\r\n        }\r\n\r\n        function stopEventPropagation(event) {\r\n          event.stopPropagation();\r\n        }\r\n\r\n        // Private methods\r\n\r\n        function getPosition($element) {\r\n          $element = $element || (options.target || element);\r\n\r\n          var el = $element[0],\r\n              isBody = el.tagName === 'BODY';\r\n\r\n          var elRect = el.getBoundingClientRect();\r\n          var rect = {};\r\n\r\n          // IE8 has issues with angular.extend and using elRect directly.\r\n          // By coping the values of elRect into a new object, we can continue to use extend\r\n          for (var p in elRect) {\r\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\r\n            rect[p] = elRect[p];\r\n          }\r\n\r\n          if (rect.width === null) {\r\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\r\n            rect = angular.extend({}, rect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top });\r\n          }\r\n          var elOffset = isBody ? { top: 0, left: 0 } : dimensions.offset(el),\r\n              scroll = { scroll:  isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0 },\r\n              outerDims = isBody ? { width: document.documentElement.clientWidth, height: $window.innerHeight } : null;\r\n\r\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\r\n        }\r\n\r\n        function getCalculatedOffset(placement, position, actualWidth, actualHeight) {\r\n          var offset;\r\n          var split = placement.split('-');\r\n\r\n          switch (split[0]) {\r\n          case 'right':\r\n            offset = {\r\n              top: position.top + position.height / 2 - actualHeight / 2,\r\n              left: position.left + position.width\r\n            };\r\n            break;\r\n          case 'bottom':\r\n            offset = {\r\n              top: position.top + position.height,\r\n              left: position.left + position.width / 2 - actualWidth / 2\r\n            };\r\n            break;\r\n          case 'left':\r\n            offset = {\r\n              top: position.top + position.height / 2 - actualHeight / 2,\r\n              left: position.left - actualWidth\r\n            };\r\n            break;\r\n          default:\r\n            offset = {\r\n              top: position.top - actualHeight,\r\n              left: position.left + position.width / 2 - actualWidth / 2\r\n            };\r\n            break;\r\n          }\r\n\r\n          if(!split[1]) {\r\n            return offset;\r\n          }\r\n\r\n          // Add support for corners @todo css\r\n          if(split[0] === 'top' || split[0] === 'bottom') {\r\n            switch (split[1]) {\r\n            case 'left':\r\n              offset.left = position.left;\r\n              break;\r\n            case 'right':\r\n              offset.left =  position.left + position.width - actualWidth;\r\n            }\r\n          } else if(split[0] === 'left' || split[0] === 'right') {\r\n            switch (split[1]) {\r\n            case 'top':\r\n              offset.top = position.top - actualHeight;\r\n              break;\r\n            case 'bottom':\r\n              offset.top = position.top + position.height;\r\n            }\r\n          }\r\n\r\n          return offset;\r\n        }\r\n\r\n        function applyPlacement(offset, placement) {\r\n          var tip = tipElement[0],\r\n              width = tip.offsetWidth,\r\n              height = tip.offsetHeight;\r\n\r\n          // manually read margins because getBoundingClientRect includes difference\r\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10),\r\n              marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\r\n\r\n          // we must check for NaN for ie 8/9\r\n          if (isNaN(marginTop)) marginTop  = 0;\r\n          if (isNaN(marginLeft)) marginLeft = 0;\r\n\r\n          offset.top  = offset.top + marginTop;\r\n          offset.left = offset.left + marginLeft;\r\n\r\n          // dimensions setOffset doesn't round pixel values\r\n          // so we use setOffset directly with our own function\r\n          dimensions.setOffset(tip, angular.extend({\r\n            using: function (props) {\r\n              tipElement.css({\r\n                top: Math.round(props.top) + 'px',\r\n                left: Math.round(props.left) + 'px',\r\n                right: ''\r\n              });\r\n            }\r\n          }, offset), 0);\r\n\r\n          // check to see if placing tip in new offset caused the tip to resize itself\r\n          var actualWidth = tip.offsetWidth,\r\n              actualHeight = tip.offsetHeight;\r\n\r\n          if (placement === 'top' && actualHeight !== height) {\r\n            offset.top = offset.top + height - actualHeight;\r\n          }\r\n\r\n          // If it's an exotic placement, exit now instead of\r\n          // applying a delta and changing the arrow\r\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\r\n\r\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\r\n\r\n          if (delta.left) {\r\n            offset.left += delta.left;\r\n          } else {\r\n            offset.top += delta.top;\r\n          }\r\n\r\n          dimensions.setOffset(tip, offset);\r\n\r\n          if (/top|right|bottom|left/.test(placement)) {\r\n            var isVertical = /top|bottom/.test(placement),\r\n                arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight,\r\n                arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\r\n\r\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\r\n          }\r\n        }\r\n\r\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\r\n        function getViewportAdjustedDelta(placement, position, actualWidth, actualHeight) {\r\n          var delta = {top: 0, left: 0};\r\n          if (!$tooltip.$viewport) return delta;\r\n\r\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\r\n          var viewportDimensions = getPosition($tooltip.$viewport);\r\n\r\n          if (/right|left/.test(placement)) {\r\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\r\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\r\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\r\n              delta.top = viewportDimensions.top - topEdgeOffset;\r\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\r\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\r\n            }\r\n          } else {\r\n            var leftEdgeOffset = position.left - viewportPadding;\r\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\r\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\r\n              delta.left = viewportDimensions.left - leftEdgeOffset;\r\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\r\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\r\n            }\r\n          }\r\n\r\n          return delta;\r\n        }\r\n\r\n        function replaceArrow(delta, dimension, isHorizontal) {\r\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\r\n\r\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\r\n                .css(isHorizontal ? 'top' : 'left', '');\r\n        }\r\n\r\n        function destroyTipElement() {\r\n          // Cancel pending callbacks\r\n          clearTimeout(timeout);\r\n\r\n          if($tooltip.$isShown && tipElement !== null) {\r\n            if(options.autoClose) {\r\n              unbindAutoCloseEvents();\r\n            }\r\n\r\n            if(options.keyboard) {\r\n              unbindKeyboardEvents();\r\n            }\r\n          }\r\n\r\n          if(tipScope) {\r\n            tipScope.$destroy();\r\n            tipScope = null;\r\n          }\r\n\r\n          if(tipElement) {\r\n            tipElement.remove();\r\n            tipElement = $tooltip.$element = null;\r\n          }\r\n        }\r\n\r\n        return $tooltip;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest(scope) {\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n      }\r\n\r\n      function findElement(query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      var fetchPromises = {};\r\n      function fetchTemplate(template) {\r\n        if(fetchPromises[template]) return fetchPromises[template];\r\n        return (fetchPromises[template] = $http.get(template, {cache: $templateCache}).then(function(res) {\r\n          return res.data;\r\n        }));\r\n      }\r\n\r\n      return TooltipFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTooltip', function($window, $location, $sce, $tooltip, $$rAF) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if(angular.isDefined(dataTarget)) {\r\n          if(falseValueRegExp.test(dataTarget))\r\n            options.target = false;\r\n          else\r\n            options.target = dataTarget;\r\n        }\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')){\r\n          scope.title = '';\r\n        }\r\n\r\n        // Observe scope attributes for change\r\n        attr.$observe('title', function(newValue) {\r\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\r\n            var oldValue = scope.title;\r\n            scope.title = $sce.trustAsHtml(newValue);\r\n            angular.isDefined(oldValue) && $$rAF(function() {\r\n              tooltip && tooltip.$applyPlacement();\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsTooltip && scope.$watch(attr.bsTooltip, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.title = newValue;\r\n          }\r\n          angular.isDefined(oldValue) && $$rAF(function() {\r\n            tooltip && tooltip.$applyPlacement();\r\n          });\r\n        }, true);\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if(!tooltip || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\r\n          newValue === true ? tooltip.show() : tooltip.hide();\r\n        });\r\n\r\n        // Enabled binding support\r\n        attr.bsEnabled && scope.$watch(attr.bsEnabled, function(newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\r\n          if(!tooltip || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\r\n          newValue === false ? tooltip.setEnabled(false) : tooltip.setEnabled(true);\r\n        });\r\n\r\n        // Viewport support\r\n        attr.viewport && scope.$watch(attr.viewport, function (newValue) {\r\n          if(!tooltip || !angular.isDefined(newValue)) return;\r\n          tooltip.setViewport(newValue);\r\n        });\r\n\r\n        // Initialize popover\r\n        var tooltip = $tooltip(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if(tooltip) tooltip.destroy();\r\n          options = null;\r\n          tooltip = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: typeahead\\typeahead.js\r\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$typeahead', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'typeahead',\r\n      prefixEvent: '$typeahead',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'typeahead/typeahead.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      minLength: 1,\r\n      filter: 'bsAsyncFilter',\r\n      limit: 6,\r\n      autoSelect: false,\r\n      comparator: '',\r\n      trimValue: true\r\n    };\r\n\r\n    this.$get = function($window, $rootScope, $tooltip, $$rAF, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n\r\n      function TypeaheadFactory(element, controller, config) {\r\n\r\n        var $typeahead = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $typeahead = $tooltip(element, options);\r\n        var parentScope = config.scope;\r\n        var scope = $typeahead.$scope;\r\n\r\n        scope.$resetMatches = function() {\r\n          scope.$matches = [];\r\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\r\n        };\r\n        scope.$resetMatches();\r\n\r\n        scope.$activate = function(index) {\r\n          scope.$$postDigest(function() {\r\n            $typeahead.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function(index, evt) {\r\n          scope.$$postDigest(function() {\r\n            $typeahead.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function() {\r\n          return $typeahead.$isVisible();\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $typeahead.update = function(matches) {\r\n          scope.$matches = matches;\r\n          if (scope.$activeIndex >= matches.length) {\r\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\r\n          }\r\n\r\n          // wrap in a $timeout so the results are updated\r\n          // before repositioning\r\n          safeDigest(scope);\r\n          $$rAF($typeahead.$applyPlacement);\r\n        };\r\n\r\n        $typeahead.activate = function(index) {\r\n          scope.$activeIndex = index;\r\n        };\r\n\r\n        $typeahead.select = function(index) {\r\n          if (index === -1) return;\r\n          var value = scope.$matches[index].value;\r\n          // console.log('$setViewValue', value);\r\n          controller.$setViewValue(value);\r\n          controller.$render();\r\n          scope.$resetMatches();\r\n          if (parentScope) parentScope.$digest();\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $typeahead.$isVisible = function() {\r\n          if (!options.minLength || !controller) {\r\n            return !!scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $typeahead.$getIndex = function(value) {\r\n          var l = scope.$matches.length,\r\n            i = l;\r\n          if (!l) return;\r\n          for (i = l; i--;) {\r\n            if (scope.$matches[i].value === value) break;\r\n          }\r\n          if (i < 0) return;\r\n          return i;\r\n        };\r\n\r\n        $typeahead.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n        };\r\n\r\n        $typeahead.$onKeyDown = function(evt) {\r\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\r\n\r\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\r\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // Select with enter\r\n          if (evt.keyCode === 13 && scope.$matches.length) {\r\n            $typeahead.select(scope.$activeIndex);\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          else if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\r\n          else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\r\n          else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\r\n          scope.$digest();\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $typeahead.show;\r\n        $typeahead.show = function() {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed immediately.\r\n          $timeout(function() {\r\n            $typeahead.$element && $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\r\n            if (options.keyboard) {\r\n              element && element.on('keydown', $typeahead.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var hide = $typeahead.hide;\r\n        $typeahead.hide = function() {\r\n          $typeahead.$element && $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\r\n          if (options.keyboard) {\r\n            element && element.off('keydown', $typeahead.$onKeyDown);\r\n          }\r\n          if (!options.autoSelect)\r\n            $typeahead.activate(-1);\r\n          hide();\r\n        };\r\n\r\n        return $typeahead;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest(scope) {\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n      }\r\n\r\n      TypeaheadFactory.defaults = defaults;\r\n      return TypeaheadFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .filter('bsAsyncFilter', function($filter) {\r\n    return function(array, expression, comparator) {\r\n      if (array && angular.isFunction(array.then)) {\r\n        return array.then(function(results) {\r\n          return $filter('filter')(results, expression, comparator);\r\n        });\r\n      } else {\r\n        return $filter('filter')(array, expression, comparator);\r\n      }\r\n    };\r\n  })\r\n\r\n  .directive('bsTypeahead', function($window, $parse, $q, $typeahead, $parseOptions) {\r\n\r\n    var defaults = $typeahead.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function(key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'trimValue'], function(key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // Disable browser autocompletion\r\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\r\n\r\n        // Build proper bsOptions\r\n        var filter = options.filter || defaults.filter;\r\n        var limit = options.limit || defaults.limit;\r\n        var comparator = options.comparator || defaults.comparator;\r\n\r\n        var bsOptions = attr.bsOptions;\r\n        if (filter) bsOptions += ' | ' + filter + ':$viewValue';\r\n        if (comparator) bsOptions += ':' + comparator;\r\n        if (limit) bsOptions += ' | limitTo:' + limit;\r\n        var parsedOptions = $parseOptions(bsOptions);\r\n\r\n        // Initialize typeahead\r\n        var typeahead = $typeahead(element, controller, options);\r\n\r\n        // Watch options on demand\r\n        if (options.watchOptions) {\r\n          // Watch bsOptions values before filtering for changes, drop function calls\r\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\r\n          scope.$watchCollection(watchedOptions, function(newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n            parsedOptions.valuesFn(scope, controller).then(function(values) {\r\n              typeahead.update(values);\r\n              controller.$render();\r\n            });\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          // console.warn('$watch', element.attr('ng-model'), newValue);\r\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\r\n          parsedOptions.valuesFn(scope, controller)\r\n            .then(function(values) {\r\n              // Prevent input with no future prospect if selectMode is truthy\r\n              // @TODO test selectMode\r\n              if (options.selectMode && !values.length && newValue.length > 0) {\r\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\r\n                return;\r\n              }\r\n              if (values.length > limit) values = values.slice(0, limit);\r\n              var isVisible = typeahead.$isVisible();\r\n              isVisible && typeahead.update(values);\r\n              // Do not re-queue an update if a correct value has been selected\r\n              if (values.length === 1 && values[0].value === newValue) return;\r\n              !isVisible && typeahead.update(values);\r\n              // Queue a new rendering that will leverage collection loading\r\n              controller.$render();\r\n            });\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function(modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var displayValue = parsedOptions.displayValue(modelValue);\r\n\r\n          // If we can determine the displayValue, use that\r\n          if (displayValue) {\r\n            return displayValue;\r\n          }\r\n\r\n          // If there's no display value, attempt to use the modelValue.\r\n          // If the model is an object not much we can do\r\n          if (modelValue && typeof modelValue !== 'object') {\r\n            return modelValue;\r\n          }\r\n          return '';\r\n        });\r\n\r\n        // Model rendering in view\r\n        controller.$render = function() {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          if (controller.$isEmpty(controller.$viewValue)) {\r\n            return element.val('');\r\n          }\r\n          var index = typeahead.$getIndex(controller.$modelValue);\r\n          var selected = angular.isDefined(index) ? typeahead.$scope.$matches[index].label : controller.$viewValue;\r\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\r\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\r\n          element.val(options.trimValue === false ? value : value.trim());\r\n        };\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (typeahead) typeahead.destroy();\r\n          options = null;\r\n          typeahead = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: timepicker\\timepicker.js\r\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$timepicker', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      //uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'timepicker',\r\n      prefixClass: 'timepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'timepicker/timepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: true,\r\n      timeType: 'date',\r\n      timeFormat: 'shortTime',\r\n      timezone: null,\r\n      modelTimeFormat: null,\r\n      autoclose: false,\r\n      minTime: -Infinity,\r\n      maxTime: +Infinity,\r\n      length: 5,\r\n      hourStep: 1,\r\n      minuteStep: 5,\r\n      secondStep: 5,\r\n      roundDisplay: false,\r\n      iconUp: 'glyphicon glyphicon-chevron-up',\r\n      iconDown: 'glyphicon glyphicon-chevron-down',\r\n      arrowBehavior: 'pager'\r\n    };\r\n\r\n    this.$get = function($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) {\r\n        defaults.lang = $dateFormatter.getDefaultLocale();\r\n      }\r\n\r\n      function timepickerFactory(element, controller, config) {\r\n\r\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $timepicker.$options;\r\n        var scope = $timepicker.$scope;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function(date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        function floorMinutes(time) {\r\n          // coeff used to floor current time to nearest minuteStep interval\r\n          var coeff = 1000 * 60 * options.minuteStep;\r\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\r\n        }\r\n\r\n        // View vars\r\n\r\n        var selectedIndex = 0;\r\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\r\n        var startDate = controller.$dateValue || defaultDate;\r\n        var viewDate = {\r\n          hour: startDate.getHours(),\r\n          meridian: startDate.getHours() < 12,\r\n          minute: startDate.getMinutes(),\r\n          second: startDate.getSeconds(),\r\n          millisecond: startDate.getMilliseconds()\r\n        };\r\n\r\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\r\n\r\n        var hoursFormat = $dateFormatter.hoursFormat(format),\r\n          timeSeparator = $dateFormatter.timeSeparator(format),\r\n          minutesFormat = $dateFormatter.minutesFormat(format),\r\n          secondsFormat = $dateFormatter.secondsFormat(format),\r\n          showSeconds = $dateFormatter.showSeconds(format),\r\n          showAM = $dateFormatter.showAM(format);\r\n\r\n        scope.$iconUp = options.iconUp;\r\n        scope.$iconDown = options.iconDown;\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function(date, index) {\r\n          $timepicker.select(date, index);\r\n        };\r\n        scope.$moveIndex = function(value, index) {\r\n          $timepicker.$moveIndex(value, index);\r\n        };\r\n        scope.$switchMeridian = function(date) {\r\n          $timepicker.switchMeridian(date);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $timepicker.update = function(date) {\r\n          // console.warn('$timepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $timepicker.$date = date;\r\n            angular.extend(viewDate, {\r\n              hour: date.getHours(),\r\n              minute: date.getMinutes(),\r\n              second: date.getSeconds(),\r\n              millisecond: date.getMilliseconds()\r\n            });\r\n            $timepicker.$build();\r\n          } else if (!$timepicker.$isBuilt) {\r\n            $timepicker.$build();\r\n          }\r\n        };\r\n\r\n        $timepicker.select = function(date, index, keep) {\r\n          // console.warn('$timepicker.select', date, scope.$mode);\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\r\n          if (!angular.isDate(date)) date = new Date(date);\r\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\r\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\r\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n          if (options.autoclose && !keep) {\r\n            $timeout(function() {\r\n              $timepicker.hide(true);\r\n            });\r\n          }\r\n        };\r\n\r\n        $timepicker.switchMeridian = function(date) {\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            return;\r\n          }\r\n          var hours = (date || controller.$dateValue).getHours();\r\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $timepicker.$build = function() {\r\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\r\n          var i, midIndex = scope.midIndex = parseInt(options.length / 2, 10);\r\n          var hours = [],\r\n            hour;\r\n          for (i = 0; i < options.length; i++) {\r\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\r\n            hours.push({\r\n              date: hour,\r\n              label: formatDate(hour, hoursFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\r\n              disabled: $timepicker.$isDisabled(hour, 0)\r\n            });\r\n          }\r\n          var minutes = [],\r\n            minute;\r\n          for (i = 0; i < options.length; i++) {\r\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\r\n            minutes.push({\r\n              date: minute,\r\n              label: formatDate(minute, minutesFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\r\n              disabled: $timepicker.$isDisabled(minute, 1)\r\n            });\r\n          }\r\n          var seconds = [],\r\n            second;\r\n          for (i = 0; i < options.length; i++) {\r\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\r\n            seconds.push({\r\n              date: second,\r\n              label: formatDate(second, secondsFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\r\n              disabled: $timepicker.$isDisabled(second, 2)\r\n            });\r\n          }\r\n\r\n          var rows = [];\r\n          for (i = 0; i < options.length; i++) {\r\n            if (showSeconds) {\r\n              rows.push([hours[i], minutes[i], seconds[i]]);\r\n            } else {\r\n              rows.push([hours[i], minutes[i]]);\r\n            }\r\n          }\r\n          scope.rows = rows;\r\n          scope.showSeconds = showSeconds;\r\n          scope.showAM = showAM;\r\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\r\n          scope.timeSeparator = timeSeparator;\r\n          $timepicker.$isBuilt = true;\r\n        };\r\n\r\n        $timepicker.$isSelected = function(date, index) {\r\n          if (!$timepicker.$date) return false;\r\n          else if (index === 0) {\r\n            return date.getHours() === $timepicker.$date.getHours();\r\n          } else if (index === 1) {\r\n            return date.getMinutes() === $timepicker.$date.getMinutes();\r\n          } else if (index === 2) {\r\n            return date.getSeconds() === $timepicker.$date.getSeconds();\r\n          }\r\n        };\r\n\r\n        $timepicker.$isDisabled = function(date, index) {\r\n          var selectedTime;\r\n          if (index === 0) {\r\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\r\n          } else if (index === 1) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\r\n          } else if (index === 2) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\r\n          }\r\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\r\n        };\r\n\r\n        scope.$arrowAction = function(value, index) {\r\n          if (options.arrowBehavior === 'picker') {\r\n            $timepicker.$setTimeByStep(value, index);\r\n          } else {\r\n            $timepicker.$moveIndex(value, index);\r\n          }\r\n        };\r\n\r\n        $timepicker.$setTimeByStep = function(value, index) {\r\n          var newDate = new Date($timepicker.$date || startDate);\r\n          var hours = newDate.getHours();\r\n          var minutes = newDate.getMinutes();\r\n          var seconds = newDate.getSeconds();\r\n          if (index === 0) {\r\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\r\n          } else if (index === 1) {\r\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\r\n          } else if (index === 2) {\r\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\r\n          }\r\n          $timepicker.select(newDate, index, true);\r\n        };\r\n\r\n        $timepicker.$moveIndex = function(value, index) {\r\n          var targetDate;\r\n          if (index === 0) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\r\n            angular.extend(viewDate, {\r\n              hour: targetDate.getHours()\r\n            });\r\n          } else if (index === 1) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\r\n            angular.extend(viewDate, {\r\n              minute: targetDate.getMinutes()\r\n            });\r\n          } else if (index === 2) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\r\n            angular.extend(viewDate, {\r\n              second: targetDate.getSeconds()\r\n            });\r\n          }\r\n          $timepicker.$build();\r\n        };\r\n\r\n        $timepicker.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $timepicker.$onKeyDown = function(evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Close on enter\r\n          if (evt.keyCode === 13) {\r\n            $timepicker.hide(true);\r\n            return;\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          var newDate = new Date($timepicker.$date);\r\n          var hours = newDate.getHours(),\r\n            hoursLength = formatDate(newDate, hoursFormat).length;\r\n          var minutes = newDate.getMinutes(),\r\n            minutesLength = formatDate(newDate, minutesFormat).length;\r\n          var seconds = newDate.getSeconds(),\r\n            secondsLength = formatDate(newDate, secondsFormat).length;\r\n          var sepLength = 1;\r\n          var lateralMove = /(37|39)/.test(evt.keyCode);\r\n          var count = 2 + showSeconds * 1 + showAM * 1;\r\n\r\n          // Navigate indexes (left, right)\r\n          if (lateralMove) {\r\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\r\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\r\n          }\r\n\r\n          // Update values (up, down)\r\n          var selectRange = [0, hoursLength];\r\n          var incr = 0;\r\n          if (evt.keyCode === 38) incr = -1;\r\n          if (evt.keyCode === 40) incr = +1;\r\n          var isSeconds = selectedIndex === 2 && showSeconds;\r\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\r\n          if (selectedIndex === 0) {\r\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\r\n            // re-calculate hours length because we have changed hours value\r\n            hoursLength = formatDate(newDate, hoursFormat).length;\r\n            selectRange = [0, hoursLength];\r\n          } else if (selectedIndex === 1) {\r\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\r\n            // re-calculate minutes length because we have changes minutes value\r\n            minutesLength = formatDate(newDate, minutesFormat).length;\r\n            selectRange = [hoursLength + sepLength, minutesLength];\r\n          } else if (isSeconds) {\r\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\r\n            // re-calculate seconds length because we have changes seconds value\r\n            secondsLength = formatDate(newDate, secondsFormat).length;\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\r\n          } else if (isMeridian) {\r\n            if (!lateralMove) $timepicker.switchMeridian();\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\r\n          }\r\n          $timepicker.select(newDate, selectedIndex, true);\r\n          createSelection(selectRange[0], selectRange[1]);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function createSelection(start, length) {\r\n          var end = start + length;\r\n          if (element[0].createTextRange) {\r\n            var selRange = element[0].createTextRange();\r\n            selRange.collapse(true);\r\n            selRange.moveStart('character', start);\r\n            selRange.moveEnd('character', end);\r\n            selRange.select();\r\n          } else if (element[0].setSelectionRange) {\r\n            element[0].setSelectionRange(start, end);\r\n          } else if (angular.isUndefined(element[0].selectionStart)) {\r\n            element[0].selectionStart = start;\r\n            element[0].selectionEnd = end;\r\n          }\r\n        }\r\n\r\n        function focusElement() {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $timepicker.init;\r\n        $timepicker.init = function() {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'time');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $timepicker.destroy;\r\n        $timepicker.destroy = function() {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $timepicker.show;\r\n        $timepicker.show = function() {\r\n          if((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n          _show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function() {\r\n            $timepicker.$element && $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n            if (options.keyboard) {\r\n              element && element.on('keydown', $timepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $timepicker.hide;\r\n        $timepicker.hide = function(blur) {\r\n          if (!$timepicker.$isShown) return;\r\n          $timepicker.$element && $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n          if (options.keyboard) {\r\n            element && element.off('keydown', $timepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $timepicker;\r\n\r\n      }\r\n\r\n      timepickerFactory.defaults = defaults;\r\n      return timepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsTimepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\r\n\r\n    var defaults = $timepicker.defaults;\r\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent'], function(key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function(key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if (!timepicker || !angular.isDefined(newValue)) return;\r\n          if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\r\n          newValue === true ? timepicker.show() : timepicker.hide();\r\n        });\r\n\r\n        // Initialize timepicker\r\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\r\n        var timepicker = $timepicker(element, controller, options);\r\n        options = timepicker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function(date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        // Initialize parser\r\n        var dateParser = $dateParser({\r\n          format: options.timeFormat,\r\n          lang: lang\r\n        });\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minTime', 'maxTime'], function(key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\r\n            timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\r\n            !isNaN(timepicker.$options[key]) && timepicker.$build();\r\n            validateAgainstMinMaxTime(controller.$dateValue);\r\n          });\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\r\n          timepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        function validateAgainstMinMaxTime(parsedTime) {\r\n          if (!angular.isDate(parsedTime)) return;\r\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\r\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (!isValid) {\r\n            return;\r\n          }\r\n          controller.$dateValue = parsedTime;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function(viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            controller.$setValidity('date', true);\r\n            return null;\r\n          }\r\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // Return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return undefined;\r\n          } else {\r\n            validateAgainstMinMaxTime(parsedTime);\r\n          }\r\n\r\n          if (options.timeType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\r\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.timeType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.timeType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.timeType === 'iso') {\r\n            return date.toISOString();\r\n          } else {\r\n            return new Date(date);\r\n          }\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function(modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.timeType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\r\n          } else if (options.timeType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\r\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          return getTimeFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function() {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getTimeFormattedString());\r\n        };\r\n\r\n        function getTimeFormattedString() {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (timepicker) timepicker.destroy();\r\n          options = null;\r\n          timepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n})(window, document);\r\n","'use strict';\r\n\r\n// @BUG: following snippet won't compile correctly\r\n// @TODO: submit issue to core\r\n// '<span ng-if=\"title\"><strong ng-bind=\"title\"></strong>&nbsp;</span><span ng-bind-html=\"content\"></span>' +\r\n\r\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$alert', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'alert',\r\n      prefixEvent: 'alert',\r\n      placement: null,\r\n      templateUrl: 'alert/alert.tpl.html',\r\n      container: false,\r\n      element: null,\r\n      backdrop: false,\r\n      keyboard: true,\r\n      show: true,\r\n      // Specific options\r\n      duration: false,\r\n      type: false,\r\n      dismissable: true\r\n    };\r\n\r\n    this.$get = function($modal, $timeout) {\r\n\r\n      function AlertFactory(config) {\r\n\r\n        var $alert = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $alert = $modal(options);\r\n\r\n        // Support scope as string options [/*title, content, */ type, dismissable]\r\n        $alert.$scope.dismissable = !!options.dismissable;\r\n        if(options.type) {\r\n          $alert.$scope.type = options.type;\r\n        }\r\n\r\n        // Support auto-close duration\r\n        var show = $alert.show;\r\n        if(options.duration) {\r\n          $alert.show = function() {\r\n            show();\r\n            $timeout(function() {\r\n              $alert.hide();\r\n            }, options.duration * 1000);\r\n          };\r\n        }\r\n\r\n        return $alert;\r\n\r\n      }\r\n\r\n      return AlertFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAlert', function($window, $sce, $alert) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')){\r\n          scope.title = '';\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content', 'type'], function(key) {\r\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\r\n            scope[key] = $sce.trustAsHtml(newValue);\r\n          });\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsAlert && scope.$watch(attr.bsAlert, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.content = newValue;\r\n          }\r\n        }, true);\r\n\r\n        // Initialize alert\r\n        var alert = $alert(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', alert.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (alert) alert.destroy();\r\n          options = null;\r\n          alert = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\r\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\r\n\r\nangular.module('mgcrea.ngStrap.core', [])\r\n  .service('$bsCompiler', bsCompilerService);\r\n\r\nfunction bsCompilerService($q, $http, $injector, $compile, $controller, $templateCache) {\r\n  /* jshint validthis: true */\r\n\r\n  /*\r\n   * @ngdoc service\r\n   * @name $bsCompiler\r\n   * @module material.core\r\n   * @description\r\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\r\n   * to easily compile an element with a templateUrl, controller, and locals.\r\n   *\r\n   * @usage\r\n   * <hljs lang=\"js\">\r\n   * $bsCompiler.compile({\r\n   *   templateUrl: 'modal.html',\r\n   *   controller: 'ModalCtrl',\r\n   *   locals: {\r\n   *     modal: myModalInstance;\r\n   *   }\r\n   * }).then(function(compileData) {\r\n   *   compileData.element; // modal.html's template in an element\r\n   *   compileData.link(myScope); //attach controller & scope to element\r\n   * });\r\n   * </hljs>\r\n   */\r\n\r\n   /*\r\n    * @ngdoc method\r\n    * @name $bsCompiler#compile\r\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\r\n    * locals, and scope.\r\n    * @param {object} options An options object, with the following properties:\r\n    *\r\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\r\n    *      newly created scope or the name of a registered controller if passed as a string.\r\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *    - `template` - `{string=}` An html template as a string.\r\n    *    - `templateUrl` - `{string=}` A path to an html template.\r\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\r\n    *      it is loaded. It will be given the template string as a parameter, and should\r\n    *      return a a new string representing the transformed template.\r\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\r\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\r\n    *      instantiated `compile()` will fail..\r\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\r\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is injected and the return value is treated as the\r\n    *        dependency. If the result is a promise, it is resolved before its value is\r\n    *        injected into the controller.\r\n    *\r\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\r\n    * `compileData` has the following properties:\r\n    *\r\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\r\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\r\n    *     the element and instantiate the provided controller (if given).\r\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\r\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\r\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\r\n    */\r\n  this.compile = function(options) {\r\n\r\n    if(options.template && /\\.html$/.test(options.template)) {\r\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\r\n      options.templateUrl = options.template;\r\n      options.template = '';\r\n    }\r\n\r\n    var templateUrl = options.templateUrl;\r\n    var template = options.template || '';\r\n    var controller = options.controller;\r\n    var controllerAs = options.controllerAs;\r\n    var resolve = angular.copy(options.resolve || {});\r\n    var locals = angular.copy(options.locals || {});\r\n    var transformTemplate = options.transformTemplate || angular.identity;\r\n    var bindToController = options.bindToController;\r\n\r\n    // Take resolve values and invoke them.\r\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\r\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\r\n    angular.forEach(resolve, function(value, key) {\r\n      if (angular.isString(value)) {\r\n        resolve[key] = $injector.get(value);\r\n      } else {\r\n        resolve[key] = $injector.invoke(value);\r\n      }\r\n    });\r\n    // Add the locals, which are just straight values to inject\r\n    // eg locals: { three: 3 }, will inject three into the controller\r\n    angular.extend(resolve, locals);\r\n\r\n    if (templateUrl) {\r\n      resolve.$template = fetchTemplate(templateUrl);\r\n    } else {\r\n      resolve.$template = $q.when(template);\r\n    }\r\n\r\n    if (options.contentTemplate) {\r\n      // TODO(mgcrea): deprecate?\r\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\r\n        .then(function(templates) {\r\n          var templateEl = angular.element(templates[0]);\r\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0]).removeAttr('ng-bind').html(templates[1]);\r\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\r\n          if(!options.templateUrl) contentEl.next().remove();\r\n          return templateEl[0].outerHTML;\r\n        });\r\n    }\r\n\r\n    // Wait for all the resolves to finish if they are promises\r\n    return $q.all(resolve).then(function(locals) {\r\n\r\n      var template = transformTemplate(locals.$template);\r\n      if (options.html) {\r\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\r\n      }\r\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\r\n      var element = angular.element('<div>').html(template.trim()).contents();\r\n      var linkFn = $compile(element);\r\n\r\n      // Return a linking function that can be used later when the element is ready\r\n      return {\r\n        locals: locals,\r\n        element: element,\r\n        link: function link(scope) {\r\n          locals.$scope = scope;\r\n\r\n          // Instantiate controller if it exists, because we have scope\r\n          if (controller) {\r\n            var invokeCtrl = $controller(controller, locals, true);\r\n            if (bindToController) {\r\n              angular.extend(invokeCtrl.instance, locals);\r\n            }\r\n            // Support angular@~1.2 invokeCtrl\r\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\r\n            // See angular-route source for this logic\r\n            element.data('$ngControllerController', ctrl);\r\n            element.children().data('$ngControllerController', ctrl);\r\n\r\n            if (controllerAs) {\r\n              scope[controllerAs] = ctrl;\r\n            }\r\n          }\r\n\r\n          return linkFn.apply(null, arguments);\r\n        }\r\n      };\r\n    });\r\n\r\n  };\r\n\r\n  function findElement(query, element) {\r\n    return angular.element((element || document).querySelectorAll(query));\r\n  }\r\n\r\n  var fetchPromises = {};\r\n  function fetchTemplate(template) {\r\n    if(fetchPromises[template]) return fetchPromises[template];\r\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\r\n      .then(function(res) {\r\n        return res.data;\r\n      }));\r\n  }\r\n\r\n}\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\r\n\r\n  .service('$dateFormatter', function($locale, dateFilter) {\r\n\r\n    // The unused `lang` arguments are on purpose. The default implementation does not\r\n    // use them and it always uses the locale loaded into the `$locale` service.\r\n    // Custom implementations might use it, thus allowing different directives to\r\n    // have different languages.\r\n\r\n    this.getDefaultLocale = function() {\r\n      return $locale.id;\r\n    };\r\n\r\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\r\n    // Return either the corresponding date format or the given date format.\r\n    this.getDatetimeFormat = function(format, lang) {\r\n      return $locale.DATETIME_FORMATS[format] || format;\r\n    };\r\n\r\n    this.weekdaysShort = function(lang) {\r\n      return $locale.DATETIME_FORMATS.SHORTDAY;\r\n    };\r\n\r\n    function splitTimeFormat(format) {\r\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\r\n    }\r\n\r\n    // h:mm a => h\r\n    this.hoursFormat = function(timeFormat) {\r\n      return splitTimeFormat(timeFormat)[0];\r\n    };\r\n\r\n    // h:mm a => mm\r\n    this.minutesFormat = function(timeFormat) {\r\n      return splitTimeFormat(timeFormat)[2];\r\n    };\r\n\r\n    // h:mm:ss a => ss\r\n    this.secondsFormat = function(timeFormat) {\r\n      return splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => :\r\n    this.timeSeparator = function(timeFormat) {\r\n      return splitTimeFormat(timeFormat)[1];\r\n    };\r\n\r\n    // h:mm:ss a => true, h:mm a => false\r\n    this.showSeconds = function(timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => true, H.mm => false\r\n    this.showAM = function(timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[5];\r\n    };\r\n\r\n    this.formatDate = function(date, format, lang, timezone){\r\n      return dateFilter(date, format, timezone);\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.button', [])\r\n\r\n  .provider('$button', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass:'active',\r\n      toggleEvent:'click'\r\n    };\r\n\r\n    this.$get = function() {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckboxGroup', function() {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink(element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\r\n        angular.forEach(children, function(child) {\r\n          var childEl = angular.element(child);\r\n          childEl.attr('bs-checkbox', '');\r\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckbox', function($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support label > input[type=\"checkbox\"]\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\r\n        if(constantValueRegExp.test(attr.trueValue)) {\r\n          trueValue = scope.$eval(attr.trueValue);\r\n        }\r\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\r\n        if(constantValueRegExp.test(attr.falseValue)) {\r\n          falseValue = scope.$eval(attr.falseValue);\r\n        }\r\n\r\n        // Parse exotic values\r\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\r\n        if(hasExoticValues) {\r\n          controller.$parsers.push(function(viewValue) {\r\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\r\n            return viewValue ? trueValue : falseValue;\r\n          });\r\n          // modelValue -> $formatters -> viewValue\r\n          controller.$formatters.push(function(modelValue) {\r\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n             return angular.equals(modelValue, trueValue);\r\n          });\r\n          // Fix rendering for exotic values\r\n          scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n            controller.$render();\r\n          });\r\n        }\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = angular.equals(controller.$modelValue, trueValue);\r\n          $$rAF(function() {\r\n            if(isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function() {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            if(!isInput) {\r\n              controller.$setViewValue(!activeElement.hasClass('active'));\r\n            }\r\n            if(!hasExoticValues) {\r\n              controller.$render();\r\n            }\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadioGroup', function() {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink(element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\r\n        angular.forEach(children, function(child) {\r\n          angular.element(child).attr('bs-radio', '');\r\n          angular.element(child).attr('ng-model', attr.ngModel);\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadio', function($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support `label > input[type=\"radio\"]` markup\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var value;\r\n        attr.$observe('value', function(v) {\r\n          value = constantValueRegExp.test(v) ? scope.$eval(v) : v;\r\n          controller.$render();\r\n        });\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = angular.equals(controller.$modelValue, value);\r\n          $$rAF(function() {\r\n            if(isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function() {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            controller.$setViewValue(value);\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\r\n\r\n  .provider('$affix', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      offsetTop: 'auto',\r\n      inlineStyles: true\r\n    };\r\n\r\n    this.$get = function($window, debounce, dimensions) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var windowEl = angular.element($window);\r\n\r\n      function AffixFactory(element, config) {\r\n\r\n        var $affix = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        var targetEl = options.target;\r\n\r\n        // Initial private vars\r\n        var reset = 'affix affix-top affix-bottom',\r\n            setWidth = false,\r\n            initialAffixTop = 0,\r\n            initialOffsetTop = 0,\r\n            offsetTop = 0,\r\n            offsetBottom = 0,\r\n            affixed = null,\r\n            unpin = null;\r\n\r\n        var parent = element.parent();\r\n        // Options: custom parent\r\n        if (options.offsetParent) {\r\n          if (options.offsetParent.match(/^\\d+$/)) {\r\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\r\n              parent = parent.parent();\r\n            }\r\n          }\r\n          else {\r\n            parent = angular.element(options.offsetParent);\r\n          }\r\n        }\r\n\r\n        $affix.init = function() {\r\n\r\n          this.$parseOffsets();\r\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\r\n          setWidth = !element[0].style.width;\r\n\r\n          // Bind events\r\n          targetEl.on('scroll', this.checkPosition);\r\n          targetEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', this.$debouncedOnResize);\r\n\r\n          // Both of these checkPosition() calls are necessary for the case where\r\n          // the user hits refresh after scrolling to the bottom of the page.\r\n          this.checkPosition();\r\n          this.checkPositionWithEventLoop();\r\n\r\n        };\r\n\r\n        $affix.destroy = function() {\r\n\r\n          // Unbind events\r\n          targetEl.off('scroll', this.checkPosition);\r\n          targetEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', this.$debouncedOnResize);\r\n\r\n        };\r\n\r\n        $affix.checkPositionWithEventLoop = function() {\r\n\r\n          // IE 9 throws an error if we use 'this' instead of '$affix'\r\n          // in this setTimeout call\r\n          setTimeout($affix.checkPosition, 1);\r\n\r\n        };\r\n\r\n        $affix.checkPosition = function() {\r\n          // if (!this.$element.is(':visible')) return\r\n\r\n          var scrollTop = getScrollTop();\r\n          var position = dimensions.offset(element[0]);\r\n          var elementHeight = dimensions.height(element[0]);\r\n\r\n          // Get required affix class according to position\r\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\r\n\r\n          // Did affix status changed this last check?\r\n          if(affixed === affix) return;\r\n          affixed = affix;\r\n\r\n          if(affix === 'top') {\r\n            unpin = null;\r\n            if(setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', '');\r\n            }\r\n          } else if(affix === 'bottom') {\r\n            if (options.offsetUnpin) {\r\n              unpin = -(options.offsetUnpin * 1);\r\n            }\r\n            else {\r\n              // Calculate unpin threshold when affixed to bottom.\r\n              // Hopefully the browser scrolls pixel by pixel.\r\n              unpin = position.top - scrollTop;\r\n            }\r\n            if(setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\r\n            }\r\n          } else { // affix === 'middle'\r\n            unpin = null;\r\n            if(setWidth) {\r\n              element.css('width', element[0].offsetWidth + 'px');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', 'fixed');\r\n              element.css('top', initialAffixTop + 'px');\r\n            }\r\n          }\r\n\r\n          // Add proper affix class\r\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\r\n\r\n        };\r\n\r\n        $affix.$onResize = function() {\r\n          $affix.$parseOffsets();\r\n          $affix.checkPosition();\r\n        };\r\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\r\n\r\n        $affix.$parseOffsets = function() {\r\n          var initialPosition = element.css('position');\r\n          // Reset position to calculate correct offsetTop\r\n          if (options.inlineStyles){\r\n            element.css('position', (options.offsetParent) ? '' : 'relative');\r\n          }\r\n\r\n          if(options.offsetTop) {\r\n            if(options.offsetTop === 'auto') {\r\n              options.offsetTop = '+0';\r\n            }\r\n            if(options.offsetTop.match(/^[-+]\\d+$/)) {\r\n              initialAffixTop = - options.offsetTop * 1;\r\n              if(options.offsetParent) {\r\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\r\n              }\r\n              else {\r\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\r\n              }\r\n            }\r\n            else {\r\n              offsetTop = options.offsetTop * 1;\r\n            }\r\n          }\r\n\r\n          if(options.offsetBottom) {\r\n            if(options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\r\n              // add 1 pixel due to rounding problems...\r\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\r\n            }\r\n            else {\r\n              offsetBottom = options.offsetBottom * 1;\r\n            }\r\n          }\r\n\r\n          // Bring back the element's position after calculations\r\n          if (options.inlineStyles){\r\n            element.css('position', initialPosition);\r\n          }\r\n        };\r\n\r\n        // Private methods\r\n\r\n        function getRequiredAffixClass(unpin, position, elementHeight) {\r\n\r\n          var scrollTop = getScrollTop();\r\n          var scrollHeight = getScrollHeight();\r\n\r\n          if(scrollTop <= offsetTop) {\r\n            return 'top';\r\n          } else if(unpin !== null && (scrollTop + unpin <= position.top)) {\r\n            return 'middle';\r\n          } else if(offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\r\n            return 'bottom';\r\n          } else {\r\n            return 'middle';\r\n          }\r\n\r\n        }\r\n\r\n        function getScrollTop() {\r\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\r\n        }\r\n\r\n        function getScrollHeight() {\r\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\r\n        }\r\n\r\n        $affix.init();\r\n        return $affix;\r\n\r\n      }\r\n\r\n      return AffixFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffix', function($affix, $window) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: '^?bsAffixTarget',\r\n      link: function postLink(scope, element, attr, affixTarget) {\r\n\r\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\r\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles'], function(key) {\r\n          if(angular.isDefined(attr[key])) {\r\n            var option = attr[key];\r\n            if (/true/i.test(option)) option = true;\r\n            if (/false/i.test(option)) option = false;\r\n            options[key] = option;\r\n          }\r\n        });\r\n\r\n        var affix = $affix(element, options);\r\n        scope.$on('$destroy', function() {\r\n          affix && affix.destroy();\r\n          options = null;\r\n          affix = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffixTarget', function() {\r\n    return {\r\n      controller: function($element) {\r\n        this.$element = $element;\r\n      }\r\n    };\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$aside', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade-and-slide-right',\r\n      prefixClass: 'aside',\r\n      prefixEvent: 'aside',\r\n      placement: 'right',\r\n      templateUrl: 'aside/aside.tpl.html',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true\r\n    };\r\n\r\n    this.$get = function($modal) {\r\n\r\n      function AsideFactory(config) {\r\n\r\n        var $aside = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $aside = $modal(options);\r\n\r\n        return $aside;\r\n\r\n      }\r\n\r\n      return AsideFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAside', function($window, $sce, $aside) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr, transclusion) {\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function(key) {\r\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\r\n            scope[key] = $sce.trustAsHtml(newValue);\r\n          });\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsAside && scope.$watch(attr.bsAside, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.content = newValue;\r\n          }\r\n        }, true);\r\n\r\n        // Initialize aside\r\n        var aside = $aside(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', aside.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (aside) aside.destroy();\r\n          options = null;\r\n          aside = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.collapse', [])\r\n\r\n  .provider('$collapse', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-collapse',\r\n      disallowToggle: false,\r\n      activeClass: 'in',\r\n      startCollapsed: false,\r\n      allowMultiple: false\r\n    };\r\n\r\n    var controller = this.controller = function($scope, $element, $attrs) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\r\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // use string regex match boolean attr falsy values, leave truthy values be\r\n      var falseValueRegExp = /^(false|0|)$/i;\r\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function(key) {\r\n        if(angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\r\n          self.$options[key] = false;\r\n        }\r\n      });\r\n\r\n      self.$toggles = [];\r\n      self.$targets = [];\r\n\r\n      self.$viewChangeListeners = [];\r\n\r\n      self.$registerToggle = function(element) {\r\n        self.$toggles.push(element);\r\n      };\r\n      self.$registerTarget = function(element) {\r\n        self.$targets.push(element);\r\n      };\r\n\r\n      self.$unregisterToggle = function(element) {\r\n        var index = self.$toggles.indexOf(element);\r\n        // remove toggle from $toggles array\r\n        self.$toggles.splice(index, 1);\r\n      };\r\n      self.$unregisterTarget = function(element) {\r\n        var index = self.$targets.indexOf(element);\r\n\r\n        // remove element from $targets array\r\n        self.$targets.splice(index, 1);\r\n\r\n        if (self.$options.allowMultiple) {\r\n          // remove target index from $active array values\r\n          deactivateItem(element);\r\n        }\r\n\r\n        // fix active item indexes\r\n        fixActiveItemIndexes(index);\r\n\r\n        self.$viewChangeListeners.forEach(function(fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      // use array to store all the currently open panels\r\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\r\n      self.$setActive = $scope.$setActive = function(value) {\r\n        if(angular.isArray(value)) {\r\n          self.$targets.$active = value;\r\n        }\r\n        else if(!self.$options.disallowToggle) {\r\n          // toogle element active status\r\n          isActive(value) ? deactivateItem(value) : activateItem(value);\r\n        } else {\r\n          activateItem(value);\r\n        }\r\n\r\n        self.$viewChangeListeners.forEach(function(fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$activeIndexes = function() {\r\n        return self.$options.allowMultiple ? self.$targets.$active :\r\n          self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\r\n      };\r\n\r\n      function fixActiveItemIndexes(index) {\r\n        // item with index was removed, so we\r\n        // need to adjust other items index values\r\n        var activeIndexes = self.$targets.$active;\r\n        for(var i = 0; i < activeIndexes.length; i++) {\r\n          if (index < activeIndexes[i]) {\r\n            activeIndexes[i] = activeIndexes[i] - 1;\r\n          }\r\n\r\n          // the last item is active, so we need to\r\n          // adjust its index\r\n          if (activeIndexes[i] === self.$targets.length) {\r\n            activeIndexes[i] = self.$targets.length - 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      function isActive(value) {\r\n        var activeItems = self.$targets.$active;\r\n        return activeItems.indexOf(value) === -1 ? false : true;\r\n      }\r\n\r\n      function deactivateItem(value) {\r\n        var index = self.$targets.$active.indexOf(value);\r\n        if (index !== -1) {\r\n          self.$targets.$active.splice(index, 1);\r\n        }\r\n      }\r\n\r\n      function activateItem(value) {\r\n        if (!self.$options.allowMultiple) {\r\n          // remove current selected item\r\n          self.$targets.$active.splice(0, 1);\r\n        }\r\n\r\n        if (self.$targets.$active.indexOf(value) === -1) {\r\n          self.$targets.$active.push(value);\r\n        }\r\n      }\r\n\r\n    };\r\n\r\n    this.$get = function() {\r\n      var $collapse = {};\r\n      $collapse.defaults = defaults;\r\n      $collapse.controller = controller;\r\n      return $collapse;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapse', function($window, $animate, $collapse) {\r\n\r\n    var defaults = $collapse.defaults;\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsCollapse'],\r\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        if(ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsCollapseCtrl.$viewChangeListeners.push(function() {\r\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function(modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            if (angular.isArray(modelValue)) {\r\n              // model value is an array, so just replace\r\n              // the active items directly\r\n              bsCollapseCtrl.$setActive(modelValue);\r\n            }\r\n            else {\r\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\r\n\r\n              if (angular.isArray(activeIndexes)) {\r\n                // we have an array of selected indexes\r\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\r\n                  // item with modelValue index is not active\r\n                  bsCollapseCtrl.$setActive(modelValue * 1);\r\n                }\r\n              }\r\n              else if (activeIndexes !== modelValue * 1) {\r\n                bsCollapseCtrl.$setActive(modelValue * 1);\r\n              }\r\n            }\r\n            return modelValue;\r\n          });\r\n\r\n        }\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseToggle', function() {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base attr\r\n        element.attr('data-toggle', 'collapse');\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerToggle(element);\r\n\r\n        // remove toggle from collapse controller when toggle is destroyed\r\n        scope.$on('$destroy', function() {\r\n          bsCollapseCtrl.$unregisterToggle(element);\r\n        });\r\n\r\n        element.on('click', function() {\r\n          var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\r\n          bsCollapseCtrl.$setActive(index * 1);\r\n          scope.$apply();\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseTarget', function($animate) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      // scope: true,\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('collapse');\r\n\r\n        // Add animation class\r\n        if(bsCollapseCtrl.$options.animation) {\r\n          element.addClass(bsCollapseCtrl.$options.animation);\r\n        }\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerTarget(element);\r\n\r\n        // remove pane target from collapse controller when target is destroyed\r\n        scope.$on('$destroy', function() {\r\n          bsCollapseCtrl.$unregisterTarget(element);\r\n        });\r\n\r\n        function render() {\r\n          var index = bsCollapseCtrl.$targets.indexOf(element);\r\n          var active = bsCollapseCtrl.$activeIndexes();\r\n          var action = 'removeClass';\r\n          if (angular.isArray(active)) {\r\n            if (active.indexOf(index) !== -1) {\r\n              action = 'addClass';\r\n            }\r\n          }\r\n          else if (index === active) {\r\n            action = 'addClass';\r\n          }\r\n\r\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsCollapseCtrl.$viewChangeListeners.push(function() {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.datepicker', [\r\n  'mgcrea.ngStrap.helpers.dateParser',\r\n  'mgcrea.ngStrap.helpers.dateFormatter',\r\n  'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$datepicker', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      //uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'datepicker',\r\n      prefixClass: 'datepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'datepicker/datepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: false,\r\n      dateType: 'date',\r\n      dateFormat: 'shortDate',\r\n      timezone: null,\r\n      modelDateFormat: null,\r\n      dayFormat: 'dd',\r\n      monthFormat: 'MMM',\r\n      yearFormat: 'yyyy',\r\n      monthTitleFormat: 'MMMM yyyy',\r\n      yearTitleFormat: 'yyyy',\r\n      strictFormat: false,\r\n      autoclose: false,\r\n      minDate: -Infinity,\r\n      maxDate: +Infinity,\r\n      startView: 0,\r\n      minView: 0,\r\n      startWeek: 0,\r\n      daysOfWeekDisabled: '',\r\n      iconLeft: 'glyphicon glyphicon-chevron-left',\r\n      iconRight: 'glyphicon glyphicon-chevron-right'\r\n    };\r\n\r\n    this.$get = function($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if(!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\r\n\r\n      function DatepickerFactory(element, controller, config) {\r\n\r\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $datepicker.$options;\r\n        var scope = $datepicker.$scope;\r\n        if(options.startView) options.startView -= options.minView;\r\n\r\n        // View vars\r\n\r\n        var pickerViews = datepickerViews($datepicker);\r\n        $datepicker.$views = pickerViews.views;\r\n        var viewDate = pickerViews.viewDate;\r\n        scope.$mode = options.startView;\r\n        scope.$iconLeft = options.iconLeft;\r\n        scope.$iconRight = options.iconRight;\r\n        var $picker = $datepicker.$views[scope.$mode];\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function(date) {\r\n          $datepicker.select(date);\r\n        };\r\n        scope.$selectPane = function(value) {\r\n          $datepicker.$selectPane(value);\r\n        };\r\n        scope.$toggleMode = function() {\r\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $datepicker.update = function(date) {\r\n          // console.warn('$datepicker.update() newValue=%o', date);\r\n          if(angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $datepicker.$date = date;\r\n            $picker.update.call($picker, date);\r\n          }\r\n          // Build only if pristine\r\n          $datepicker.$build(true);\r\n        };\r\n\r\n        $datepicker.updateDisabledDates = function(dateRanges) {\r\n          options.disabledDateRanges = dateRanges;\r\n          for(var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\r\n          }\r\n        };\r\n\r\n        $datepicker.select = function(date, keep) {\r\n          // console.warn('$datepicker.select', date, scope.$mode);\r\n          if(!angular.isDate(controller.$dateValue)) controller.$dateValue = new Date(date);\r\n          if(!scope.$mode || keep) {\r\n            controller.$setViewValue(angular.copy(date));\r\n            controller.$render();\r\n            if(options.autoclose && !keep) {\r\n              $timeout(function() { $datepicker.hide(true); });\r\n            }\r\n          } else {\r\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\r\n            $datepicker.setMode(scope.$mode - 1);\r\n            $datepicker.$build();\r\n          }\r\n        };\r\n\r\n        $datepicker.setMode = function(mode) {\r\n          // console.warn('$datepicker.setMode', mode);\r\n          scope.$mode = mode;\r\n          $picker = $datepicker.$views[scope.$mode];\r\n          $datepicker.$build();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $datepicker.$build = function(pristine) {\r\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\r\n          if(pristine === true && $picker.built) return;\r\n          if(pristine === false && !$picker.built) return;\r\n          $picker.build.call($picker);\r\n        };\r\n\r\n        $datepicker.$updateSelected = function() {\r\n          for(var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], updateSelected);\r\n          }\r\n        };\r\n\r\n        $datepicker.$isSelected = function(date) {\r\n          return $picker.isSelected(date);\r\n        };\r\n\r\n        $datepicker.$setDisabledEl = function(el) {\r\n          el.disabled = $picker.isDisabled(el.date);\r\n        };\r\n\r\n        $datepicker.$selectPane = function(value) {\r\n          var steps = $picker.steps;\r\n          // set targetDate to first day of month to avoid problems with\r\n          // date values rollover. This assumes the viewDate does not\r\n          // depend on the day of the month\r\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\r\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\r\n          $datepicker.$build();\r\n        };\r\n\r\n        $datepicker.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if(isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if(targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $datepicker.$onKeyDown = function(evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          if(evt.keyCode === 13) {\r\n            if(!scope.$mode) {\r\n              return $datepicker.hide(true);\r\n            } else {\r\n              return scope.$apply(function() { $datepicker.setMode(scope.$mode - 1); });\r\n            }\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          $picker.onKeyDown(evt);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function updateSelected(el) {\r\n          el.selected = $datepicker.$isSelected(el.date);\r\n        }\r\n\r\n        function focusElement() {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $datepicker.init;\r\n        $datepicker.init = function() {\r\n          if(isNative && options.useNative) {\r\n            element.prop('type', 'date');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if(isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $datepicker.destroy;\r\n        $datepicker.destroy = function() {\r\n          if(isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $datepicker.show;\r\n        $datepicker.show = function() {\r\n          if((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n          _show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function() {\r\n            // if $datepicker is no longer showing, don't setup events\r\n            if(!$datepicker.$isShown) return;\r\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n            if(options.keyboard) {\r\n              element.on('keydown', $datepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $datepicker.hide;\r\n        $datepicker.hide = function(blur) {\r\n          if(!$datepicker.$isShown) return;\r\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n          if(options.keyboard) {\r\n            element.off('keydown', $datepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $datepicker;\r\n\r\n      }\r\n\r\n      DatepickerFactory.defaults = defaults;\r\n      return DatepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDatepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\r\n\r\n    var defaults = $datepicker.defaults;\r\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if(!datepicker || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\r\n          newValue === true ? datepicker.show() : datepicker.hide();\r\n        });\r\n\r\n        // Initialize datepicker\r\n        var datepicker = $datepicker(element, controller, options);\r\n        options = datepicker.$options;\r\n        // Set expected iOS format\r\n        if(isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\r\n\r\n        var lang = options.lang;\r\n\r\n        var formatDate = function(date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n\r\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minDate', 'maxDate'], function(key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\r\n            // console.warn('attr.$observe(%s)=%o', key, newValue);\r\n            datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\r\n            // Build only if dirty\r\n            !isNaN(datepicker.$options[key]) && datepicker.$build(false);\r\n            validateAgainstMinMaxDate(controller.$dateValue);\r\n          });\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          datepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        // Normalize undefined/null/empty array,\r\n        // so that we don't treat changing from undefined->null as a change.\r\n        function normalizeDateRanges(ranges) {\r\n          if (!ranges || !ranges.length) return null;\r\n          return ranges;\r\n        }\r\n\r\n        if (angular.isDefined(attr.disabledDates)) {\r\n          scope.$watch(attr.disabledDates, function(disabledRanges, previousValue) {\r\n            disabledRanges = normalizeDateRanges(disabledRanges);\r\n            previousValue = normalizeDateRanges(previousValue);\r\n\r\n            if (disabledRanges) {\r\n              datepicker.updateDisabledDates(disabledRanges);\r\n            }\r\n          });\r\n        }\r\n\r\n        function validateAgainstMinMaxDate(parsedDate) {\r\n          if (!angular.isDate(parsedDate)) return;\r\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\r\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if(isValid) controller.$dateValue = parsedDate;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function(viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if(!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            return null;\r\n          }\r\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\r\n          if(!parsedDate || isNaN(parsedDate.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return;\r\n          } else {\r\n            validateAgainstMinMaxDate(parsedDate);\r\n          }\r\n\r\n          if(options.dateType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\r\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if(options.dateType === 'number') {\r\n            return date.getTime();\r\n          } else if(options.dateType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if(options.dateType === 'iso') {\r\n            return date.toISOString();\r\n          } else {\r\n            return new Date(date);\r\n          }\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function(modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if(angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if(angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if(options.dateType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\r\n          } else if(options.dateType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) {\r\n          //   var today = new Date();\r\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\r\n          // }\r\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          return getDateFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function() {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getDateFormattedString());\r\n        };\r\n\r\n        function getDateFormattedString() {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if(datepicker) datepicker.destroy();\r\n          options = null;\r\n          datepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .provider('datepickerViews', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      dayFormat: 'dd',\r\n      daySplit: 7\r\n    };\r\n\r\n    // Split array into smaller arrays\r\n    function split(arr, size) {\r\n      var arrays = [];\r\n      while(arr.length > 0) {\r\n        arrays.push(arr.splice(0, size));\r\n      }\r\n      return arrays;\r\n    }\r\n\r\n    // Modulus operator\r\n    function mod(n, m) {\r\n      return ((n % m) + m) % m;\r\n    }\r\n\r\n    this.$get = function($dateFormatter, $dateParser, $sce) {\r\n\r\n      return function(picker) {\r\n\r\n        var scope = picker.$scope;\r\n        var options = picker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function(date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\r\n\r\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\r\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\r\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\r\n\r\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\r\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\r\n\r\n        var views = [{\r\n            format: options.dayFormat,\r\n            split: 7,\r\n            steps: { month: 1 },\r\n            update: function(date, force) {\r\n              if(!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$build();\r\n              } else if(date.getDate() !== viewDate.date || date.getDate() === 1) {\r\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\r\n                // in $datepicker.$selectPane, so picker would not update selected day display if\r\n                // user picks first day of the new month.\r\n                // As a workaround, we are always forcing update when picked date is first day of month.\r\n                viewDate.date = picker.$date.getDate();\r\n                picker.$updateSelected();\r\n              }\r\n            },\r\n            build: function() {\r\n              var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1), firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\r\n              var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5), firstDateOffset = firstDate.getTimezoneOffset();\r\n              var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\r\n              // Handle daylight time switch\r\n              if(firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\r\n              var days = [], day;\r\n              for(var i = 0; i < 42; i++) { // < 7 * 6\r\n                day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\r\n                days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\r\n              }\r\n              scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\r\n              scope.showLabels = true;\r\n              scope.labels = weekDaysLabelsHtml;\r\n              scope.rows = split(days, this.split);\r\n              this.built = true;\r\n            },\r\n            isSelected: function(date) {\r\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\r\n            },\r\n            isDisabled: function(date) {\r\n              var time = date.getTime();\r\n\r\n              // Disabled because of min/max date.\r\n              if (time < options.minDate || time > options.maxDate) return true;\r\n\r\n              // Disabled due to being a disabled day of the week\r\n              if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\r\n\r\n              // Disabled because of disabled date range.\r\n              if (options.disabledDateRanges) {\r\n                for (var i = 0; i < options.disabledDateRanges.length; i++) {\r\n                  if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\r\n                    return true;\r\n                  }\r\n                }\r\n              }\r\n\r\n              return false;\r\n            },\r\n            onKeyDown: function(evt) {\r\n              if (!picker.$date) {\r\n                return;\r\n              }\r\n              var actualTime = picker.$date.getTime();\r\n              var newDate;\r\n\r\n              if(evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\r\n              else if(evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\r\n              else if(evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\r\n              else if(evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\r\n\r\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n            }\r\n          }, {\r\n            name: 'month',\r\n            format: options.monthFormat,\r\n            split: 4,\r\n            steps: { year: 1 },\r\n            update: function(date, force) {\r\n              if(!this.built || date.getFullYear() !== viewDate.year) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$build();\r\n              } else if(date.getMonth() !== viewDate.month) {\r\n                angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$updateSelected();\r\n              }\r\n            },\r\n            build: function() {\r\n              var firstMonth = new Date(viewDate.year, 0, 1);\r\n              var months = [], month;\r\n              for (var i = 0; i < 12; i++) {\r\n                month = new Date(viewDate.year, i, 1);\r\n                months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\r\n              }\r\n              scope.title = formatDate(month, options.yearTitleFormat);\r\n              scope.showLabels = false;\r\n              scope.rows = split(months, this.split);\r\n              this.built = true;\r\n            },\r\n            isSelected: function(date) {\r\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\r\n            },\r\n            isDisabled: function(date) {\r\n              var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\r\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n            },\r\n            onKeyDown: function(evt) {\r\n              if (!picker.$date) {\r\n                return;\r\n              }\r\n              var actualMonth = picker.$date.getMonth();\r\n              var newDate = new Date(picker.$date);\r\n\r\n              if(evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\r\n              else if(evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\r\n              else if(evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\r\n              else if(evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\r\n\r\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n            }\r\n          }, {\r\n            name: 'year',\r\n            format: options.yearFormat,\r\n            split: 4,\r\n            steps: { year: 12 },\r\n            update: function(date, force) {\r\n              if(!this.built || force || parseInt(date.getFullYear()/20, 10) !== parseInt(viewDate.year/20, 10)) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$build();\r\n              } else if(date.getFullYear() !== viewDate.year) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$updateSelected();\r\n              }\r\n            },\r\n            build: function() {\r\n              var firstYear = viewDate.year - viewDate.year % (this.split * 3);\r\n              var years = [], year;\r\n              for (var i = 0; i < 12; i++) {\r\n                year = new Date(firstYear + i, 0, 1);\r\n                years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\r\n              }\r\n              scope.title = years[0].label + '-' + years[years.length - 1].label;\r\n              scope.showLabels = false;\r\n              scope.rows = split(years, this.split);\r\n              this.built = true;\r\n            },\r\n            isSelected: function(date) {\r\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear();\r\n            },\r\n            isDisabled: function(date) {\r\n              var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\r\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n            },\r\n            onKeyDown: function(evt) {\r\n              if (!picker.$date) {\r\n                return;\r\n              }\r\n              var actualYear = picker.$date.getFullYear(),\r\n                  newDate = new Date(picker.$date);\r\n\r\n              if(evt.keyCode === 37) newDate.setYear(actualYear - 1);\r\n              else if(evt.keyCode === 38) newDate.setYear(actualYear - 4);\r\n              else if(evt.keyCode === 39) newDate.setYear(actualYear + 1);\r\n              else if(evt.keyCode === 40) newDate.setYear(actualYear + 4);\r\n\r\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n            }\r\n          }];\r\n\r\n        return {\r\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\r\n          viewDate: viewDate\r\n        };\r\n\r\n      };\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\r\n\r\n.provider('$dateParser', function($localeProvider) {\r\n\r\n  // define a custom ParseDate object to use instead of native Date\r\n  // to avoid date values wrapping when setting date component values\r\n  function ParseDate() {\r\n    this.year = 1970;\r\n    this.month = 0;\r\n    this.day = 1;\r\n    this.hours = 0;\r\n    this.minutes = 0;\r\n    this.seconds = 0;\r\n    this.milliseconds = 0;\r\n  }\r\n\r\n  ParseDate.prototype.setMilliseconds = function(value) { this.milliseconds = value; };\r\n  ParseDate.prototype.setSeconds = function(value) { this.seconds = value; };\r\n  ParseDate.prototype.setMinutes = function(value) { this.minutes = value; };\r\n  ParseDate.prototype.setHours = function(value) { this.hours = value; };\r\n  ParseDate.prototype.getHours = function() { return this.hours; };\r\n  ParseDate.prototype.setDate = function(value) { this.day = value; };\r\n  ParseDate.prototype.setMonth = function(value) { this.month = value; };\r\n  ParseDate.prototype.setFullYear = function(value) { this.year = value; };\r\n  ParseDate.prototype.fromDate = function(value) {\r\n    this.year = value.getFullYear();\r\n    this.month = value.getMonth();\r\n    this.day = value.getDate();\r\n    this.hours = value.getHours();\r\n    this.minutes = value.getMinutes();\r\n    this.seconds = value.getSeconds();\r\n    this.milliseconds = value.getMilliseconds();\r\n    return this;\r\n  };\r\n\r\n  ParseDate.prototype.toDate = function() {\r\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\r\n  };\r\n\r\n  var proto = ParseDate.prototype;\r\n\r\n  function noop() {\r\n  }\r\n\r\n  function isNumeric(n) {\r\n    return !isNaN(parseFloat(n)) && isFinite(n);\r\n  }\r\n\r\n  function indexOfCaseInsensitive(array, value) {\r\n    var len = array.length, str=value.toString().toLowerCase();\r\n    for (var i=0; i<len; i++) {\r\n      if (array[i].toLowerCase() === str) { return i; }\r\n    }\r\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\r\n  }\r\n\r\n  var defaults = this.defaults = {\r\n    format: 'shortDate',\r\n    strict: false\r\n  };\r\n\r\n  this.$get = function($locale, dateFilter) {\r\n\r\n    var DateParserFactory = function(config) {\r\n\r\n      var options = angular.extend({}, defaults, config);\r\n\r\n      var $dateParser = {};\r\n\r\n      var regExpMap = {\r\n        'sss'   : '[0-9]{3}',\r\n        'ss'    : '[0-5][0-9]',\r\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'mm'    : '[0-5][0-9]',\r\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'HH'    : '[01][0-9]|2[0-3]',\r\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\r\n        'hh'    : '[0][1-9]|[1][012]',\r\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'a'     : 'AM|PM',\r\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\r\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\r\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\r\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\r\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\r\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\r\n        'MM'    : '0[1-9]|1[012]',\r\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\r\n        'yy'    : '[0-9]{2}',\r\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}',\r\n      };\r\n\r\n      var setFnMap = {\r\n        'sss'   : proto.setMilliseconds,\r\n        'ss'    : proto.setSeconds,\r\n        's'     : proto.setSeconds,\r\n        'mm'    : proto.setMinutes,\r\n        'm'     : proto.setMinutes,\r\n        'HH'    : proto.setHours,\r\n        'H'     : proto.setHours,\r\n        'hh'    : proto.setHours,\r\n        'h'     : proto.setHours,\r\n        'EEEE'  : noop,\r\n        'EEE'   : noop,\r\n        'dd'    : proto.setDate,\r\n        'd'     : proto.setDate,\r\n        'a'     : function(value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\r\n        'MMMM'  : function(value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\r\n        'MMM'   : function(value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\r\n        'MM'    : function(value) { return this.setMonth(1 * value - 1); },\r\n        'M'     : function(value) { return this.setMonth(1 * value - 1); },\r\n        'yyyy'  : proto.setFullYear,\r\n        'yy'    : function(value) { return this.setFullYear(2000 + 1 * value); },\r\n        'y'     : function(value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\r\n      };\r\n\r\n      var regex, setMap;\r\n\r\n      $dateParser.init = function() {\r\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\r\n        regex = regExpForFormat($dateParser.$format);\r\n        setMap = setMapForFormat($dateParser.$format);\r\n      };\r\n\r\n      $dateParser.isValid = function(date) {\r\n        if(angular.isDate(date)) return !isNaN(date.getTime());\r\n        return regex.test(date);\r\n      };\r\n\r\n      $dateParser.parse = function(value, baseDate, format, timezone) {\r\n        // check for date format special names\r\n        if(format) format = $locale.DATETIME_FORMATS[format] || format;\r\n        if(angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\r\n        var formatRegex = format ? regExpForFormat(format) : regex;\r\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\r\n        var matches = formatRegex.exec(value);\r\n        if(!matches) return false;\r\n        // use custom ParseDate object to set parsed values\r\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\r\n        for(var i = 0; i < matches.length - 1; i++) {\r\n          formatSetMap[i] && formatSetMap[i].call(date, matches[i+1]);\r\n        }\r\n        // convert back to native Date object\r\n        var newDate = date.toDate();\r\n\r\n        // check new native Date object for day values overflow\r\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\r\n          return false;\r\n        }\r\n\r\n        return newDate;\r\n      };\r\n\r\n      $dateParser.getDateForAttribute = function(key, value) {\r\n        var date;\r\n\r\n        if(value === 'today') {\r\n          var today = new Date();\r\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\r\n        } else if(angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\r\n          date = new Date(value.substr(1, value.length - 2));\r\n        } else if(isNumeric(value)) {\r\n          date = new Date(parseInt(value, 10));\r\n        } else if (angular.isString(value) && 0 === value.length) { // Reset date\r\n          date = key === 'minDate' ? -Infinity : +Infinity;\r\n        } else {\r\n          date = new Date(value);\r\n        }\r\n\r\n        return date;\r\n      };\r\n\r\n      $dateParser.getTimeForAttribute = function(key, value) {\r\n        var time;\r\n\r\n        if(value === 'now') {\r\n          time = new Date().setFullYear(1970, 0, 1);\r\n        } else if(angular.isString(value) && value.match(/^\".+\"$/)) {\r\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\r\n        } else if(isNumeric(value)) {\r\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\r\n        } else if (angular.isString(value) && 0 === value.length) { // Reset time\r\n          time = key === 'minTime' ? -Infinity : +Infinity;\r\n        } else {\r\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\r\n        }\r\n\r\n        return time;\r\n      };\r\n\r\n      /* Handle switch to/from daylight saving.\r\n      * Hours may be non-zero on daylight saving cut-over:\r\n      * > 12 when midnight changeover, but then cannot generate\r\n      * midnight datetime, so jump to 1AM, otherwise reset.\r\n      * @param  date  (Date) the date to check\r\n      * @return  (Date) the corrected date\r\n      *\r\n      * __ copied from jquery ui datepicker __\r\n      */\r\n      $dateParser.daylightSavingAdjust = function(date) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\r\n        return date;\r\n      };\r\n\r\n      /* Correct the date for timezone offset.\r\n      * @param  date  (Date) the date to adjust\r\n      * @param  timezone  (string) the timezone to adjust for\r\n      * @param  undo  (boolean) to add or subtract timezone offset\r\n      * @return  (Date) the corrected date\r\n      */\r\n      $dateParser.timezoneOffsetAdjust = function(date, timezone, undo) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        // Right now, only 'UTC' is supported.\r\n        if (timezone && timezone === 'UTC') {\r\n          date = new Date(date.getTime());\r\n          date.setMinutes(date.getMinutes() + (undo?-1:1)*date.getTimezoneOffset());\r\n        }\r\n        return date;\r\n      };\r\n\r\n      // Private functions\r\n\r\n      function setMapForFormat(format) {\r\n        var keys = Object.keys(setFnMap), i;\r\n        var map = [], sortedMap = [];\r\n        // Map to setFn\r\n        var clonedFormat = format;\r\n        for(i = 0; i < keys.length; i++) {\r\n          if(format.split(keys[i]).length > 1) {\r\n            var index = clonedFormat.search(keys[i]);\r\n            format = format.split(keys[i]).join('');\r\n            if(setFnMap[keys[i]]) {\r\n              map[index] = setFnMap[keys[i]];\r\n            }\r\n          }\r\n        }\r\n        // Sort result map\r\n        angular.forEach(map, function(v) {\r\n          // conditional required since angular.forEach broke around v1.2.21\r\n          // related pr: https://github.com/angular/angular.js/pull/8525\r\n          if(v) sortedMap.push(v);\r\n        });\r\n        return sortedMap;\r\n      }\r\n\r\n      function escapeReservedSymbols(text) {\r\n        return text.replace(/\\//g, '[\\\\/]').replace('/-/g', '[-]').replace(/\\./g, '[.]').replace(/\\\\s/g, '[\\\\s]');\r\n      }\r\n\r\n      function regExpForFormat(format) {\r\n        var keys = Object.keys(regExpMap), i;\r\n\r\n        var re = format;\r\n        // Abstract replaces to avoid collisions\r\n        for(i = 0; i < keys.length; i++) {\r\n          re = re.split(keys[i]).join('${' + i + '}');\r\n        }\r\n        // Replace abstracted values\r\n        for(i = 0; i < keys.length; i++) {\r\n          re = re.split('${' + i + '}').join('(' + regExpMap[keys[i]] + ')');\r\n        }\r\n        format = escapeReservedSymbols(format);\r\n\r\n        return new RegExp('^' + re + '$', ['i']);\r\n      }\r\n\r\n      $dateParser.init();\r\n      return $dateParser;\r\n\r\n    };\r\n\r\n    return DateParserFactory;\r\n\r\n  };\r\n\r\n});\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\r\n.factory('debounce', function($timeout) {\r\n  return function(func, wait, immediate) {\r\n    var timeout = null;\r\n    return function() {\r\n      var context = this,\r\n        args = arguments,\r\n        callNow = immediate && !timeout;\r\n      if(timeout) {\r\n        $timeout.cancel(timeout);\r\n      }\r\n      timeout = $timeout(function later() {\r\n        timeout = null;\r\n        if(!immediate) {\r\n          func.apply(context, args);\r\n        }\r\n      }, wait, false);\r\n      if(callNow) {\r\n        func.apply(context, args);\r\n      }\r\n      return timeout;\r\n    };\r\n  };\r\n})\r\n\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\r\n.factory('throttle', function($timeout) {\r\n  return function(func, wait, options) {\r\n    var timeout = null;\r\n    options || (options = {});\r\n    return function() {\r\n      var context = this,\r\n        args = arguments;\r\n      if(!timeout) {\r\n        if(options.leading !== false) {\r\n          func.apply(context, args);\r\n        }\r\n        timeout = $timeout(function later() {\r\n          timeout = null;\r\n          if(options.trailing !== false) {\r\n            func.apply(context, args);\r\n          }\r\n        }, wait, false);\r\n      }\r\n    };\r\n  };\r\n});\r\n\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\r\n\r\n  .factory('dimensions', function($document, $window) {\r\n\r\n    var jqLite = angular.element;\r\n    var fn = {};\r\n\r\n    /**\r\n     * Test the element nodeName\r\n     * @param element\r\n     * @param name\r\n     */\r\n    var nodeName = fn.nodeName = function(element, name) {\r\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\r\n    };\r\n\r\n    /**\r\n     * Returns the element computed style\r\n     * @param element\r\n     * @param prop\r\n     * @param extra\r\n     */\r\n    fn.css = function(element, prop, extra) {\r\n      var value;\r\n      if (element.currentStyle) { //IE\r\n        value = element.currentStyle[prop];\r\n      } else if (window.getComputedStyle) {\r\n        value = window.getComputedStyle(element)[prop];\r\n      } else {\r\n        value = element.style[prop];\r\n      }\r\n      return extra === true ? parseFloat(value) || 0 : value;\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.offset = function(element) {\r\n      var boxRect = element.getBoundingClientRect();\r\n      var docElement = element.ownerDocument;\r\n      return {\r\n        width: boxRect.width || element.offsetWidth,\r\n        height: boxRect.height || element.offsetHeight,\r\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\r\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\r\n      };\r\n    };\r\n  \r\n    /**\r\n     * Provides set equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     * @param options\r\n     * @param i\r\n     */\r\n    fn.setOffset = function (element, options, i) {\r\n      var curPosition,\r\n          curLeft,\r\n          curCSSTop,\r\n          curTop,\r\n          curOffset,\r\n          curCSSLeft,\r\n          calculatePosition,\r\n          position = fn.css(element, 'position'),\r\n          curElem = angular.element(element),\r\n          props = {};\r\n      \r\n      // Set position first, in-case top/left are set even on static elem\r\n      if (position === 'static') {\r\n        element.style.position = 'relative';\r\n      }\r\n      \r\n      curOffset = fn.offset(element);\r\n      curCSSTop = fn.css(element, 'top');\r\n      curCSSLeft = fn.css(element, 'left');\r\n      calculatePosition = (position === 'absolute' || position === 'fixed') && \r\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\r\n      \r\n      // Need to be able to calculate position if either\r\n      // top or left is auto and position is either absolute or fixed\r\n      if (calculatePosition) {\r\n        curPosition = fn.position(element);\r\n        curTop = curPosition.top;\r\n        curLeft = curPosition.left;\r\n      } else {\r\n        curTop = parseFloat(curCSSTop) || 0;\r\n        curLeft = parseFloat(curCSSLeft) || 0;\r\n      }\r\n      \r\n      if (angular.isFunction(options)) {\r\n        options = options.call(element, i, curOffset);\r\n      }\r\n      \r\n      if (options.top !== null ) {\r\n        props.top = (options.top - curOffset.top) + curTop;\r\n      }\r\n      if ( options.left !== null ) {\r\n        props.left = (options.left - curOffset.left) + curLeft;\r\n      }\r\n\r\n      if ('using' in options) {\r\n        options.using.call(curElem, props);\r\n      } else {\r\n        curElem.css({\r\n          top: props.top + 'px',\r\n          left: props.left + 'px'\r\n        });\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's position function\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.position = function(element) {\r\n\r\n      var offsetParentRect = {top: 0, left: 0},\r\n          offsetParentElement,\r\n          offset;\r\n\r\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\r\n      if (fn.css(element, 'position') === 'fixed') {\r\n\r\n        // We assume that getBoundingClientRect is available when computed position is fixed\r\n        offset = element.getBoundingClientRect();\r\n\r\n      } else {\r\n\r\n        // Get *real* offsetParentElement\r\n        offsetParentElement = offsetParent(element);\r\n\r\n        // Get correct offsets\r\n        offset = fn.offset(element);\r\n        if (!nodeName(offsetParentElement, 'html')) {\r\n          offsetParentRect = fn.offset(offsetParentElement);\r\n        }\r\n\r\n        // Add offsetParent borders\r\n        offsetParentRect.top += fn.css(offsetParentElement, 'borderTopWidth', true);\r\n        offsetParentRect.left += fn.css(offsetParentElement, 'borderLeftWidth', true);\r\n      }\r\n\r\n      // Subtract parent offsets and element margins\r\n      return {\r\n        width: element.offsetWidth,\r\n        height: element.offsetHeight,\r\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\r\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\r\n      };\r\n\r\n    };\r\n\r\n    /**\r\n     * Returns the closest, non-statically positioned offsetParent of a given element\r\n     * @required-by fn.position\r\n     * @param element\r\n     */\r\n    var offsetParent = function offsetParentElement(element) {\r\n      var docElement = element.ownerDocument;\r\n      var offsetParent = element.offsetParent || docElement;\r\n      if(nodeName(offsetParent, '#document')) return docElement.documentElement;\r\n      while(offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\r\n        offsetParent = offsetParent.offsetParent;\r\n      }\r\n      return offsetParent || docElement.documentElement;\r\n    };\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's height function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/height/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.height = function(element, outer) {\r\n      var value = element.offsetHeight;\r\n      if(outer) {\r\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's width function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/width/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.width = function(element, outer) {\r\n      var value = element.offsetWidth;\r\n      if(outer) {\r\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    return fn;\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\r\n\r\n  .provider('$parseOptions', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\r\n    };\r\n\r\n    this.$get = function($parse, $q) {\r\n\r\n      function ParseOptionsFactory(attr, config) {\r\n\r\n        var $parseOptions = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        $parseOptions.$values = [];\r\n\r\n        // Private vars\r\n        var match, displayFn, valueName, keyName, groupByFn, valueFn, valuesFn;\r\n\r\n        $parseOptions.init = function() {\r\n          $parseOptions.$match = match = attr.match(options.regexp);\r\n          displayFn = $parse(match[2] || match[1]),\r\n          valueName = match[4] || match[6],\r\n          keyName = match[5],\r\n          groupByFn = $parse(match[3] || ''),\r\n          valueFn = $parse(match[2] ? match[1] : valueName),\r\n          valuesFn = $parse(match[7]);\r\n        };\r\n\r\n        $parseOptions.valuesFn = function(scope, controller) {\r\n          return $q.when(valuesFn(scope, controller))\r\n          .then(function(values) {\r\n            if(!angular.isArray(values)) {\r\n              values = [];\r\n            }\r\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\r\n            return $parseOptions.$values;\r\n          });\r\n        };\r\n\r\n        $parseOptions.displayValue = function(modelValue) {\r\n          var scope = {};\r\n          scope[valueName] = modelValue;\r\n          return displayFn(scope);\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function parseValues(values, scope) {\r\n          return values.map(function(match, index) {\r\n            var locals = {}, label, value;\r\n            locals[valueName] = match;\r\n            label = displayFn(scope, locals);\r\n            value = valueFn(scope, locals);\r\n            return {label: label, value: value, index: index};\r\n          });\r\n        }\r\n\r\n        $parseOptions.init();\r\n        return $parseOptions;\r\n\r\n      }\r\n\r\n      return ParseOptionsFactory;\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\n(angular.version.minor < 3 && angular.version.dot < 14) && angular.module('ng')\r\n\r\n.factory('$$rAF', function($window, $timeout) {\r\n\r\n  var requestAnimationFrame = $window.requestAnimationFrame ||\r\n                              $window.webkitRequestAnimationFrame ||\r\n                              $window.mozRequestAnimationFrame;\r\n\r\n  var cancelAnimationFrame = $window.cancelAnimationFrame ||\r\n                             $window.webkitCancelAnimationFrame ||\r\n                             $window.mozCancelAnimationFrame ||\r\n                             $window.webkitCancelRequestAnimationFrame;\r\n\r\n  var rafSupported = !!requestAnimationFrame;\r\n  var raf = rafSupported ?\r\n    function(fn) {\r\n      var id = requestAnimationFrame(fn);\r\n      return function() {\r\n        cancelAnimationFrame(id);\r\n      };\r\n    } :\r\n    function(fn) {\r\n      var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\r\n      return function() {\r\n        $timeout.cancel(timer);\r\n      };\r\n    };\r\n\r\n  raf.supported = rafSupported;\r\n\r\n  return raf;\r\n\r\n});\r\n\r\n// .factory('$$animateReflow', function($$rAF, $document) {\r\n\r\n//   var bodyEl = $document[0].body;\r\n\r\n//   return function(fn) {\r\n//     //the returned function acts as the cancellation function\r\n//     return $$rAF(function() {\r\n//       //the line below will force the browser to perform a repaint\r\n//       //so that all the animated elements within the animation frame\r\n//       //will be properly updated and drawn on screen. This is\r\n//       //required to perform multi-class CSS based animations with\r\n//       //Firefox. DO NOT REMOVE THIS LINE.\r\n//       var a = bodyEl.offsetWidth + 1;\r\n//       fn();\r\n//     });\r\n//   };\r\n\r\n// });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.utils', [])\r\n\r\n  .factory('$utils', function($document, $window) {\r\n\r\n    var fn = {};\r\n\r\n    fn.isIE = function() {\r\n      var ua = $window.navigator.userAgent;\r\n      return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\r\n    };\r\n\r\n    fn.selectScrollFix = function(e) {\r\n      if ($document[0].activeElement.tagName === 'UL') {\r\n        e.preventDefault();\r\n        e.stopImmediatePropagation();\r\n        e.target.focus();\r\n      }\r\n    };\r\n    \r\n    return fn;\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$modal', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      backdropAnimation: 'am-fade',\r\n      prefixClass: 'modal',\r\n      prefixEvent: 'modal',\r\n      placement: 'top',\r\n      templateUrl: 'modal/modal.tpl.html',\r\n      template: '',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true\r\n    };\r\n\r\n    this.$get = function($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\r\n\r\n      var forEach = angular.forEach;\r\n      var trim = String.prototype.trim;\r\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n      var bodyElement = angular.element($window.document.body);\r\n\r\n      function ModalFactory(config) {\r\n\r\n        var $modal = {};\r\n\r\n        // Common vars\r\n        var options = $modal.$options = angular.extend({}, defaults, config);\r\n        var promise = $modal.$promise = $bsCompiler.compile(options);\r\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        if(!options.element && !options.container) {\r\n          options.container = 'body';\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\r\n\r\n        // Support scope as string options\r\n        forEach(['title', 'content'], function(key) {\r\n          if(options[key]) scope[key] = $sce.trustAsHtml(options[key]);\r\n        });\r\n\r\n        // Provide scope helpers\r\n        scope.$hide = function() {\r\n          scope.$$postDigest(function() {\r\n            $modal.hide();\r\n          });\r\n        };\r\n        scope.$show = function() {\r\n          scope.$$postDigest(function() {\r\n            $modal.show();\r\n          });\r\n        };\r\n        scope.$toggle = function() {\r\n          scope.$$postDigest(function() {\r\n            $modal.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $modal.$isShown = scope.$isShown = false;\r\n\r\n        // Fetch, compile then initialize modal\r\n        var compileData, modalElement, modalScope;\r\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\r\n        backdropElement.css({position:'fixed', top:'0px', left:'0px', bottom:'0px', right:'0px', 'z-index': 1038});\r\n        promise.then(function(data) {\r\n          compileData = data;\r\n          $modal.init();\r\n        });\r\n\r\n        $modal.init = function() {\r\n\r\n          // Options: show\r\n          if(options.show) {\r\n            scope.$$postDigest(function() {\r\n              $modal.show();\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $modal.destroy = function() {\r\n\r\n          // Remove element\r\n          destroyModalElement();\r\n\r\n          // remove backdrop element\r\n          if(backdropElement) {\r\n            backdropElement.remove();\r\n            backdropElement = null;\r\n          }\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n        };\r\n\r\n        $modal.show = function() {\r\n          if($modal.$isShown) return;\r\n\r\n          var parent, after;\r\n          if(angular.isElement(options.container)) {\r\n            parent = options.container;\r\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\r\n          } else {\r\n            if (options.container) {\r\n              parent = findElement(options.container);\r\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\r\n            } else {\r\n              parent = null;\r\n              after = options.element;\r\n            }\r\n          }\r\n\r\n          // destroy any existing modal elements\r\n          if(modalElement) destroyModalElement();\r\n\r\n          // create a new scope, so we can destroy it and all child scopes\r\n          // when destroying the modal element\r\n          modalScope = $modal.$scope.$new();\r\n          // Fetch a cloned element linked from template (noop callback is required)\r\n          modalElement = $modal.$element = compileData.link(modalScope, function(clonedElement, scope) {});\r\n\r\n          if(scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n\r\n          // Set the initial positioning.\r\n          modalElement.css({display: 'block'}).addClass(options.placement);\r\n\r\n          // Options: animation\r\n          if(options.animation) {\r\n            if(options.backdrop) {\r\n              backdropElement.addClass(options.backdropAnimation);\r\n            }\r\n            modalElement.addClass(options.animation);\r\n          }\r\n\r\n          if(options.backdrop) {\r\n            $animate.enter(backdropElement, bodyElement, null);\r\n          }\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if(angular.version.minor <= 2) {\r\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\r\n          } else {\r\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\r\n          }\r\n\r\n          $modal.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n          // Focus once the enter-animation has started\r\n          // Weird PhantomJS bug hack\r\n          var el = modalElement[0];\r\n          requestAnimationFrame(function() {\r\n            el.focus();\r\n          });\r\n\r\n          bodyElement.addClass(options.prefixClass + '-open');\r\n          if(options.animation) {\r\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n\r\n          // Bind events\r\n          bindBackdropEvents();\r\n          bindKeyboardEvents();\r\n        };\r\n\r\n        function enterAnimateCallback() {\r\n          scope.$emit(options.prefixEvent + '.show', $modal);\r\n        }\r\n\r\n        $modal.hide = function() {\r\n          if(!$modal.$isShown) return;\r\n\r\n          if(scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if(angular.version.minor <= 2) {\r\n            $animate.leave(modalElement, leaveAnimateCallback);\r\n          } else {\r\n            $animate.leave(modalElement).then(leaveAnimateCallback);\r\n          }\r\n\r\n          if(options.backdrop) {\r\n            $animate.leave(backdropElement);\r\n          }\r\n          $modal.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          unbindBackdropEvents();\r\n          unbindKeyboardEvents();\r\n        };\r\n\r\n        function leaveAnimateCallback() {\r\n          scope.$emit(options.prefixEvent + '.hide', $modal);\r\n          bodyElement.removeClass(options.prefixClass + '-open');\r\n          if(options.animation) {\r\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n        }\r\n\r\n        $modal.toggle = function() {\r\n\r\n          $modal.$isShown ? $modal.hide() : $modal.show();\r\n\r\n        };\r\n\r\n        $modal.focus = function() {\r\n          modalElement[0].focus();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $modal.$onKeyUp = function(evt) {\r\n\r\n          if (evt.which === 27 && $modal.$isShown) {\r\n            $modal.hide();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n        };\r\n\r\n        function bindBackdropEvents() {\r\n          if(options.backdrop) {\r\n            modalElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('wheel', preventEventDefault);\r\n          }\r\n        }\r\n\r\n        function unbindBackdropEvents() {\r\n          if(options.backdrop) {\r\n            modalElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('wheel', preventEventDefault);\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents() {\r\n          if(options.keyboard) {\r\n            modalElement.on('keyup', $modal.$onKeyUp);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents() {\r\n          if(options.keyboard) {\r\n            modalElement.off('keyup', $modal.$onKeyUp);\r\n          }\r\n        }\r\n\r\n        // Private methods\r\n\r\n        function hideOnBackdropClick(evt) {\r\n          if(evt.target !== evt.currentTarget) return;\r\n          options.backdrop === 'static' ? $modal.focus() : $modal.hide();\r\n        }\r\n\r\n        function preventEventDefault(evt) {\r\n          evt.preventDefault();\r\n        }\r\n\r\n        function destroyModalElement() {\r\n          if($modal.$isShown && modalElement !== null) {\r\n            // un-bind events\r\n            unbindBackdropEvents();\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if(modalScope) {\r\n            modalScope.$destroy();\r\n            modalScope = null;\r\n          }\r\n\r\n          if(modalElement) {\r\n            modalElement.remove();\r\n            modalElement = $modal.$element = null;\r\n          }\r\n        }\r\n\r\n        return $modal;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest(scope) {\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n      }\r\n\r\n      function findElement(query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      return ModalFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsModal', function($window, $sce, $modal) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'id', 'prefixEvent', 'prefixClass'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function(key) {\r\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\r\n            scope[key] = $sce.trustAsHtml(newValue);\r\n          });\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsModal && scope.$watch(attr.bsModal, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.content = newValue;\r\n          }\r\n        }, true);\r\n\r\n        // Initialize modal\r\n        var modal = $modal(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', modal.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (modal) modal.destroy();\r\n          options = null;\r\n          modal = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$dropdown', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'dropdown',\r\n      prefixEvent: 'dropdown',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'dropdown/dropdown.tpl.html',\r\n      trigger: 'click',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0\r\n    };\r\n\r\n    this.$get = function($window, $rootScope, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\r\n\r\n      function DropdownFactory(element, config) {\r\n\r\n        var $dropdown = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        var scope = $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        $dropdown = $tooltip(element, options);\r\n        var parentEl = element.parent();\r\n\r\n        // Protected methods\r\n\r\n        $dropdown.$onKeyDown = function(evt) {\r\n          if (!/(38|40)/.test(evt.keyCode)) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Retrieve focused index\r\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\r\n          if(!items.length) return;\r\n          var index;\r\n          angular.forEach(items, function(el, i) {\r\n            if(matchesSelector && matchesSelector.call(el, ':focus')) index = i;\r\n          });\r\n\r\n          // Navigate with keyboard\r\n          if(evt.keyCode === 38 && index > 0) index--;\r\n          else if(evt.keyCode === 40 && index < items.length - 1) index++;\r\n          else if(angular.isUndefined(index)) index = 0;\r\n          items.eq(index)[0].focus();\r\n\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $dropdown.show;\r\n        $dropdown.show = function() {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function() {\r\n            options.keyboard && $dropdown.$element && $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\r\n            bodyEl.on('click', onBodyClick);\r\n          }, 0, false);\r\n          parentEl.hasClass('dropdown') && parentEl.addClass('open');\r\n        };\r\n\r\n        var hide = $dropdown.hide;\r\n        $dropdown.hide = function() {\r\n          if(!$dropdown.$isShown) return;\r\n          options.keyboard && $dropdown.$element && $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\r\n          bodyEl.off('click', onBodyClick);\r\n          parentEl.hasClass('dropdown') && parentEl.removeClass('open');\r\n          hide();\r\n        };\r\n\r\n        var destroy = $dropdown.destroy;\r\n        $dropdown.destroy = function() {\r\n          bodyEl.off('click', onBodyClick);\r\n          destroy();\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function onBodyClick(evt) {\r\n          if(evt.target === element[0]) return;\r\n          return evt.target !== element[0] && $dropdown.hide();\r\n        }\r\n\r\n        return $dropdown;\r\n\r\n      }\r\n\r\n      return DropdownFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDropdown', function($window, $sce, $dropdown) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsDropdown && scope.$watch(attr.bsDropdown, function(newValue, oldValue) {\r\n          scope.content = newValue;\r\n        }, true);\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if(!dropdown || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\r\n          newValue === true ? dropdown.show() : dropdown.hide();\r\n        });\r\n\r\n        // Initialize dropdown\r\n        var dropdown = $dropdown(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (dropdown) dropdown.destroy();\r\n          options = null;\r\n          dropdown = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.navbar', [])\r\n\r\n  .provider('$navbar', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass: 'active',\r\n      routeAttr: 'data-match-route',\r\n      strict: false\r\n    };\r\n\r\n    this.$get = function() {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsNavbar', function($window, $location, $navbar) {\r\n\r\n    var defaults = $navbar.defaults;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = angular.copy(defaults);\r\n        angular.forEach(Object.keys(defaults), function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Watch for the $location\r\n        scope.$watch(function() {\r\n\r\n          return $location.path();\r\n\r\n        }, function(newValue, oldValue) {\r\n\r\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\r\n\r\n          angular.forEach(liElements, function(li) {\r\n\r\n            var liElement = angular.element(li);\r\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\r\n            if(options.strict) {\r\n              pattern = '^' + pattern + '$';\r\n            }\r\n            var regexp = new RegExp(pattern, 'i');\r\n\r\n            if(regexp.test(newValue)) {\r\n              liElement.addClass(options.activeClass);\r\n            } else {\r\n              liElement.removeClass(options.activeClass);\r\n            }\r\n\r\n          });\r\n\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$popover', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      // uncommenting the next two lines will break backwards compatability\r\n      // prefixClass: 'popover',\r\n      // prefixEvent: 'popover',\r\n      container: false,\r\n      target: false,\r\n      placement: 'right',\r\n      templateUrl: 'popover/popover.tpl.html',\r\n      contentTemplate: false,\r\n      trigger: 'click',\r\n      keyboard: true,\r\n      html: false,\r\n      title: '',\r\n      content: '',\r\n      delay: 0,\r\n      autoClose: false\r\n    };\r\n\r\n    this.$get = function($tooltip) {\r\n\r\n      function PopoverFactory(element, config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        var $popover = $tooltip(element, options);\r\n\r\n        // Support scope as string options [/*title, */content]\r\n        if(options.content) {\r\n          $popover.$scope.content = options.content;\r\n        }\r\n\r\n        return $popover;\r\n\r\n      }\r\n\r\n      return PopoverFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPopover', function($window, $sce, $popover) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoClose'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if(angular.isDefined(dataTarget)) {\r\n          if(falseValueRegExp.test(dataTarget))\r\n            options.target = false;\r\n          else\r\n            options.target = dataTarget;\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function(key) {\r\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\r\n            scope[key] = $sce.trustAsHtml(newValue);\r\n            angular.isDefined(oldValue) && requestAnimationFrame(function() {\r\n              popover && popover.$applyPlacement();\r\n            });\r\n          });\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsPopover && scope.$watch(attr.bsPopover, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.content = newValue;\r\n          }\r\n          angular.isDefined(oldValue) && requestAnimationFrame(function() {\r\n            popover && popover.$applyPlacement();\r\n          });\r\n        }, true);\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if(!popover || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\r\n          newValue === true ? popover.show() : popover.hide();\r\n        });\r\n\r\n        // Viewport support\r\n        attr.viewport && scope.$watch(attr.viewport, function (newValue) {\r\n          if(!popover || !angular.isDefined(newValue)) return;\r\n          popover.setViewport(newValue);\r\n        });\r\n\r\n        // Initialize popover\r\n        var popover = $popover(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (popover) popover.destroy();\r\n          options = null;\r\n          popover = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions', 'mgcrea.ngStrap.helpers.utils'])\r\n\r\n  .provider('$select', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'select',\r\n      prefixEvent: '$select',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'select/select.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      multiple: false,\r\n      allNoneButtons: false,\r\n      sort: true,\r\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\r\n      placeholder: 'Choose among the following...',\r\n      allText: 'All',\r\n      noneText: 'None',\r\n      maxLength: 3,\r\n      maxLengthHtml: 'selected',\r\n      iconCheckmark: 'glyphicon glyphicon-ok'\r\n    };\r\n\r\n    this.$get = function($window, $document, $rootScope, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n\r\n      function SelectFactory(element, controller, config) {\r\n\r\n        var $select = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $select = $tooltip(element, options);\r\n        var scope = $select.$scope;\r\n\r\n        scope.$matches = [];\r\n        if (options.multiple) {\r\n          scope.$activeIndex = [];\r\n        }\r\n        else {\r\n          scope.$activeIndex = -1;\r\n        }\r\n        scope.$isMultiple = options.multiple;\r\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\r\n        scope.$iconCheckmark = options.iconCheckmark;\r\n        scope.$allText = options.allText;\r\n        scope.$noneText = options.noneText;\r\n\r\n        scope.$activate = function(index) {\r\n          scope.$$postDigest(function() {\r\n            $select.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function(index, evt) {\r\n          scope.$$postDigest(function() {\r\n            $select.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function() {\r\n          return $select.$isVisible();\r\n        };\r\n\r\n        scope.$isActive = function(index) {\r\n          return $select.$isActive(index);\r\n        };\r\n\r\n        scope.$selectAll = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (!scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        scope.$selectNone = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $select.update = function(matches) {\r\n          scope.$matches = matches;\r\n          $select.$updateActiveIndex();\r\n        };\r\n\r\n        $select.activate = function(index) {\r\n          if(options.multiple) {\r\n            $select.$isActive(index) ? scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1) : scope.$activeIndex.push(index);\r\n            if(options.sort) scope.$activeIndex.sort(function(a, b) { return a - b; }); // use numeric sort instead of default sort\r\n          } else {\r\n            scope.$activeIndex = index;\r\n          }\r\n          return scope.$activeIndex;\r\n        };\r\n\r\n        $select.select = function(index) {\r\n          var value = scope.$matches[index].value;\r\n          scope.$apply(function() {\r\n            $select.activate(index);\r\n            if(options.multiple) {\r\n              controller.$setViewValue(scope.$activeIndex.map(function(index) {\r\n                if (angular.isUndefined(scope.$matches[index])) {\r\n                  return null;\r\n                }\r\n                return scope.$matches[index].value;\r\n              }));\r\n            } else {\r\n              controller.$setViewValue(value);\r\n              // Hide if single select\r\n              $select.hide();\r\n            }\r\n          });\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $select.$updateActiveIndex = function() {\r\n          if(controller.$modelValue && scope.$matches.length) {\r\n            if(options.multiple && angular.isArray(controller.$modelValue)) {\r\n              scope.$activeIndex = controller.$modelValue.map(function(value) {\r\n                return $select.$getIndex(value);\r\n              });\r\n            } else {\r\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\r\n            }\r\n          } else if(scope.$activeIndex >= scope.$matches.length) {\r\n            scope.$activeIndex = options.multiple ? [] : 0;\r\n          } else if(!controller.$modelValue && !options.multiple) {\r\n            scope.$activeIndex = -1;\r\n          }\r\n        };\r\n\r\n        $select.$isVisible = function() {\r\n          if(!options.minLength || !controller) {\r\n            return scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $select.$isActive = function(index) {\r\n          if(options.multiple) {\r\n            return scope.$activeIndex.indexOf(index) !== -1;\r\n          } else {\r\n            return scope.$activeIndex === index;\r\n          }\r\n        };\r\n\r\n        $select.$getIndex = function(value) {\r\n          var l = scope.$matches.length, i = l;\r\n          if(!l) return;\r\n          for(i = l; i--;) {\r\n            if(scope.$matches[i].value === value) break;\r\n          }\r\n          if(i < 0) return;\r\n          return i;\r\n        };\r\n\r\n        $select.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if(isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $select.$onKeyDown = function(evt) {\r\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // release focus on tab\r\n          if (options.multiple && evt.keyCode === 9) {\r\n            return $select.hide();\r\n          }\r\n\r\n          // Select with enter\r\n          if(!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\r\n            return $select.select(scope.$activeIndex);\r\n          }\r\n\r\n          if (!options.multiple) {\r\n            // Navigate with keyboard\r\n            if(evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\r\n            else if(evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\r\n            else if(evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\r\n            else if(angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\r\n            scope.$digest();\r\n          }\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var _show = $select.show;\r\n        $select.show = function() {\r\n          _show();\r\n          if(options.multiple) {\r\n            $select.$element.addClass('select-multiple');\r\n          }\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function() {\r\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n            if(options.keyboard) {\r\n              element.on('keydown', $select.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $select.hide;\r\n        $select.hide = function() {\r\n          if(!options.multiple && !controller.$modelValue) {\r\n            scope.$activeIndex = -1;\r\n          }\r\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n          if(options.keyboard) {\r\n            element.off('keydown', $select.$onKeyDown);\r\n          }\r\n          _hide(true);\r\n        };\r\n\r\n        return $select;\r\n\r\n      }\r\n\r\n      SelectFactory.defaults = defaults;\r\n      return SelectFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsSelect', function($window, $parse, $q, $select, $parseOptions, $utils) {\r\n\r\n    var defaults = $select.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\t\t\r\n        if ($utils.isIE()) {\r\n          element[0].addEventListener('blur', $utils.selectScrollFix);\r\n        }\r\n\t\t\r\n        // Directive options\r\n        var options = {scope: scope, placeholder: defaults.placeholder};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\r\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\r\n        var dataMultiple = element.attr('data-multiple');\r\n        if(angular.isDefined(dataMultiple)) {\r\n          if(falseValueRegExp.test(dataMultiple))\r\n            options.multiple = false;\r\n          else\r\n            options.multiple = dataMultiple;\r\n        }\r\n\r\n        // Add support for select markup\r\n        if(element[0].nodeName.toLowerCase() === 'select') {\r\n          var inputEl = element;\r\n          inputEl.css('display', 'none');\r\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\r\n          inputEl.after(element);\r\n        }\r\n\r\n        // Build proper bsOptions\r\n        var parsedOptions = $parseOptions(attr.bsOptions);\r\n\r\n        // Initialize select\r\n        var select = $select(element, controller, options);\r\n\r\n        // Watch bsOptions values before filtering for changes\r\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\r\n        scope.$watchCollection(watchedOptions, function(newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n          parsedOptions.valuesFn(scope, controller)\r\n          .then(function(values) {\r\n            select.update(values);\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\r\n          select.$updateActiveIndex();\r\n          controller.$render();\r\n        }, true);\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var selected, index;\r\n          if(options.multiple && angular.isArray(controller.$modelValue)) {\r\n            selected = controller.$modelValue.map(function(value) {\r\n              index = select.$getIndex(value);\r\n              return angular.isDefined(index) ? select.$scope.$matches[index].label : false;\r\n            }).filter(angular.isDefined);\r\n            if(selected.length > (options.maxLength || defaults.maxLength)) {\r\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\r\n            } else {\r\n              selected = selected.join(', ');\r\n            }\r\n          } else {\r\n            index = select.$getIndex(controller.$modelValue);\r\n            selected = angular.isDefined(index) ? select.$scope.$matches[index].label : false;\r\n          }\r\n          element.html((selected ? selected : options.placeholder) + (options.caretHtml ? options.caretHtml : defaults.caretHtml));\r\n        };\r\n\r\n        if(options.multiple){\r\n          controller.$isEmpty = function(value){\r\n            return !value || value.length === 0;\r\n          };\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (select) select.destroy();\r\n          options = null;\r\n          select = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.tab', [])\r\n\r\n  .provider('$tab', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      template: 'tab/tab.tpl.html',\r\n      navClass: 'nav-tabs',\r\n      activeClass: 'active'\r\n    };\r\n\r\n    var controller = this.controller = function($scope, $element, $attrs) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'navClass', 'activeClass'], function(key) {\r\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // Publish options on scope\r\n      $scope.$navClass = self.$options.navClass;\r\n      $scope.$activeClass = self.$options.activeClass;\r\n\r\n      self.$panes = $scope.$panes = [];\r\n\r\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\r\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\r\n      // activePaneChangeListeners to make more sense.\r\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\r\n\r\n      self.$push = function(pane) {\r\n        if(angular.isUndefined(self.$panes.$active)) {\r\n          $scope.$setActive(pane.name || 0);\r\n        }\r\n        self.$panes.push(pane);\r\n      };\r\n\r\n      self.$remove = function(pane) {\r\n        var index = self.$panes.indexOf(pane);\r\n        var active = self.$panes.$active;\r\n        var activeIndex;\r\n        if(angular.isString(active)) {\r\n          activeIndex = self.$panes.map(function(pane) {\r\n            return pane.name;\r\n          }).indexOf(active);\r\n        } else {\r\n          activeIndex = self.$panes.$active;\r\n        }\r\n\r\n        // remove pane from $panes array\r\n        self.$panes.splice(index, 1);\r\n\r\n        if (index < activeIndex) {\r\n          // we removed a pane before the active pane, so we need to\r\n          // decrement the active pane index\r\n          activeIndex--;\r\n        }\r\n        else if (index === activeIndex && activeIndex === self.$panes.length) {\r\n          // we remove the active pane and it was the one at the end,\r\n          // so select the previous one\r\n          activeIndex--;\r\n        }\r\n        if(activeIndex >= 0 && activeIndex < self.$panes.length) {\r\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\r\n        } else {\r\n          self.$setActive();\r\n        }\r\n      };\r\n\r\n      self.$setActive = $scope.$setActive = function(value) {\r\n        self.$panes.$active = value;\r\n        self.$activePaneChangeListeners.forEach(function(fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$isActive = $scope.$isActive = function($pane, $index) {\r\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\r\n      };\r\n\r\n    };\r\n\r\n    this.$get = function() {\r\n      var $tab = {};\r\n      $tab.defaults = defaults;\r\n      $tab.controller = controller;\r\n      return $tab;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTabs', function($window, $animate, $tab, $parse) {\r\n\r\n    var defaults = $tab.defaults;\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsTabs'],\r\n      transclude: true,\r\n      scope: true,\r\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\r\n      templateUrl: function(element, attr) {\r\n        return attr.template || defaults.template;\r\n      },\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // 'ngModel' does interfere with form validation\r\n        // and status, use `bsActivePane` instead to avoid it\r\n        if(ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function() {\r\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function(modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            bsTabsCtrl.$setActive(modelValue);\r\n            return modelValue;\r\n          });\r\n\r\n        }\r\n\r\n        if (attrs.bsActivePane) {\r\n          // adapted from angularjs ngModelController bindings\r\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\r\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\r\n\r\n          // Update bsActivePane value with change\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function() {\r\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // watch bsActivePane for value changes\r\n          scope.$watch(attrs.bsActivePane, function(newValue, oldValue) {\r\n            bsTabsCtrl.$setActive(newValue);\r\n          }, true);\r\n        }\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPane', function($window, $animate, $sce) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsTabs'],\r\n      scope: true,\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('tab-pane');\r\n\r\n        // Observe title attribute for change\r\n        attrs.$observe('title', function(newValue, oldValue) {\r\n          scope.title = $sce.trustAsHtml(newValue);\r\n        });\r\n\r\n        // Save tab name into scope\r\n        scope.name = attrs.name;\r\n\r\n        // Add animation class\r\n        if(bsTabsCtrl.$options.animation) {\r\n          element.addClass(bsTabsCtrl.$options.animation);\r\n        }\r\n\r\n        attrs.$observe('disabled', function(newValue, oldValue) {\r\n          scope.disabled = scope.$eval(newValue);\r\n        });\r\n\r\n        // Push pane to parent bsTabs controller\r\n        bsTabsCtrl.$push(scope);\r\n\r\n        // remove pane from tab controller when pane is destroyed\r\n        scope.$on('$destroy', function() {\r\n          bsTabsCtrl.$remove(scope);\r\n        });\r\n\r\n        function render() {\r\n          var index = bsTabsCtrl.$panes.indexOf(scope);\r\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsTabsCtrl.$activePaneChangeListeners.push(function() {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$scrollspy', function() {\r\n\r\n    // Pool of registered spies\r\n    var spies = this.$$spies = {};\r\n\r\n    var defaults = this.defaults = {\r\n      debounce: 150,\r\n      throttle: 100,\r\n      offset: 100\r\n    };\r\n\r\n    this.$get = function($window, $document, $rootScope, dimensions, debounce, throttle) {\r\n\r\n      var windowEl = angular.element($window);\r\n      var docEl = angular.element($document.prop('documentElement'));\r\n      var bodyEl = angular.element($window.document.body);\r\n\r\n      // Helper functions\r\n\r\n      function nodeName(element, name) {\r\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\r\n      }\r\n\r\n      function ScrollSpyFactory(config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        if(!options.element) options.element = bodyEl;\r\n        var isWindowSpy = nodeName(options.element, 'body');\r\n        var scrollEl = isWindowSpy ? windowEl : options.element;\r\n        var scrollId = isWindowSpy ? 'window' : options.id;\r\n\r\n        // Use existing spy\r\n        if(spies[scrollId]) {\r\n          spies[scrollId].$$count++;\r\n          return spies[scrollId];\r\n        }\r\n\r\n        var $scrollspy = {};\r\n\r\n        // Private vars\r\n        var unbindViewContentLoaded, unbindIncludeContentLoaded;\r\n        var trackedElements = $scrollspy.$trackedElements = [];\r\n        var sortedElements = [];\r\n        var activeTarget;\r\n        var debouncedCheckPosition;\r\n        var throttledCheckPosition;\r\n        var debouncedCheckOffsets;\r\n        var viewportHeight;\r\n        var scrollTop;\r\n\r\n        $scrollspy.init = function() {\r\n\r\n          // Setup internal ref counter\r\n          this.$$count = 1;\r\n\r\n          // Bind events\r\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\r\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\r\n          scrollEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', debouncedCheckPosition);\r\n          scrollEl.on('scroll', throttledCheckPosition);\r\n\r\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\r\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\r\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\r\n          debouncedCheckOffsets();\r\n\r\n          // Register spy for reuse\r\n          if(scrollId) {\r\n            spies[scrollId] = $scrollspy;\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.destroy = function() {\r\n\r\n          // Check internal ref counter\r\n          this.$$count--;\r\n          if(this.$$count > 0) {\r\n            return;\r\n          }\r\n\r\n          // Unbind events\r\n          scrollEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', debouncedCheckPosition);\r\n          scrollEl.off('scroll', throttledCheckPosition);\r\n          unbindViewContentLoaded();\r\n          unbindIncludeContentLoaded();\r\n          if (scrollId) {\r\n            delete spies[scrollId];\r\n          }\r\n        };\r\n\r\n        $scrollspy.checkPosition = function() {\r\n\r\n          // Not ready yet\r\n          if(!sortedElements.length) return;\r\n\r\n          // Calculate the scroll position\r\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\r\n\r\n          // Calculate the viewport height for use by the components\r\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\r\n\r\n          // Activate first element if scroll is smaller\r\n          if(scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\r\n            return $scrollspy.$activateElement(sortedElements[0]);\r\n          }\r\n\r\n          // Activate proper element\r\n          for (var i = sortedElements.length; i--;) {\r\n            if(angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\r\n            if(activeTarget === sortedElements[i].target) continue;\r\n            if(scrollTop < sortedElements[i].offsetTop) continue;\r\n            if(sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\r\n            return $scrollspy.$activateElement(sortedElements[i]);\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.checkPositionWithEventLoop = function() {\r\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\r\n          // in this setTimeout call\r\n          setTimeout($scrollspy.checkPosition, 1);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $scrollspy.$activateElement = function(element) {\r\n          if(activeTarget) {\r\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\r\n            if(activeElement) {\r\n              activeElement.source.removeClass('active');\r\n              if(nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\r\n                activeElement.source.parent().parent().removeClass('active');\r\n              }\r\n            }\r\n          }\r\n          activeTarget = element.target;\r\n          element.source.addClass('active');\r\n          if(nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\r\n            element.source.parent().parent().addClass('active');\r\n          }\r\n        };\r\n\r\n        $scrollspy.$getTrackedElement = function(target) {\r\n          return trackedElements.filter(function(obj) {\r\n            return obj.target === target;\r\n          })[0];\r\n        };\r\n\r\n        // Track offsets behavior\r\n\r\n        $scrollspy.checkOffsets = function() {\r\n\r\n          angular.forEach(trackedElements, function(trackedElement) {\r\n            var targetElement = document.querySelector(trackedElement.target);\r\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\r\n            if(options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\r\n          });\r\n\r\n          sortedElements = trackedElements\r\n          .filter(function(el) {\r\n            return el.offsetTop !== null;\r\n          })\r\n          .sort(function(a, b) {\r\n            return a.offsetTop - b.offsetTop;\r\n          });\r\n\r\n          debouncedCheckPosition();\r\n\r\n        };\r\n\r\n        $scrollspy.trackElement = function(target, source) {\r\n          trackedElements.push({target: target, source: source});\r\n        };\r\n\r\n        $scrollspy.untrackElement = function(target, source) {\r\n          var toDelete;\r\n          for (var i = trackedElements.length; i--;) {\r\n            if(trackedElements[i].target === target && trackedElements[i].source === source) {\r\n              toDelete = i;\r\n              break;\r\n            }\r\n          }\r\n          trackedElements = trackedElements.splice(toDelete, 1);\r\n        };\r\n\r\n        $scrollspy.activate = function(i) {\r\n          trackedElements[i].addClass('active');\r\n        };\r\n\r\n        // Initialize plugin\r\n\r\n        $scrollspy.init();\r\n        return $scrollspy;\r\n\r\n      }\r\n\r\n      return ScrollSpyFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsScrollspy', function($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      link: function postLink(scope, element, attr) {\r\n\r\n        var options = {scope: scope};\r\n        angular.forEach(['offset', 'target'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        var scrollspy = $scrollspy(options);\r\n        scrollspy.trackElement(options.target, element);\r\n\r\n        scope.$on('$destroy', function() {\r\n          if (scrollspy) {\r\n            scrollspy.untrackElement(options.target, element);\r\n            scrollspy.destroy();\r\n          }\r\n          options = null;\r\n          scrollspy = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsScrollspyList', function($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      compile: function postLink(element, attr) {\r\n        var children = element[0].querySelectorAll('li > a[href]');\r\n        angular.forEach(children, function(child) {\r\n          var childEl = angular.element(child);\r\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$tooltip', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'tooltip',\r\n      prefixEvent: 'tooltip',\r\n      container: false,\r\n      target: false,\r\n      placement: 'top',\r\n      templateUrl: 'tooltip/tooltip.tpl.html',\r\n      template: '',\r\n      contentTemplate: false,\r\n      trigger: 'hover focus',\r\n      keyboard: false,\r\n      html: false,\r\n      show: false,\r\n      title: '',\r\n      type: '',\r\n      delay: 0,\r\n      autoClose: false,\r\n      bsEnabled: true,\r\n      viewport: {\r\n       selector: 'body',\r\n       padding: 0\r\n      }\r\n    };\r\n\r\n    this.$get = function($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\r\n\r\n      var trim = String.prototype.trim;\r\n      var isTouch = 'createTouch' in $window.document;\r\n      var htmlReplaceRegExp = /ng-bind=\"/ig;\r\n      var $body = angular.element($window.document);\r\n\r\n      function TooltipFactory(element, config) {\r\n\r\n        var $tooltip = {};\r\n\r\n        // Common vars\r\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\r\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\r\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        var nodeName = element[0].nodeName.toLowerCase();\r\n        if(options.delay && angular.isString(options.delay)) {\r\n          var split = options.delay.split(',').map(parseFloat);\r\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $tooltip.$id = options.id || element.attr('id') || '';\r\n\r\n        // Support scope as string options\r\n        if(options.title) {\r\n          scope.title = $sce.trustAsHtml(options.title);\r\n        }\r\n\r\n        // Provide scope helpers\r\n        scope.$setEnabled = function(isEnabled) {\r\n          scope.$$postDigest(function() {\r\n            $tooltip.setEnabled(isEnabled);\r\n          });\r\n        };\r\n        scope.$hide = function() {\r\n          scope.$$postDigest(function() {\r\n            $tooltip.hide();\r\n          });\r\n        };\r\n        scope.$show = function() {\r\n          scope.$$postDigest(function() {\r\n            $tooltip.show();\r\n          });\r\n        };\r\n        scope.$toggle = function() {\r\n          scope.$$postDigest(function() {\r\n            $tooltip.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $tooltip.$isShown = scope.$isShown = false;\r\n\r\n        // Private vars\r\n        var timeout, hoverState;\r\n\r\n        // Fetch, compile then initialize tooltip\r\n        var compileData, tipElement, tipContainer, tipScope;\r\n        promise.then(function(data) {\r\n          compileData = data;\r\n          $tooltip.init();\r\n        });\r\n\r\n        $tooltip.init = function() {\r\n\r\n          // Options: delay\r\n          if (options.delay && angular.isNumber(options.delay)) {\r\n            options.delay = {\r\n              show: options.delay,\r\n              hide: options.delay\r\n            };\r\n          }\r\n\r\n          // Replace trigger on touch devices ?\r\n          // if(isTouch && options.trigger === defaults.trigger) {\r\n          //   options.trigger.replace(/hover/g, 'click');\r\n          // }\r\n\r\n          // Options : container\r\n          if(options.container === 'self') {\r\n            tipContainer = element;\r\n          } else if(angular.isElement(options.container)) {\r\n            tipContainer = options.container;\r\n          } else if(options.container) {\r\n            tipContainer = findElement(options.container);\r\n          }\r\n\r\n          // Options: trigger\r\n          bindTriggerEvents();\r\n\r\n          // Options: target\r\n          if(options.target) {\r\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\r\n          }\r\n\r\n          // Options: show\r\n          if(options.show) {\r\n            scope.$$postDigest(function() {\r\n              options.trigger === 'focus' ? element[0].focus() : $tooltip.show();\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $tooltip.destroy = function() {\r\n\r\n          // Unbind events\r\n          unbindTriggerEvents();\r\n\r\n          // Remove element\r\n          destroyTipElement();\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n\r\n        };\r\n\r\n        $tooltip.enter = function() {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'in';\r\n          if (!options.delay || !options.delay.show) {\r\n            return $tooltip.show();\r\n          }\r\n\r\n          timeout = setTimeout(function() {\r\n            if (hoverState ==='in') $tooltip.show();\r\n          }, options.delay.show);\r\n\r\n        };\r\n\r\n        $tooltip.show = function() {\r\n          if (!options.bsEnabled || $tooltip.$isShown) return;\r\n\r\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\r\n          var parent, after;\r\n          if (options.container) {\r\n            parent = tipContainer;\r\n            if (tipContainer[0].lastChild) {\r\n              after = angular.element(tipContainer[0].lastChild);\r\n            } else {\r\n              after = null;\r\n            }\r\n          } else {\r\n            parent = null;\r\n            after = element;\r\n          }\r\n\r\n\r\n          // Hide any existing tipElement\r\n          if(tipElement) destroyTipElement();\r\n          // Fetch a cloned element linked from template\r\n          tipScope = $tooltip.$scope.$new();\r\n          tipElement = $tooltip.$element = compileData.link(tipScope, function(clonedElement, scope) {});\r\n\r\n          // Set the initial positioning.  Make the tooltip invisible\r\n          // so IE doesn't try to focus on it off screen.\r\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\r\n\r\n          // Options: animation\r\n          if(options.animation) tipElement.addClass(options.animation);\r\n          // Options: type\r\n          if(options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\r\n          // Options: custom classes\r\n          if(options.customClass) tipElement.addClass(options.customClass);\r\n\r\n          // Append the element, without any animations.  If we append\r\n          // using $animate.enter, some of the animations cause the placement\r\n          // to be off due to the transforms.\r\n          after ? after.after(tipElement) : parent.prepend(tipElement);\r\n\r\n          $tooltip.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n\r\n          // Now, apply placement\r\n          $tooltip.$applyPlacement();\r\n\r\n          // Once placed, animate it.\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if(angular.version.minor <= 2) {\r\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\r\n          } else {\r\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\r\n          }\r\n          safeDigest(scope);\r\n\r\n          $$rAF(function () {\r\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\r\n            if(tipElement) tipElement.css({visibility: 'visible'});\r\n          });\r\n\r\n          // Bind events\r\n          if(options.keyboard) {\r\n            if(options.trigger !== 'focus') {\r\n              $tooltip.focus();\r\n            }\r\n            bindKeyboardEvents();\r\n          }\r\n\r\n          if(options.autoClose) {\r\n            bindAutoCloseEvents();\r\n          }\r\n\r\n        };\r\n\r\n        function enterAnimateCallback() {\r\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\r\n        }\r\n\r\n        $tooltip.leave = function() {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'out';\r\n          if (!options.delay || !options.delay.hide) {\r\n            return $tooltip.hide();\r\n          }\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'out') {\r\n              $tooltip.hide();\r\n            }\r\n          }, options.delay.hide);\r\n\r\n        };\r\n\r\n        var _blur;\r\n        var _tipToHide;\r\n        $tooltip.hide = function(blur) {\r\n\r\n          if(!$tooltip.$isShown) return;\r\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\r\n\r\n          // store blur value for leaveAnimateCallback to use\r\n          _blur = blur;\r\n\r\n          // store current tipElement reference to use\r\n          // in leaveAnimateCallback\r\n          _tipToHide = tipElement;\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if(angular.version.minor <= 2) {\r\n            $animate.leave(tipElement, leaveAnimateCallback);\r\n          } else {\r\n            $animate.leave(tipElement).then(leaveAnimateCallback);\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          if(options.keyboard && tipElement !== null) {\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if(options.autoClose && tipElement !== null) {\r\n            unbindAutoCloseEvents();\r\n          }\r\n        };\r\n\r\n        function leaveAnimateCallback() {\r\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\r\n\r\n          // check if current tipElement still references\r\n          // the same element when hide was called\r\n          if (tipElement === _tipToHide) {\r\n            // Allow to blur the input when hidden, like when pressing enter key\r\n            if(_blur && options.trigger === 'focus') {\r\n              return element[0].blur();\r\n            }\r\n\r\n            // clean up child scopes\r\n            destroyTipElement();\r\n          }\r\n        }\r\n\r\n        $tooltip.toggle = function() {\r\n          $tooltip.$isShown ? $tooltip.leave() : $tooltip.enter();\r\n        };\r\n\r\n        $tooltip.focus = function() {\r\n          tipElement[0].focus();\r\n        };\r\n\r\n        $tooltip.setEnabled = function(isEnabled) {\r\n          options.bsEnabled = isEnabled;\r\n        };\r\n\r\n        $tooltip.setViewport = function(viewport) {\r\n          options.viewport = viewport;\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $tooltip.$applyPlacement = function() {\r\n          if(!tipElement) return;\r\n\r\n          // Determine if we're doing an auto or normal placement\r\n          var placement = options.placement,\r\n              autoToken = /\\s?auto?\\s?/i,\r\n              autoPlace  = autoToken.test(placement);\r\n\r\n          if (autoPlace) {\r\n            placement = placement.replace(autoToken, '') || defaults.placement;\r\n          }\r\n\r\n          // Need to add the position class before we get\r\n          // the offsets\r\n          tipElement.addClass(options.placement);\r\n\r\n          // Get the position of the target element\r\n          // and the height and width of the tooltip so we can center it.\r\n          var elementPosition = getPosition(),\r\n              tipWidth = tipElement.prop('offsetWidth'),\r\n              tipHeight = tipElement.prop('offsetHeight');\r\n\r\n          // Refresh viewport position\r\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\r\n\r\n          // If we're auto placing, we need to check the positioning\r\n          if (autoPlace) {\r\n            var originalPlacement = placement;\r\n            var viewportPosition = getPosition($tooltip.$viewport);\r\n\r\n            // Determine if the vertical placement\r\n            if (originalPlacement.indexOf('bottom') >= 0 && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\r\n              placement = originalPlacement.replace('bottom', 'top');\r\n            } else if (originalPlacement.indexOf('top') >= 0 && elementPosition.top - tipHeight < viewportPosition.top) {\r\n              placement = originalPlacement.replace('top', 'bottom');\r\n            }\r\n\r\n            // Determine the horizontal placement\r\n            // The exotic placements of left and right are opposite of the standard placements.  Their arrows are put on the left/right\r\n            // and flow in the opposite direction of their placement.\r\n            if ((originalPlacement === 'right' || originalPlacement === 'bottom-left' || originalPlacement === 'top-left') &&\r\n                elementPosition.right + tipWidth > viewportPosition.width) {\r\n\r\n              placement = originalPlacement === 'right' ? 'left' : placement.replace('left', 'right');\r\n            } else if ((originalPlacement === 'left' || originalPlacement === 'bottom-right' || originalPlacement === 'top-right') &&\r\n                elementPosition.left - tipWidth < viewportPosition.left) {\r\n\r\n              placement = originalPlacement === 'left' ? 'right' : placement.replace('right', 'left');\r\n            }\r\n\r\n            tipElement.removeClass(originalPlacement).addClass(placement);\r\n          }\r\n\r\n          // Get the tooltip's top and left coordinates to center it with this directive.\r\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\r\n          applyPlacement(tipPosition, placement);\r\n        };\r\n\r\n        $tooltip.$onKeyUp = function(evt) {\r\n          if (evt.which === 27 && $tooltip.$isShown) {\r\n            $tooltip.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusKeyUp = function(evt) {\r\n          if (evt.which === 27) {\r\n            element[0].blur();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusElementMouseDown = function(evt) {\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Some browsers do not auto-focus buttons (eg. Safari)\r\n          $tooltip.$isShown ? element[0].blur() : element[0].focus();\r\n        };\r\n\r\n        // bind/unbind events\r\n        function bindTriggerEvents() {\r\n          var triggers = options.trigger.split(' ');\r\n          angular.forEach(triggers, function(trigger) {\r\n            if(trigger === 'click') {\r\n              element.on('click', $tooltip.toggle);\r\n            } else if(trigger !== 'manual') {\r\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              nodeName === 'button' && trigger !== 'hover' && element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n            }\r\n          });\r\n        }\r\n\r\n        function unbindTriggerEvents() {\r\n          var triggers = options.trigger.split(' ');\r\n          for (var i = triggers.length; i--;) {\r\n            var trigger = triggers[i];\r\n            if(trigger === 'click') {\r\n              element.off('click', $tooltip.toggle);\r\n            } else if(trigger !== 'manual') {\r\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              nodeName === 'button' && trigger !== 'hover' && element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n            }\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents() {\r\n          if(options.trigger !== 'focus') {\r\n            tipElement.on('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.on('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents() {\r\n          if(options.trigger !== 'focus') {\r\n            tipElement.off('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.off('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        var _autoCloseEventsBinded = false;\r\n        function bindAutoCloseEvents() {\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function() {\r\n            // Stop propagation when clicking inside tooltip\r\n            tipElement.on('click', stopEventPropagation);\r\n\r\n            // Hide when clicking outside tooltip\r\n            $body.on('click', $tooltip.hide);\r\n\r\n            _autoCloseEventsBinded = true;\r\n          }, 0, false);\r\n        }\r\n\r\n        function unbindAutoCloseEvents() {\r\n          if (_autoCloseEventsBinded) {\r\n            tipElement.off('click', stopEventPropagation);\r\n            $body.off('click', $tooltip.hide);\r\n            _autoCloseEventsBinded = false;\r\n          }\r\n        }\r\n\r\n        function stopEventPropagation(event) {\r\n          event.stopPropagation();\r\n        }\r\n\r\n        // Private methods\r\n\r\n        function getPosition($element) {\r\n          $element = $element || (options.target || element);\r\n\r\n          var el = $element[0],\r\n              isBody = el.tagName === 'BODY';\r\n\r\n          var elRect = el.getBoundingClientRect();\r\n          var rect = {};\r\n\r\n          // IE8 has issues with angular.extend and using elRect directly.\r\n          // By coping the values of elRect into a new object, we can continue to use extend\r\n          for (var p in elRect) {\r\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\r\n            rect[p] = elRect[p];\r\n          }\r\n\r\n          if (rect.width === null) {\r\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\r\n            rect = angular.extend({}, rect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top });\r\n          }\r\n          var elOffset = isBody ? { top: 0, left: 0 } : dimensions.offset(el),\r\n              scroll = { scroll:  isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0 },\r\n              outerDims = isBody ? { width: document.documentElement.clientWidth, height: $window.innerHeight } : null;\r\n\r\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\r\n        }\r\n\r\n        function getCalculatedOffset(placement, position, actualWidth, actualHeight) {\r\n          var offset;\r\n          var split = placement.split('-');\r\n\r\n          switch (split[0]) {\r\n          case 'right':\r\n            offset = {\r\n              top: position.top + position.height / 2 - actualHeight / 2,\r\n              left: position.left + position.width\r\n            };\r\n            break;\r\n          case 'bottom':\r\n            offset = {\r\n              top: position.top + position.height,\r\n              left: position.left + position.width / 2 - actualWidth / 2\r\n            };\r\n            break;\r\n          case 'left':\r\n            offset = {\r\n              top: position.top + position.height / 2 - actualHeight / 2,\r\n              left: position.left - actualWidth\r\n            };\r\n            break;\r\n          default:\r\n            offset = {\r\n              top: position.top - actualHeight,\r\n              left: position.left + position.width / 2 - actualWidth / 2\r\n            };\r\n            break;\r\n          }\r\n\r\n          if(!split[1]) {\r\n            return offset;\r\n          }\r\n\r\n          // Add support for corners @todo css\r\n          if(split[0] === 'top' || split[0] === 'bottom') {\r\n            switch (split[1]) {\r\n            case 'left':\r\n              offset.left = position.left;\r\n              break;\r\n            case 'right':\r\n              offset.left =  position.left + position.width - actualWidth;\r\n            }\r\n          } else if(split[0] === 'left' || split[0] === 'right') {\r\n            switch (split[1]) {\r\n            case 'top':\r\n              offset.top = position.top - actualHeight;\r\n              break;\r\n            case 'bottom':\r\n              offset.top = position.top + position.height;\r\n            }\r\n          }\r\n\r\n          return offset;\r\n        }\r\n\r\n        function applyPlacement(offset, placement) {\r\n          var tip = tipElement[0],\r\n              width = tip.offsetWidth,\r\n              height = tip.offsetHeight;\r\n\r\n          // manually read margins because getBoundingClientRect includes difference\r\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10),\r\n              marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\r\n\r\n          // we must check for NaN for ie 8/9\r\n          if (isNaN(marginTop)) marginTop  = 0;\r\n          if (isNaN(marginLeft)) marginLeft = 0;\r\n\r\n          offset.top  = offset.top + marginTop;\r\n          offset.left = offset.left + marginLeft;\r\n\r\n          // dimensions setOffset doesn't round pixel values\r\n          // so we use setOffset directly with our own function\r\n          dimensions.setOffset(tip, angular.extend({\r\n            using: function (props) {\r\n              tipElement.css({\r\n                top: Math.round(props.top) + 'px',\r\n                left: Math.round(props.left) + 'px',\r\n                right: ''\r\n              });\r\n            }\r\n          }, offset), 0);\r\n\r\n          // check to see if placing tip in new offset caused the tip to resize itself\r\n          var actualWidth = tip.offsetWidth,\r\n              actualHeight = tip.offsetHeight;\r\n\r\n          if (placement === 'top' && actualHeight !== height) {\r\n            offset.top = offset.top + height - actualHeight;\r\n          }\r\n\r\n          // If it's an exotic placement, exit now instead of\r\n          // applying a delta and changing the arrow\r\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\r\n\r\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\r\n\r\n          if (delta.left) {\r\n            offset.left += delta.left;\r\n          } else {\r\n            offset.top += delta.top;\r\n          }\r\n\r\n          dimensions.setOffset(tip, offset);\r\n\r\n          if (/top|right|bottom|left/.test(placement)) {\r\n            var isVertical = /top|bottom/.test(placement),\r\n                arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight,\r\n                arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\r\n\r\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\r\n          }\r\n        }\r\n\r\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\r\n        function getViewportAdjustedDelta(placement, position, actualWidth, actualHeight) {\r\n          var delta = {top: 0, left: 0};\r\n          if (!$tooltip.$viewport) return delta;\r\n\r\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\r\n          var viewportDimensions = getPosition($tooltip.$viewport);\r\n\r\n          if (/right|left/.test(placement)) {\r\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\r\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\r\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\r\n              delta.top = viewportDimensions.top - topEdgeOffset;\r\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\r\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\r\n            }\r\n          } else {\r\n            var leftEdgeOffset = position.left - viewportPadding;\r\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\r\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\r\n              delta.left = viewportDimensions.left - leftEdgeOffset;\r\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\r\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\r\n            }\r\n          }\r\n\r\n          return delta;\r\n        }\r\n\r\n        function replaceArrow(delta, dimension, isHorizontal) {\r\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\r\n\r\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\r\n                .css(isHorizontal ? 'top' : 'left', '');\r\n        }\r\n\r\n        function destroyTipElement() {\r\n          // Cancel pending callbacks\r\n          clearTimeout(timeout);\r\n\r\n          if($tooltip.$isShown && tipElement !== null) {\r\n            if(options.autoClose) {\r\n              unbindAutoCloseEvents();\r\n            }\r\n\r\n            if(options.keyboard) {\r\n              unbindKeyboardEvents();\r\n            }\r\n          }\r\n\r\n          if(tipScope) {\r\n            tipScope.$destroy();\r\n            tipScope = null;\r\n          }\r\n\r\n          if(tipElement) {\r\n            tipElement.remove();\r\n            tipElement = $tooltip.$element = null;\r\n          }\r\n        }\r\n\r\n        return $tooltip;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest(scope) {\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n      }\r\n\r\n      function findElement(query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      var fetchPromises = {};\r\n      function fetchTemplate(template) {\r\n        if(fetchPromises[template]) return fetchPromises[template];\r\n        return (fetchPromises[template] = $http.get(template, {cache: $templateCache}).then(function(res) {\r\n          return res.data;\r\n        }));\r\n      }\r\n\r\n      return TooltipFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTooltip', function($window, $location, $sce, $tooltip, $$rAF) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if(angular.isDefined(dataTarget)) {\r\n          if(falseValueRegExp.test(dataTarget))\r\n            options.target = false;\r\n          else\r\n            options.target = dataTarget;\r\n        }\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')){\r\n          scope.title = '';\r\n        }\r\n\r\n        // Observe scope attributes for change\r\n        attr.$observe('title', function(newValue) {\r\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\r\n            var oldValue = scope.title;\r\n            scope.title = $sce.trustAsHtml(newValue);\r\n            angular.isDefined(oldValue) && $$rAF(function() {\r\n              tooltip && tooltip.$applyPlacement();\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsTooltip && scope.$watch(attr.bsTooltip, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.title = newValue;\r\n          }\r\n          angular.isDefined(oldValue) && $$rAF(function() {\r\n            tooltip && tooltip.$applyPlacement();\r\n          });\r\n        }, true);\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if(!tooltip || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\r\n          newValue === true ? tooltip.show() : tooltip.hide();\r\n        });\r\n\r\n        // Enabled binding support\r\n        attr.bsEnabled && scope.$watch(attr.bsEnabled, function(newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\r\n          if(!tooltip || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\r\n          newValue === false ? tooltip.setEnabled(false) : tooltip.setEnabled(true);\r\n        });\r\n\r\n        // Viewport support\r\n        attr.viewport && scope.$watch(attr.viewport, function (newValue) {\r\n          if(!tooltip || !angular.isDefined(newValue)) return;\r\n          tooltip.setViewport(newValue);\r\n        });\r\n\r\n        // Initialize popover\r\n        var tooltip = $tooltip(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if(tooltip) tooltip.destroy();\r\n          options = null;\r\n          tooltip = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$typeahead', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'typeahead',\r\n      prefixEvent: '$typeahead',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'typeahead/typeahead.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      minLength: 1,\r\n      filter: 'bsAsyncFilter',\r\n      limit: 6,\r\n      autoSelect: false,\r\n      comparator: '',\r\n      trimValue: true\r\n    };\r\n\r\n    this.$get = function($window, $rootScope, $tooltip, $$rAF, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n\r\n      function TypeaheadFactory(element, controller, config) {\r\n\r\n        var $typeahead = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $typeahead = $tooltip(element, options);\r\n        var parentScope = config.scope;\r\n        var scope = $typeahead.$scope;\r\n\r\n        scope.$resetMatches = function() {\r\n          scope.$matches = [];\r\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\r\n        };\r\n        scope.$resetMatches();\r\n\r\n        scope.$activate = function(index) {\r\n          scope.$$postDigest(function() {\r\n            $typeahead.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function(index, evt) {\r\n          scope.$$postDigest(function() {\r\n            $typeahead.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function() {\r\n          return $typeahead.$isVisible();\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $typeahead.update = function(matches) {\r\n          scope.$matches = matches;\r\n          if (scope.$activeIndex >= matches.length) {\r\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\r\n          }\r\n\r\n          // wrap in a $timeout so the results are updated\r\n          // before repositioning\r\n          safeDigest(scope);\r\n          $$rAF($typeahead.$applyPlacement);\r\n        };\r\n\r\n        $typeahead.activate = function(index) {\r\n          scope.$activeIndex = index;\r\n        };\r\n\r\n        $typeahead.select = function(index) {\r\n          if (index === -1) return;\r\n          var value = scope.$matches[index].value;\r\n          // console.log('$setViewValue', value);\r\n          controller.$setViewValue(value);\r\n          controller.$render();\r\n          scope.$resetMatches();\r\n          if (parentScope) parentScope.$digest();\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $typeahead.$isVisible = function() {\r\n          if (!options.minLength || !controller) {\r\n            return !!scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $typeahead.$getIndex = function(value) {\r\n          var l = scope.$matches.length,\r\n            i = l;\r\n          if (!l) return;\r\n          for (i = l; i--;) {\r\n            if (scope.$matches[i].value === value) break;\r\n          }\r\n          if (i < 0) return;\r\n          return i;\r\n        };\r\n\r\n        $typeahead.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n        };\r\n\r\n        $typeahead.$onKeyDown = function(evt) {\r\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\r\n\r\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\r\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // Select with enter\r\n          if (evt.keyCode === 13 && scope.$matches.length) {\r\n            $typeahead.select(scope.$activeIndex);\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          else if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\r\n          else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\r\n          else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\r\n          scope.$digest();\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $typeahead.show;\r\n        $typeahead.show = function() {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed immediately.\r\n          $timeout(function() {\r\n            $typeahead.$element && $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\r\n            if (options.keyboard) {\r\n              element && element.on('keydown', $typeahead.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var hide = $typeahead.hide;\r\n        $typeahead.hide = function() {\r\n          $typeahead.$element && $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\r\n          if (options.keyboard) {\r\n            element && element.off('keydown', $typeahead.$onKeyDown);\r\n          }\r\n          if (!options.autoSelect)\r\n            $typeahead.activate(-1);\r\n          hide();\r\n        };\r\n\r\n        return $typeahead;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest(scope) {\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n      }\r\n\r\n      TypeaheadFactory.defaults = defaults;\r\n      return TypeaheadFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .filter('bsAsyncFilter', function($filter) {\r\n    return function(array, expression, comparator) {\r\n      if (array && angular.isFunction(array.then)) {\r\n        return array.then(function(results) {\r\n          return $filter('filter')(results, expression, comparator);\r\n        });\r\n      } else {\r\n        return $filter('filter')(array, expression, comparator);\r\n      }\r\n    };\r\n  })\r\n\r\n  .directive('bsTypeahead', function($window, $parse, $q, $typeahead, $parseOptions) {\r\n\r\n    var defaults = $typeahead.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function(key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'trimValue'], function(key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // Disable browser autocompletion\r\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\r\n\r\n        // Build proper bsOptions\r\n        var filter = options.filter || defaults.filter;\r\n        var limit = options.limit || defaults.limit;\r\n        var comparator = options.comparator || defaults.comparator;\r\n\r\n        var bsOptions = attr.bsOptions;\r\n        if (filter) bsOptions += ' | ' + filter + ':$viewValue';\r\n        if (comparator) bsOptions += ':' + comparator;\r\n        if (limit) bsOptions += ' | limitTo:' + limit;\r\n        var parsedOptions = $parseOptions(bsOptions);\r\n\r\n        // Initialize typeahead\r\n        var typeahead = $typeahead(element, controller, options);\r\n\r\n        // Watch options on demand\r\n        if (options.watchOptions) {\r\n          // Watch bsOptions values before filtering for changes, drop function calls\r\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\r\n          scope.$watchCollection(watchedOptions, function(newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n            parsedOptions.valuesFn(scope, controller).then(function(values) {\r\n              typeahead.update(values);\r\n              controller.$render();\r\n            });\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          // console.warn('$watch', element.attr('ng-model'), newValue);\r\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\r\n          parsedOptions.valuesFn(scope, controller)\r\n            .then(function(values) {\r\n              // Prevent input with no future prospect if selectMode is truthy\r\n              // @TODO test selectMode\r\n              if (options.selectMode && !values.length && newValue.length > 0) {\r\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\r\n                return;\r\n              }\r\n              if (values.length > limit) values = values.slice(0, limit);\r\n              var isVisible = typeahead.$isVisible();\r\n              isVisible && typeahead.update(values);\r\n              // Do not re-queue an update if a correct value has been selected\r\n              if (values.length === 1 && values[0].value === newValue) return;\r\n              !isVisible && typeahead.update(values);\r\n              // Queue a new rendering that will leverage collection loading\r\n              controller.$render();\r\n            });\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function(modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var displayValue = parsedOptions.displayValue(modelValue);\r\n\r\n          // If we can determine the displayValue, use that\r\n          if (displayValue) {\r\n            return displayValue;\r\n          }\r\n\r\n          // If there's no display value, attempt to use the modelValue.\r\n          // If the model is an object not much we can do\r\n          if (modelValue && typeof modelValue !== 'object') {\r\n            return modelValue;\r\n          }\r\n          return '';\r\n        });\r\n\r\n        // Model rendering in view\r\n        controller.$render = function() {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          if (controller.$isEmpty(controller.$viewValue)) {\r\n            return element.val('');\r\n          }\r\n          var index = typeahead.$getIndex(controller.$modelValue);\r\n          var selected = angular.isDefined(index) ? typeahead.$scope.$matches[index].label : controller.$viewValue;\r\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\r\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\r\n          element.val(options.trimValue === false ? value : value.trim());\r\n        };\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (typeahead) typeahead.destroy();\r\n          options = null;\r\n          typeahead = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$timepicker', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      //uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'timepicker',\r\n      prefixClass: 'timepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'timepicker/timepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: true,\r\n      timeType: 'date',\r\n      timeFormat: 'shortTime',\r\n      timezone: null,\r\n      modelTimeFormat: null,\r\n      autoclose: false,\r\n      minTime: -Infinity,\r\n      maxTime: +Infinity,\r\n      length: 5,\r\n      hourStep: 1,\r\n      minuteStep: 5,\r\n      secondStep: 5,\r\n      roundDisplay: false,\r\n      iconUp: 'glyphicon glyphicon-chevron-up',\r\n      iconDown: 'glyphicon glyphicon-chevron-down',\r\n      arrowBehavior: 'pager'\r\n    };\r\n\r\n    this.$get = function($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) {\r\n        defaults.lang = $dateFormatter.getDefaultLocale();\r\n      }\r\n\r\n      function timepickerFactory(element, controller, config) {\r\n\r\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $timepicker.$options;\r\n        var scope = $timepicker.$scope;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function(date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        function floorMinutes(time) {\r\n          // coeff used to floor current time to nearest minuteStep interval\r\n          var coeff = 1000 * 60 * options.minuteStep;\r\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\r\n        }\r\n\r\n        // View vars\r\n\r\n        var selectedIndex = 0;\r\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\r\n        var startDate = controller.$dateValue || defaultDate;\r\n        var viewDate = {\r\n          hour: startDate.getHours(),\r\n          meridian: startDate.getHours() < 12,\r\n          minute: startDate.getMinutes(),\r\n          second: startDate.getSeconds(),\r\n          millisecond: startDate.getMilliseconds()\r\n        };\r\n\r\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\r\n\r\n        var hoursFormat = $dateFormatter.hoursFormat(format),\r\n          timeSeparator = $dateFormatter.timeSeparator(format),\r\n          minutesFormat = $dateFormatter.minutesFormat(format),\r\n          secondsFormat = $dateFormatter.secondsFormat(format),\r\n          showSeconds = $dateFormatter.showSeconds(format),\r\n          showAM = $dateFormatter.showAM(format);\r\n\r\n        scope.$iconUp = options.iconUp;\r\n        scope.$iconDown = options.iconDown;\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function(date, index) {\r\n          $timepicker.select(date, index);\r\n        };\r\n        scope.$moveIndex = function(value, index) {\r\n          $timepicker.$moveIndex(value, index);\r\n        };\r\n        scope.$switchMeridian = function(date) {\r\n          $timepicker.switchMeridian(date);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $timepicker.update = function(date) {\r\n          // console.warn('$timepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $timepicker.$date = date;\r\n            angular.extend(viewDate, {\r\n              hour: date.getHours(),\r\n              minute: date.getMinutes(),\r\n              second: date.getSeconds(),\r\n              millisecond: date.getMilliseconds()\r\n            });\r\n            $timepicker.$build();\r\n          } else if (!$timepicker.$isBuilt) {\r\n            $timepicker.$build();\r\n          }\r\n        };\r\n\r\n        $timepicker.select = function(date, index, keep) {\r\n          // console.warn('$timepicker.select', date, scope.$mode);\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\r\n          if (!angular.isDate(date)) date = new Date(date);\r\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\r\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\r\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n          if (options.autoclose && !keep) {\r\n            $timeout(function() {\r\n              $timepicker.hide(true);\r\n            });\r\n          }\r\n        };\r\n\r\n        $timepicker.switchMeridian = function(date) {\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            return;\r\n          }\r\n          var hours = (date || controller.$dateValue).getHours();\r\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $timepicker.$build = function() {\r\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\r\n          var i, midIndex = scope.midIndex = parseInt(options.length / 2, 10);\r\n          var hours = [],\r\n            hour;\r\n          for (i = 0; i < options.length; i++) {\r\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\r\n            hours.push({\r\n              date: hour,\r\n              label: formatDate(hour, hoursFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\r\n              disabled: $timepicker.$isDisabled(hour, 0)\r\n            });\r\n          }\r\n          var minutes = [],\r\n            minute;\r\n          for (i = 0; i < options.length; i++) {\r\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\r\n            minutes.push({\r\n              date: minute,\r\n              label: formatDate(minute, minutesFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\r\n              disabled: $timepicker.$isDisabled(minute, 1)\r\n            });\r\n          }\r\n          var seconds = [],\r\n            second;\r\n          for (i = 0; i < options.length; i++) {\r\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\r\n            seconds.push({\r\n              date: second,\r\n              label: formatDate(second, secondsFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\r\n              disabled: $timepicker.$isDisabled(second, 2)\r\n            });\r\n          }\r\n\r\n          var rows = [];\r\n          for (i = 0; i < options.length; i++) {\r\n            if (showSeconds) {\r\n              rows.push([hours[i], minutes[i], seconds[i]]);\r\n            } else {\r\n              rows.push([hours[i], minutes[i]]);\r\n            }\r\n          }\r\n          scope.rows = rows;\r\n          scope.showSeconds = showSeconds;\r\n          scope.showAM = showAM;\r\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\r\n          scope.timeSeparator = timeSeparator;\r\n          $timepicker.$isBuilt = true;\r\n        };\r\n\r\n        $timepicker.$isSelected = function(date, index) {\r\n          if (!$timepicker.$date) return false;\r\n          else if (index === 0) {\r\n            return date.getHours() === $timepicker.$date.getHours();\r\n          } else if (index === 1) {\r\n            return date.getMinutes() === $timepicker.$date.getMinutes();\r\n          } else if (index === 2) {\r\n            return date.getSeconds() === $timepicker.$date.getSeconds();\r\n          }\r\n        };\r\n\r\n        $timepicker.$isDisabled = function(date, index) {\r\n          var selectedTime;\r\n          if (index === 0) {\r\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\r\n          } else if (index === 1) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\r\n          } else if (index === 2) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\r\n          }\r\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\r\n        };\r\n\r\n        scope.$arrowAction = function(value, index) {\r\n          if (options.arrowBehavior === 'picker') {\r\n            $timepicker.$setTimeByStep(value, index);\r\n          } else {\r\n            $timepicker.$moveIndex(value, index);\r\n          }\r\n        };\r\n\r\n        $timepicker.$setTimeByStep = function(value, index) {\r\n          var newDate = new Date($timepicker.$date || startDate);\r\n          var hours = newDate.getHours();\r\n          var minutes = newDate.getMinutes();\r\n          var seconds = newDate.getSeconds();\r\n          if (index === 0) {\r\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\r\n          } else if (index === 1) {\r\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\r\n          } else if (index === 2) {\r\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\r\n          }\r\n          $timepicker.select(newDate, index, true);\r\n        };\r\n\r\n        $timepicker.$moveIndex = function(value, index) {\r\n          var targetDate;\r\n          if (index === 0) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\r\n            angular.extend(viewDate, {\r\n              hour: targetDate.getHours()\r\n            });\r\n          } else if (index === 1) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\r\n            angular.extend(viewDate, {\r\n              minute: targetDate.getMinutes()\r\n            });\r\n          } else if (index === 2) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\r\n            angular.extend(viewDate, {\r\n              second: targetDate.getSeconds()\r\n            });\r\n          }\r\n          $timepicker.$build();\r\n        };\r\n\r\n        $timepicker.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $timepicker.$onKeyDown = function(evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Close on enter\r\n          if (evt.keyCode === 13) {\r\n            $timepicker.hide(true);\r\n            return;\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          var newDate = new Date($timepicker.$date);\r\n          var hours = newDate.getHours(),\r\n            hoursLength = formatDate(newDate, hoursFormat).length;\r\n          var minutes = newDate.getMinutes(),\r\n            minutesLength = formatDate(newDate, minutesFormat).length;\r\n          var seconds = newDate.getSeconds(),\r\n            secondsLength = formatDate(newDate, secondsFormat).length;\r\n          var sepLength = 1;\r\n          var lateralMove = /(37|39)/.test(evt.keyCode);\r\n          var count = 2 + showSeconds * 1 + showAM * 1;\r\n\r\n          // Navigate indexes (left, right)\r\n          if (lateralMove) {\r\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\r\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\r\n          }\r\n\r\n          // Update values (up, down)\r\n          var selectRange = [0, hoursLength];\r\n          var incr = 0;\r\n          if (evt.keyCode === 38) incr = -1;\r\n          if (evt.keyCode === 40) incr = +1;\r\n          var isSeconds = selectedIndex === 2 && showSeconds;\r\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\r\n          if (selectedIndex === 0) {\r\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\r\n            // re-calculate hours length because we have changed hours value\r\n            hoursLength = formatDate(newDate, hoursFormat).length;\r\n            selectRange = [0, hoursLength];\r\n          } else if (selectedIndex === 1) {\r\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\r\n            // re-calculate minutes length because we have changes minutes value\r\n            minutesLength = formatDate(newDate, minutesFormat).length;\r\n            selectRange = [hoursLength + sepLength, minutesLength];\r\n          } else if (isSeconds) {\r\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\r\n            // re-calculate seconds length because we have changes seconds value\r\n            secondsLength = formatDate(newDate, secondsFormat).length;\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\r\n          } else if (isMeridian) {\r\n            if (!lateralMove) $timepicker.switchMeridian();\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\r\n          }\r\n          $timepicker.select(newDate, selectedIndex, true);\r\n          createSelection(selectRange[0], selectRange[1]);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function createSelection(start, length) {\r\n          var end = start + length;\r\n          if (element[0].createTextRange) {\r\n            var selRange = element[0].createTextRange();\r\n            selRange.collapse(true);\r\n            selRange.moveStart('character', start);\r\n            selRange.moveEnd('character', end);\r\n            selRange.select();\r\n          } else if (element[0].setSelectionRange) {\r\n            element[0].setSelectionRange(start, end);\r\n          } else if (angular.isUndefined(element[0].selectionStart)) {\r\n            element[0].selectionStart = start;\r\n            element[0].selectionEnd = end;\r\n          }\r\n        }\r\n\r\n        function focusElement() {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $timepicker.init;\r\n        $timepicker.init = function() {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'time');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $timepicker.destroy;\r\n        $timepicker.destroy = function() {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $timepicker.show;\r\n        $timepicker.show = function() {\r\n          if((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n          _show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function() {\r\n            $timepicker.$element && $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n            if (options.keyboard) {\r\n              element && element.on('keydown', $timepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $timepicker.hide;\r\n        $timepicker.hide = function(blur) {\r\n          if (!$timepicker.$isShown) return;\r\n          $timepicker.$element && $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n          if (options.keyboard) {\r\n            element && element.off('keydown', $timepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $timepicker;\r\n\r\n      }\r\n\r\n      timepickerFactory.defaults = defaults;\r\n      return timepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsTimepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\r\n\r\n    var defaults = $timepicker.defaults;\r\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent'], function(key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function(key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if (!timepicker || !angular.isDefined(newValue)) return;\r\n          if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\r\n          newValue === true ? timepicker.show() : timepicker.hide();\r\n        });\r\n\r\n        // Initialize timepicker\r\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\r\n        var timepicker = $timepicker(element, controller, options);\r\n        options = timepicker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function(date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        // Initialize parser\r\n        var dateParser = $dateParser({\r\n          format: options.timeFormat,\r\n          lang: lang\r\n        });\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minTime', 'maxTime'], function(key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\r\n            timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\r\n            !isNaN(timepicker.$options[key]) && timepicker.$build();\r\n            validateAgainstMinMaxTime(controller.$dateValue);\r\n          });\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\r\n          timepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        function validateAgainstMinMaxTime(parsedTime) {\r\n          if (!angular.isDate(parsedTime)) return;\r\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\r\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (!isValid) {\r\n            return;\r\n          }\r\n          controller.$dateValue = parsedTime;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function(viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            controller.$setValidity('date', true);\r\n            return null;\r\n          }\r\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // Return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return undefined;\r\n          } else {\r\n            validateAgainstMinMaxTime(parsedTime);\r\n          }\r\n\r\n          if (options.timeType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\r\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.timeType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.timeType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.timeType === 'iso') {\r\n            return date.toISOString();\r\n          } else {\r\n            return new Date(date);\r\n          }\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function(modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.timeType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\r\n          } else if (options.timeType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\r\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          return getTimeFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function() {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getTimeFormattedString());\r\n        };\r\n\r\n        function getTimeFormattedString() {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (timepicker) timepicker.destroy();\r\n          options = null;\r\n          timepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}